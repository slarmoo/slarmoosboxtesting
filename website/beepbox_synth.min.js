var beepbox=function(e){"use strict";
/*!
    Copyright (c) 2012-2022 John Nesky and contributing authors

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    */var t,n=e&&e.t||function(e,t,n,i){return new(n||(n=Promise))((function(s,a){function o(e){try{l(i.next(e))}catch(e){a(e)}}function r(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,r)}l((i=i.apply(e,t||[])).next())}))};const i=["chip","FM","noise","spectrum","drumset","harmonics","pulse width","picked string","supersaw","chip (custom)","mod","FM (6-op)"];const s=new class{constructor(){this.statusTable={},this.urlTable={},this.totalSamples=0,this.samplesLoaded=0}};class a extends Event{constructor(e,t){super("sampleloaded"),this.totalSamples=e,this.samplesLoaded=t}}class o extends EventTarget{constructor(){super()}}const r=new o;function l(e,t,i,o,l){return n(this,void 0,void 0,(function*(){const n=new AudioContext({sampleRate:l});let p=!1;const h=u.chipWaves[t],f=u.rawChipWaves[t],m=u.rawRawChipWaves[t];fetch(e).then((e=>e.ok?e.arrayBuffer():(s.statusTable[t]=2,Promise.reject(new Error("Couldn't load sample"))))).then((e=>n.decodeAudioData(e))).then((e=>{const l=c(Array.from(e.getChannelData(0))),u=d(l);h.samples=u,f.samples=l,m.samples=l,o.isUsingAdvancedLoopControls&&(i.chipWaveLoopStart=null!=o.chipWaveLoopStart?o.chipWaveLoopStart:0,i.chipWaveLoopEnd=null!=o.chipWaveLoopEnd?o.chipWaveLoopEnd:l.length-1,i.chipWaveLoopMode=null!=o.chipWaveLoopMode?o.chipWaveLoopMode:0,i.chipWavePlayBackwards=o.chipWavePlayBackwards,i.chipWaveStartOffset=null!=o.chipWaveStartOffset?o.chipWaveStartOffset:0),s.samplesLoaded++,s.statusTable[t]=1,r.dispatchEvent(new a(s.totalSamples,s.samplesLoaded)),p||(p=!0,n.close())})).catch((i=>{s.statusTable[t]=2,alert("Failed to load "+e+":\n"+i),p||(p=!0,n.close())}))}))}function p(e){return new Promise(((t,n)=>{if(!u.willReloadForCustomSamples){const n=document.createElement("script");n.src=e,document.head.appendChild(n),n.addEventListener("load",(e=>{t()}))}}))}function h(e){const t=u.chipWaves[0].samples,n=u.rawRawChipWaves[0].samples;if(0==e){const e=[{name:"paandorasbox kick",expression:4,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"paandorasbox snare",expression:3,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"paandorasbox piano1",expression:3,isSampled:!0,isPercussion:!1,extraSampleDetune:2},{name:"paandorasbox WOW",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:0},{name:"paandorasbox overdrive",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-2},{name:"paandorasbox trumpet",expression:3,isSampled:!0,isPercussion:!1,extraSampleDetune:1.2},{name:"paandorasbox saxophone",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-5},{name:"paandorasbox orchestrahit",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:4.2},{name:"paandorasbox detatched violin",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:4.2},{name:"paandorasbox synth",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-.8},{name:"paandorasbox sonic3snare",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"paandorasbox come on",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:0},{name:"paandorasbox choir",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-3},{name:"paandorasbox overdriveguitar",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-6.2},{name:"paandorasbox flute",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-6},{name:"paandorasbox legato violin",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-28},{name:"paandorasbox tremolo violin",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-33},{name:"paandorasbox amen break",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-55},{name:"paandorasbox pizzicato violin",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-11},{name:"paandorasbox tim allen grunt",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-20},{name:"paandorasbox tuba",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:44},{name:"paandorasbox loopingcymbal",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-17},{name:"paandorasbox standardkick",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:-7},{name:"paandorasbox standardsnare",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"paandorasbox closedhihat",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:5},{name:"paandorasbox foothihat",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:4},{name:"paandorasbox openhihat",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:-31},{name:"paandorasbox crashcymbal",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:-43},{name:"paandorasbox pianoC4",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-42.5},{name:"paandorasbox liver pad",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-22.5},{name:"paandorasbox marimba",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-15.5},{name:"paandorasbox susdotwav",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-24.5},{name:"paandorasbox wackyboxtts",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-17.5},{name:"paandorasbox peppersteak_1",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-42.2},{name:"paandorasbox peppersteak_2",expression:2,isSampled:!0,isPercussion:!1,extraSampleDetune:-47},{name:"paandorasbox vinyl_noise",expression:2,isSampled:!0,isPercussion:!0,extraSampleDetune:-50},{name:"paandorasbeta slap bass",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-56},{name:"paandorasbeta HD EB overdrive guitar",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-60},{name:"paandorasbeta sunsoft bass",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-18.5},{name:"paandorasbeta masculine choir",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-50},{name:"paandorasbeta feminine choir",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-60.5},{name:"paandorasbeta tololoche",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-29.5},{name:"paandorasbeta harp",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-54},{name:"paandorasbeta pan flute",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-58},{name:"paandorasbeta krumhorn",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-46},{name:"paandorasbeta timpani",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-50},{name:"paandorasbeta crowd hey",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-29},{name:"paandorasbeta wario land 4 brass",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-68},{name:"paandorasbeta wario land 4 rock organ",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-63},{name:"paandorasbeta wario land 4 DAOW",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-35},{name:"paandorasbeta wario land 4 hour chime",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-47.5},{name:"paandorasbeta wario land 4 tick",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-12.5},{name:"paandorasbeta kirby kick",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-46.5},{name:"paandorasbeta kirby snare",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-46.5},{name:"paandorasbeta kirby bongo",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-46.5},{name:"paandorasbeta kirby click",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-46.5},{name:"paandorasbeta sonor kick",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-28.5},{name:"paandorasbeta sonor snare",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-28.5},{name:"paandorasbeta sonor snare (left hand)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-22.5},{name:"paandorasbeta sonor snare (right hand)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-22.5},{name:"paandorasbeta sonor high tom",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-41.5},{name:"paandorasbeta sonor low tom",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-41.5},{name:"paandorasbeta sonor hihat (closed)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-17},{name:"paandorasbeta sonor hihat (half opened)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-21},{name:"paandorasbeta sonor hihat (open)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-54.5},{name:"paandorasbeta sonor hihat (open tip)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-43.5},{name:"paandorasbeta sonor hihat (pedal)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-28},{name:"paandorasbeta sonor crash",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-51},{name:"paandorasbeta sonor crash (tip)",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-50.5},{name:"paandorasbeta sonor ride",expression:1,isSampled:!0,isPercussion:!0,extraSampleDetune:-46}];s.totalSamples+=e.length;const i=u.rawRawChipWaves.length;for(const i of e){const e=u.rawRawChipWaves.length,a={index:e,name:i.name,expression:i.expression,isSampled:i.isSampled,isPercussion:i.isPercussion,extraSampleDetune:i.extraSampleDetune,samples:n},o={index:e,name:i.name,expression:i.expression,isSampled:i.isSampled,isPercussion:i.isPercussion,extraSampleDetune:i.extraSampleDetune,samples:n},r={index:e,name:i.name,expression:i.expression,isSampled:i.isSampled,isPercussion:i.isPercussion,extraSampleDetune:i.extraSampleDetune,samples:t};u.rawRawChipWaves[e]=o,u.rawRawChipWaves.dictionary[i.name]=o,u.rawChipWaves[e]=a,u.rawChipWaves.dictionary[i.name]=a,u.chipWaves[e]=r,u.chipWaves.dictionary[i.name]=a,s.statusTable[e]=0,s.urlTable[e]="legacySamples"}p("samples.js").then((()=>p("samples2.js"))).then((()=>p("samples3.js"))).then((()=>p("drumsamples.js"))).then((()=>p("wario_samples.js"))).then((()=>p("kirby_samples.js"))).then((()=>{const e=[c(kicksample),c(snaresample),c(pianosample),c(WOWsample),c(overdrivesample),c(trumpetsample),c(saxophonesample),c(orchhitsample),c(detatchedviolinsample),c(synthsample),c(sonic3snaresample),c(comeonsample),c(choirsample),c(overdrivensample),c(flutesample),c(legatoviolinsample),c(tremoloviolinsample),c(amenbreaksample),c(pizzicatoviolinsample),c(timallengruntsample),c(tubasample),c(loopingcymbalsample),c(kickdrumsample),c(snaredrumsample),c(closedhihatsample),c(foothihatsample),c(openhihatsample),c(crashsample),c(pianoC4sample),c(liverpadsample),c(marimbasample),c(susdotwavsample),c(wackyboxttssample),c(peppersteak1),c(peppersteak2),c(vinyl),c(slapbass),c(hdeboverdrive),c(sunsoftbass),c(masculinechoir),c(femininechoir),c(southtololoche),c(harp),c(panflute),c(krumhorn),c(timpani),c(crowdhey),c(warioland4brass),c(warioland4organ),c(warioland4daow),c(warioland4hourchime),c(warioland4tick),c(kirbykick),c(kirbysnare),c(kirbybongo),c(kirbyclick),c(funkkick),c(funksnare),c(funksnareleft),c(funksnareright),c(funktomhigh),c(funktomlow),c(funkhihatclosed),c(funkhihathalfopen),c(funkhihatopen),c(funkhihatopentip),c(funkhihatfoot),c(funkcrash),c(funkcrashtip),c(funkride)];let t=0;for(const n of e){const e=i+t;u.rawChipWaves[e].samples=n,u.rawRawChipWaves[e].samples=n,u.chipWaves[e].samples=d(n),s.statusTable[e]=1,s.samplesLoaded++,r.dispatchEvent(new a(s.totalSamples,s.samplesLoaded)),t++}}))}else if(1==e){const e=[{name:"chronoperc1final",expression:4,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"synthkickfm",expression:4,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"mcwoodclick1",expression:4,isSampled:!0,isPercussion:!0,extraSampleDetune:0},{name:"acoustic snare",expression:4,isSampled:!0,isPercussion:!0,extraSampleDetune:0}];s.totalSamples+=e.length;const i=u.rawRawChipWaves.length;for(const i of e){const e=u.rawRawChipWaves.length,a={index:e,name:i.name,expression:i.expression,isSampled:i.isSampled,isPercussion:i.isPercussion,extraSampleDetune:i.extraSampleDetune,samples:n},o={index:e,name:i.name,expression:i.expression,isSampled:i.isSampled,isPercussion:i.isPercussion,extraSampleDetune:i.extraSampleDetune,samples:n},r={index:e,name:i.name,expression:i.expression,isSampled:i.isSampled,isPercussion:i.isPercussion,extraSampleDetune:i.extraSampleDetune,samples:t};u.rawRawChipWaves[e]=o,u.rawRawChipWaves.dictionary[i.name]=o,u.rawChipWaves[e]=a,u.rawChipWaves.dictionary[i.name]=a,u.chipWaves[e]=r,u.chipWaves.dictionary[i.name]=a,s.statusTable[e]=0,s.urlTable[e]="nintariboxSamples"}p("nintaribox_samples.js").then((()=>{const e=[c(chronoperc1finalsample),c(synthkickfmsample),c(woodclicksample),c(acousticsnaresample)];let t=0;for(const n of e){const e=i+t;u.rawChipWaves[e].samples=n,u.rawRawChipWaves[e].samples=n,u.chipWaves[e].samples=d(n),s.statusTable[e]=1,s.samplesLoaded++,r.dispatchEvent(new a(s.totalSamples,s.samplesLoaded)),t++}}))}else if(2==e){const e=[{name:"cat",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-3},{name:"gameboy",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:7},{name:"mario",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:0},{name:"drum",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:4},{name:"yoshi",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-16},{name:"star",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-16},{name:"fire flower",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-1},{name:"dog",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-1},{name:"oink",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:3},{name:"swan",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:1},{name:"face",expression:1,isSampled:!0,isPercussion:!1,extraSampleDetune:-12}];s.totalSamples+=e.length;const i=u.rawRawChipWaves.length;for(const i of e){const e=u.rawRawChipWaves.length,a={index:e,name:i.name,expression:i.expression,isSampled:i.isSampled,isPercussion:i.isPercussion,extraSampleDetune:i.extraSampleDetune,samples:n},o={index:e,name:i.name,expression:i.expression,isSampled:i.isSampled,isPercussion:i.isPercussion,extraSampleDetune:i.extraSampleDetune,samples:n},r={index:e,name:i.name,expression:i.expression,isSampled:i.isSampled,isPercussion:i.isPercussion,extraSampleDetune:i.extraSampleDetune,samples:t};u.rawRawChipWaves[e]=o,u.rawRawChipWaves.dictionary[i.name]=o,u.rawChipWaves[e]=a,u.rawChipWaves.dictionary[i.name]=a,u.chipWaves[e]=r,u.chipWaves.dictionary[i.name]=a,s.statusTable[e]=0,s.urlTable[e]="marioPaintboxSamples"}p("mario_paintbox_samples.js").then((()=>{const e=[c(catpaintboxsample),c(gameboypaintboxsample),c(mariopaintboxsample),c(drumpaintboxsample),c(yoshipaintboxsample),c(starpaintboxsample),c(fireflowerpaintboxsample),c(dogpaintbox),c(oinkpaintbox),c(swanpaintboxsample),c(facepaintboxsample)];let t=0;for(const n of e){const e=i+t;u.rawChipWaves[e].samples=n,u.rawRawChipWaves[e].samples=n,u.chipWaves[e].samples=d(n),s.statusTable[e]=1,s.samplesLoaded++,r.dispatchEvent(new a(s.totalSamples,s.samplesLoaded)),t++}}))}else console.log("invalid set of built-in samples")}class u{}function c(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];const n=t/e.length;for(let t=0;t<e.length;t++)e[t]-=n;return d(e),e.push(0),new Float32Array(e)}function f(e){let t=0;c(e);for(let n=0;n<e.length-1;n++)t+=Math.abs(e[n]);const n=t/(e.length-1);for(let t=0;t<e.length-1;t++)e[t]=e[t]/n;return new Float32Array(e)}function d(e){let t=0,n=new Float32Array(e.length);for(let i=0;i<e.length;i++)n[i]=t,t+=e[i];return n}function m(e){return e/(2*u.pulseWidthRange)}function v(e,t,n){let i=u.chipNoises[e].samples;if(null==i){if(i=new Float32Array(u.chipNoiseLength+1),u.chipNoises[e].samples=i,0==e){let e=1;for(let t=0;t<u.chipNoiseLength;t++){i[t]=2*(1&e)-1;let n=e>>1;1==(e+n&1)&&(n+=16384),e=n}}else if(1==e)for(let e=0;e<u.chipNoiseLength;e++)i[e]=2*Math.random()-1;else if(2==e){let e=1;for(let t=0;t<u.chipNoiseLength;t++){i[t]=2*(1&e)-1;let n=e>>1;1==(e+n&1)&&(n+=32768),e=n}}else if(3==e){let e=1;for(let t=0;t<u.chipNoiseLength;t++){i[t]=2*(1&e)-1;let n=e>>1;1==(e+n&1)&&(n+=40),e=n}}else if(4==e)y(i,u.chipNoiseLength,10,11,1,1,0),y(i,u.chipNoiseLength,11,14,.6578,.6578,0),t(i,u.chipNoiseLength),n(i,1/Math.sqrt(u.chipNoiseLength));else if(5==e)for(var s=1,a=0;a<u.chipNoiseLength;a++){i[a]=2*(1&s)-1,1==(s+(o=s>>1)&1)&&(o+=40),s=o}else if(6==e)y(i,u.chipNoiseLength,1,10,1,1,0),y(i,u.chipNoiseLength,20,14,-2,-2,0),t(i,u.chipNoiseLength),n(i,1/Math.sqrt(u.chipNoiseLength));else if(7==e)for(s=1,a=0;a<u.chipNoiseLength;a++){i[a]=4*(1&s)*(14*Math.random()+1)-8,1==(s+(o=s>>1)&1)&&(o+=60),s=o}else if(8==e)for(s=1,a=0;a<u.chipNoiseLength;a++){i[a]=(1&s)/2-.5,1==(s+(o=s>>1)&1)&&(o-=40),s=o}else if(9==e){let e=1;for(let t=0;t<u.chipNoiseLength;t++){i[t]=2*(1&e)-1.1;let n=e>>1;1==(e+n&1)&&(n+=131080),e=n}}else if(10==e)for(let e=0;e<u.chipNoiseLength;e++)i[e]=Math.round(Math.random());else if(11==e)for(s=1,a=0;a<u.chipNoiseLength;a++){var o;i[a]=Math.round(1&s),1==(s+(o=s>>1)&1)&&(o-=40),s=o}else if(12==e)for(let e=0;e<u.chipNoiseLength;e++){var r=Math.random();i[e]=Math.pow(r,Math.clz32(r))}else if(13==e){var l,p,h,c,f=0,d=0,m=0;f=d=m=l=p=h=c=0;for(let e=0;e<u.chipNoiseLength;e++){f=.99886*f+.0555179*(g=2*Math.random()-1),d=.99332*d+.0750759*g,m=.969*m+.153852*g,l=.8665*l+.3104856*g,p=.55*p+.5329522*g,h=-.7616*h-.016898*g,i[e]=f+d+m+l+p+h+c+.5362*g,i[e]*=.44,c=.115926*g}}else{if(14!=e)throw new Error("Unrecognized drum index: "+e);var v=0;for(let e=0;e<u.chipNoiseLength;e++){var g=2*Math.random()-1;i[e]=(v+.02*g)/1.02,v=i[e],i[e]*=14}}i[u.chipNoiseLength]=i[0]}return i}function y(e,t,n,i,s,a,o){const r=0|Math.pow(2,n),l=Math.min(t>>1,0|Math.pow(2,i)),p=v(0,null,null);let h=0;for(let u=r;u<l;u++){let r=s+(a-s)*(Math.log2(u)-n)/(i-n),l=Math.pow(2,7*(r-1)+1)*r;l*=Math.pow(u/2048,o),h+=l,l*=p[u];const c=.61803398875*u*u*Math.PI*2;e[u]=Math.cos(c)*l,e[t-u]=Math.sin(c)*l}return h}function g(e=0){const t=new Float32Array(u.sineWaveLength+1),n=u.sineWaveLength/4;for(let i=0;i<u.sineWaveLength+1;i++)t[i]=2*+(Math.abs(i-n)<e*u.sineWaveLength/2||Math.abs(i-u.sineWaveLength-n)<e*u.sineWaveLength/2)-1;return t}function b(e=!1){const t=new Float32Array(u.sineWaveLength+1);for(let n=0;n<u.sineWaveLength+1;n++)t[n]=2*(n+u.sineWaveLength/4)/u.sineWaveLength%2-1,t[n]=e?-t[n]:t[n];return t}function S(e,t,n){let i=u.arpeggioPatterns[e-1];return null!=i?(2==e&&0==t&&(i=[0,0,1,1]),i[n%i.length]):n%e}function w(e){const t={};for(let n=0;n<e.length;n++){const i=e[n];i.index=n,t[i.name]=i}const n=e;return n.dictionary=t,n}function x(e){return 0!=(1024&e)}function M(e){return 0!=(2048&e)}function F(e){return 0!=(128&e)}function k(e){return 0!=(256&e)}function I(e){return 0!=(512&e)}function q(e){return 0!=(32&e)}function E(e){return 0!=(8&e)}function P(e){return 0!=(16&e)}function T(e){return 0!=(4&e)}function D(e){return 0!=(2&e)}function z(e){return 0!=(64&e)}function C(e){return 0!=(1&e)}function H(e){return 0!=(8192&e)}function O(e){return 0!=(16384&e)}function L(e,t=0){return 0==e?0:(e>0&&(e-=1/u.ringModHzRange),e>1/u.ringModHzRange&&(e+=1/u.ringModHzRange),Math.floor(u.ringModMinHz*Math.pow(u.ringModMaxHz/u.ringModMinHz,e)))}t=u,u.thresholdVal=-10,u.kneeVal=40,u.ratioVal=12,u.attackVal=0,u.releaseVal=.25,u.willReloadForCustomSamples=!1,u.jsonFormat="slarmoosbox",u.scales=w([{name:"Free",realName:"chromatic",flags:[!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0]},{name:"Major",realName:"ionian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0]},{name:"Minor",realName:"aeolian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Mixolydian",realName:"mixolydian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!0,!1]},{name:"Lydian",realName:"lydian",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0]},{name:"Dorian",realName:"dorian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!0,!1]},{name:"Phrygian",realName:"phrygian",flags:[!0,!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"Locrian",realName:"locrian",flags:[!0,!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1]},{name:"Lydian Dominant",realName:"lydian dominant",flags:[!0,!1,!0,!1,!0,!1,!0,!0,!1,!0,!0,!1]},{name:"Phrygian Dominant",realName:"phrygian dominant",flags:[!0,!0,!1,!1,!0,!0,!1,!0,!0,!1,!0,!1]},{name:"Harmonic Major",realName:"harmonic major",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!0,!1,!1,!0]},{name:"Harmonic Minor",realName:"harmonic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!1,!0]},{name:"Melodic Minor",realName:"melodic minor",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1,!0]},{name:"Blues Major",realName:"blues major",flags:[!0,!1,!0,!0,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"Blues",realName:"blues",flags:[!0,!1,!1,!0,!1,!0,!0,!0,!1,!1,!0,!1]},{name:"Altered",realName:"altered",flags:[!0,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Major Pentatonic",realName:"major pentatonic",flags:[!0,!1,!0,!1,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"Minor Pentatonic",realName:"minor pentatonic",flags:[!0,!1,!1,!0,!1,!0,!1,!0,!1,!1,!0,!1]},{name:"Whole Tone",realName:"whole tone",flags:[!0,!1,!0,!1,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"Octatonic",realName:"octatonic",flags:[!0,!1,!0,!0,!1,!0,!0,!1,!0,!0,!1,!0]},{name:"Hexatonic",realName:"hexatonic",flags:[!0,!1,!1,!0,!0,!1,!1,!0,!0,!1,!1,!0]},{name:"No Dabbing (MB)",realName:"no dabbing",flags:[!0,!0,!1,!0,!0,!0,!0,!0,!0,!1,!0,!1]},{name:"Jacked Toad (TB)",realName:"jacked toad",flags:[!0,!1,!0,!0,!1,!0,!0,!0,!0,!1,!0,!0]},{name:"Test Scale (TB)",realName:"**t",flags:[!0,!0,!1,!1,!1,!0,!0,!1,!1,!0,!0,!1]},{name:"Custom",realName:"custom",flags:[!0,!1,!0,!0,!1,!1,!1,!0,!0,!1,!0,!0]}]),u.keys=w([{name:"C",isWhiteKey:!0,basePitch:12},{name:"C♯",isWhiteKey:!1,basePitch:13},{name:"D",isWhiteKey:!0,basePitch:14},{name:"D♯",isWhiteKey:!1,basePitch:15},{name:"E",isWhiteKey:!0,basePitch:16},{name:"F",isWhiteKey:!0,basePitch:17},{name:"F♯",isWhiteKey:!1,basePitch:18},{name:"G",isWhiteKey:!0,basePitch:19},{name:"G♯",isWhiteKey:!1,basePitch:20},{name:"A",isWhiteKey:!0,basePitch:21},{name:"A♯",isWhiteKey:!1,basePitch:22},{name:"B",isWhiteKey:!0,basePitch:23}]),u.blackKeyNameParents=[-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1],u.tempoMin=1,u.tempoMax=500,u.octaveMin=-2,u.octaveMax=2,u.echoDelayRange=24,u.echoDelayStepTicks=4,u.echoSustainRange=8,u.echoShelfHz=4e3,u.echoShelfGain=Math.pow(2,-.5),u.reverbShelfHz=8e3,u.reverbShelfGain=Math.pow(2,-1.5),u.reverbRange=32,u.reverbDelayBufferSize=16384,u.reverbDelayBufferMask=t.reverbDelayBufferSize-1,u.beatsPerBarMin=1,u.beatsPerBarMax=64,u.barCountMin=1,u.barCountMax=1024,u.instrumentCountMin=1,u.layeredInstrumentCountMax=10,u.patternInstrumentCountMax=10,u.partsPerBeat=24,u.ticksPerPart=2,u.ticksPerArpeggio=3,u.arpeggioPatterns=[[0],[0,1],[0,1,2,1],[0,1,2,3],[0,1,2,3,4],[0,1,2,3,4,5],[0,1,2,3,4,5,6],[0,1,2,3,4,5,6,7]],u.rhythms=w([{name:"÷3 (triplets)",stepsPerBeat:3,roundUpThresholds:[5,12,18]},{name:"÷4 (standard)",stepsPerBeat:4,roundUpThresholds:[3,9,17,21]},{name:"÷6",stepsPerBeat:6,roundUpThresholds:null},{name:"÷8",stepsPerBeat:8,roundUpThresholds:null},{name:"÷12",stepsPerBeat:12,roundUpThresholds:null},{name:"freehand",stepsPerBeat:24,roundUpThresholds:null}]),u.instrumentTypeNames=["chip","FM","noise","spectrum","drumset","harmonics","PWM","Picked String","supersaw","custom chip","mod","FM6op"],u.instrumentTypeHasSpecialInterval=[!0,!0,!1,!1,!1,!0,!1,!1,!1,!1,!1],u.chipBaseExpression=.03375,u.fmBaseExpression=.03,u.noiseBaseExpression=.19,u.spectrumBaseExpression=.3,u.drumsetBaseExpression=.45,u.harmonicsBaseExpression=.025,u.pwmBaseExpression=.04725,u.supersawBaseExpression=.061425,u.pickedStringBaseExpression=.025,u.distortionBaseVolume=.011,u.bitcrusherBaseVolume=.01,u.granularOutputLoudnessCompensation=.5,u.rawChipWaves=w([{name:"rounded",expression:.94,samples:c([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0,-.2,-.4,-.5,-.6,-.7,-.8,-.85,-.9,-.95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-.95,-.9,-.85,-.8,-.7,-.6,-.5,-.4,-.2])},{name:"triangle",expression:1,samples:c([1/15,.2,5/15,7/15,.6,11/15,13/15,1,1,13/15,11/15,.6,7/15,5/15,.2,1/15,-1/15,-.2,-5/15,-7/15,-.6,-11/15,-13/15,-1,-1,-13/15,-11/15,-.6,-7/15,-5/15,-.2,-1/15])},{name:"square",expression:.5,samples:c([1,-1])},{name:"1/4 pulse",expression:.5,samples:c([1,-1,-1,-1])},{name:"1/8 pulse",expression:.5,samples:c([1,-1,-1,-1,-1,-1,-1,-1])},{name:"sawtooth",expression:.65,samples:c([1/31,3/31,5/31,7/31,9/31,11/31,13/31,15/31,17/31,19/31,21/31,23/31,25/31,27/31,29/31,1,-1,-29/31,-27/31,-25/31,-23/31,-21/31,-19/31,-17/31,-15/31,-13/31,-11/31,-9/31,-7/31,-5/31,-3/31,-1/31])},{name:"double saw",expression:.5,samples:c([0,-.2,-.4,-.6,-.8,-1,1,-.8,-.6,-.4,-.2,1,.8,.6,.4,.2])},{name:"double pulse",expression:.4,samples:c([1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1])},{name:"spiky",expression:.4,samples:c([1,-1,1,-1,1,0])},{name:"sine",expression:.88,samples:f([8,9,11,12,13,14,15,15,15,15,14,14,13,11,10,9,7,6,4,3,2,1,0,0,0,0,1,1,2,4,5,6])},{name:"flute",expression:.8,samples:f([3,4,6,8,10,11,13,14,15,15,14,13,11,8,5,3])},{name:"harp",expression:.8,samples:f([0,3,3,3,4,5,5,6,7,8,9,11,11,13,13,15,15,14,12,11,10,9,8,7,7,5,4,3,2,1,0,0])},{name:"sharp clarinet",expression:.38,samples:f([0,0,0,1,1,8,8,9,9,9,8,8,8,8,8,9,9,7,9,9,10,4,0,0,0,0,0,0,0,0,0,0])},{name:"soft clarinet",expression:.45,samples:f([0,1,5,8,9,9,9,9,9,9,9,11,11,12,13,12,10,9,7,6,4,3,3,3,1,1,1,1,1,1,1,1])},{name:"alto sax",expression:.3,samples:f([5,5,6,4,3,6,8,7,2,1,5,6,5,4,5,7,9,11,13,14,14,14,14,13,10,8,7,7,4,3,4,2])},{name:"bassoon",expression:.35,samples:f([9,9,7,6,5,4,4,4,4,5,7,8,9,10,11,13,13,11,10,9,7,6,4,2,1,1,1,2,2,5,11,14])},{name:"trumpet",expression:.22,samples:f([10,11,8,6,5,5,5,6,7,7,7,7,6,6,7,7,7,7,7,6,6,6,6,6,6,6,6,7,8,9,11,14])},{name:"electric guitar",expression:.2,samples:f([11,12,12,10,6,6,8,0,2,4,8,10,9,10,1,7,11,3,6,6,8,13,14,2,0,12,8,4,13,11,10,13])},{name:"organ",expression:.2,samples:f([11,10,12,11,14,7,5,5,12,10,10,9,12,6,4,5,13,12,12,10,12,5,2,2,8,6,6,5,8,3,2,1])},{name:"pan flute",expression:.35,samples:f([1,4,7,6,7,9,7,7,11,12,13,15,13,11,11,12,13,10,7,5,3,6,10,7,3,3,1,0,1,0,1,0])},{name:"glitch",expression:.5,samples:c},{name:"trapezoid",expression:1,samples:c([1/15,.4,10/15,14/15,1,1,1,1,1,1,1,1,14/15,10/15,.4,1/15,-1/15,-.4,-10/15,-14/15,-1,-1,-1,-1,-1,-1,-1,-1,-14/15,-10/15,-.4,-1/15])},{name:"modbox 10% pulse",expression:.5,samples:f([1,-1,-1,-1,-1,-1,-1,-1,-1,-1])},{name:"modbox sunsoft bass",expression:1,samples:f([0,.1875,.3125,.5625,.5,.75,.875,1,1,.6875,.5,.625,.625,.5,.375,.5625,.4375,.5625,.4375,.4375,.3125,.1875,.1875,.375,.5625,.5625,.5625,.5625,.5625,.4375,.25,0])},{name:"modbox loud pulse",expression:.5,samples:f([1,.7,.1,.1,0,0,0,0,0,.1,.2,.15,.25,.125,.215,.345,4])},{name:"modbox sax",expression:.5,samples:f([1/15,.2,5/15,9,.06])},{name:"modbox guitar",expression:.5,samples:f([-.5,3.5,3,-.5,-.25,-1])},{name:"modbox sine",expression:.5,samples:f([0,.05,.125,.2,.25,.3,.425,.475,.525,.625,.675,.725,.775,.8,.825,.875,.9,.925,.95,.975,.98,.99,.995,1,.995,.99,.98,.975,.95,.925,.9,.875,.825,.8,.775,.725,.675,.625,.525,.475,.425,.3,.25,.2,.125,.05,0,-.05,-.125,-.2,-.25,-.3,-.425,-.475,-.525,-.625,-.675,-.725,-.775,-.8,-.825,-.875,-.9,-.925,-.95,-.975,-.98,-.99,-.995,-1,-.995,-.99,-.98,-.975,-.95,-.925,-.9,-.875,-.825,-.8,-.775,-.725,-.675,-.625,-.525,-.475,-.425,-.3,-.25,-.2,-.125,-.05])},{name:"modbox atari bass",expression:.5,samples:f([1,1,1,1,0,1,0,1,1,0,0,1,0,0,0])},{name:"modbox atari pulse",expression:.5,samples:f([1,0,1,1,1,1,1,1,1,1,1,1,1,1,1])},{name:"modbox 1% pulse",expression:.5,samples:f([1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1])},{name:"modbox curved sawtooth",expression:.5,samples:f([1,.5,1/3,1/4])},{name:"modbox viola",expression:.45,samples:f([-.9,-1,-.85,-.775,-.7,-.6,-.5,-.4,-.325,-.225,-.2,-.125,-.1,-.11,-.125,-.15,-.175,-.18,-.2,-.21,-.22,-.21,-.2,-.175,-.15,-.1,-.5,.75,.11,.175,.2,.25,.26,.275,.26,.25,.225,.2,.19,.18,.19,.2,.21,.22,.23,.24,.25,.26,.275,.28,.29,.3,.29,.28,.27,.26,.25,.225,.2,.175,.15,.1,.075,0,-.01,-.025,.025,.075,.2,.3,.475,.6,.75,.85,.85,1,.99,.95,.8,.675,.475,.275,.01,-.15,-.3,-.475,-.5,-.6,-.71,-.81,-.9,-1,-.9])},{name:"modbox brass",expression:.45,samples:f([-1,-.95,-.975,-.9,-.85,-.8,-.775,-.65,-.6,-.5,-.475,-.35,-.275,-.2,-.125,-.05,0,.075,.125,.15,.2,.21,.225,.25,.225,.21,.2,.19,.175,.125,.1,.075,.06,.05,.04,.025,.04,.05,.1,.15,.225,.325,.425,.575,.7,.85,.95,1,.9,.675,.375,.2,.275,.4,.5,.55,.6,.625,.65,.65,.65,.65,.64,.6,.55,.5,.4,.325,.25,.15,.05,-.05,-.15,-.275,-.35,-.45,-.55,-.65,-.7,-.78,-.825,-.9,-.925,-.95,-.975])},{name:"modbox acoustic bass",expression:.5,samples:f([1,0,.1,-.1,-.2,-.4,-.3,-1])},{name:"modbox lyre",expression:.45,samples:f([1,-1,4,2.15,4.13,5.15,0,-.05,1])},{name:"modbox ramp pulse",expression:.5,samples:f([6.1,-2.9,1.4,-2.9])},{name:"modbox piccolo",expression:.5,samples:f([1,4,2,1,-.1,-1,-.12])},{name:"modbox squaretooth",expression:.5,samples:f([.2,1,2.6,1,0,-2.4])},{name:"modbox flatline",expression:1,samples:f([1,.9,.8,.7,.6,.5,.4,.3,.2,.1,0,.1,.2,.3,.4,.5,.6,.7,.8,.9])},{name:"modbox pnryshk a (u5)",expression:.4,samples:f([1,.9,.8,.7,.6,.5,.4,.3,.2,.1,0])},{name:"modbox pnryshk b (riff)",expression:.5,samples:f([1,-.9,.8,-.7,.6,-.5,.4,-.3,.2,-.1,0,-.1,.2,-.3,.4,-.5,.6,-.7,.8,-.9,1])},{name:"sandbox shrill lute",expression:.94,samples:f([1,1.5,1.25,1.2,1.3,1.5])},{name:"sandbox bassoon",expression:.5,samples:f([1,-1,1,1,1,1,1,1,1,1,1,1,0])},{name:"sandbox shrill bass",expression:.5,samples:f([0,1,0,0,1,0,1,0,0,0])},{name:"sandbox nes pulse",expression:.4,samples:f([2.1,-2.2,1.2,3])},{name:"sandbox saw bass",expression:.25,samples:f([1,1,1,1,0,2,1,2,3,1,-2,1,4,1,4,2,1,6,-3,4,2,1,5,1,4,1,5,6,7,1,6,1,4,1,9])},{name:"sandbox euphonium",expression:.3,samples:f([0,1,2,1,2,1,4,2,5,0,-2,1,5,1,2,1,2,4,5,1,5,-2,5,10,1])},{name:"sandbox shrill pulse",expression:.3,samples:f([2,0,4,1,4,6,7,3])},{name:"sandbox r-sawtooth",expression:.2,samples:f([6.1,-2.9,1.4,-2.9])},{name:"sandbox recorder",expression:.2,samples:f([5,-5.1,4,-4.1,3,-3.1,2,-2.1,1,-1.1,6])},{name:"sandbox narrow saw",expression:1.2,samples:f([.1,-1.3,.13/-.3,-.26,.13/-.7,.13/-.9,.13/-.11,.13/-.31,.13/-.51,.13/-.71,.13/-.91,.13/-.12,-.40625,-.25,.13/-.72,.13/-.92,-1,1,.13/.92,.13/.72,.25,.40625,.13/.12,.13/.91,.13/.71,.13/.51,.13/.31,.13/.11,.13/.9,.13/.7,.26,.13/.3,.13])},{name:"sandbox deep square",expression:1,samples:f([1,2.25,1,-1,-2.25,-1])},{name:"sandbox ring pulse",expression:1,samples:f([1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1])},{name:"sandbox double sine",expression:1,samples:f([1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,1.8,1.7,1.6,1.5,1.4,1.3,1.2,1.1,1,0,-1,-1.1,-1.2,-1.3,-1.4,-1.5,-1.6,-1.7,-1.8,-1.9,-1.8,-1.7,-1.6,-1.5,-1.4,-1.3,-1.2,-1.1,-1])},{name:"sandbox contrabass",expression:.5,samples:f([4.2,6.9,1.337,6.66])},{name:"sandbox double bass",expression:.4,samples:f([0,.1875,.3125,.5625,.5,.75,.875,1,-1,-.6875,-.5,-.625,-.625,-.5,-.375,-.5625,-.4375,-.5625,-.4375,-.4375,-.3125,-.1875,.1875,.375,.5625,-.5625,.5625,.5625,.5625,.4375,.25,0])},{name:"haileybox test1",expression:.5,samples:f([1,.5,-1])},{name:"brucebox pokey 4bit lfsr",expression:.5,samples:f([1,-1,-1,-1,1,1,1,1,-1,1,-1,1,1,-1,-1])},{name:"brucebox pokey 5step bass",expression:.5,samples:f([1,-1,1,-1,1])},{name:"brucebox isolated spiky",expression:.5,samples:f([1,-1,1,-1,1,-1])},{name:"nerdbox unnamed 1",expression:.5,samples:f([.2,4,.7,-.4,-1,.5,-.5/.6])},{name:"nerdbox unnamed 2",expression:.5,samples:f([2,5/55,-9,1,-55,18.5/-26])},{name:"zefbox semi-square",expression:1,samples:f([1,1.5,2,2.5,2.5,2.5,2,1.5,1])},{name:"zefbox deep square",expression:1,samples:f([1,2.25,1,-1,-2.25,-1])},{name:"zefbox squaretal",expression:.7,samples:f([1.5,1,1.5,-1.5,-1,-1.5])},{name:"zefbox saw wide",expression:.65,samples:f([0,-.4,-.8,-1.2,-1.6,-2,0,-.4,-.8,-1.2,-1.6])},{name:"zefbox saw narrow",expression:.65,samples:f([1,.5,1,.5,1,.5,1,2,1,2,1])},{name:"zefbox deep sawtooth",expression:.5,samples:f([0,2,3,4,4.5,5,5.5,6,6.25,6.5,6.75,7,6.75,6.5,6.25,6,5.5,5,4.5,4,3,2,1])},{name:"zefbox sawtal",expression:.3,samples:f([1.5,1,1.25,-.5,1.5,-.5,0,-1.5,1.5,0,.5,-1.5,.5,1.25,-1,-1.5])},{name:"zefbox deep sawtal",expression:.7,samples:f([.75,.25,.5,-.5,.5,-.5,-.25,-.75])},{name:"zefbox pulse",expression:.5,samples:f([1,-2,-2,-1.5,-1.5,-1.25,-1.25,-1,-1])},{name:"zefbox triple pulse",expression:.4,samples:f([1,1,1,1,1,-1,-1,1.5,1,1,1,1,-1,-1,-1,1.5])},{name:"zefbox high pulse",expression:.2,samples:f([1,-2,2,-3,3,-4,5,-4,3,-3,2,-2,1])},{name:"zefbox deep pulse",expression:.2,samples:f([1,2,2,-2,-2,-3,-4,-4,-5,-5,-5,-5,0,-1,-2])},{name:"wackybox guitar string",expression:.6,samples:f([0,63,63,63,63,19,63,63,63,63,63,63,63,63,63,63,11,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,27,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,34,63,63,63,63])},{name:"wackybox intense",expression:.6,samples:f([36,25,33,35,18,51,22,40,27,37,31,33,25,29,41,23,31,31,45,20,37,23,29,26,42,29,33,26,31,27,40,25,40,26,37,24,41,32,0,32,33,29,32,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31])},{name:"wackybox buzz wave",expression:.6,samples:f([0,1,1,2,4,4,4,4,5,5,6,6,6,7,8,8,8,9,9,9,9,9,9,8,8,8,11,15,23,62,61,60,58,56,56,54,53,52,50,49,48,47,47,45,45,45,44,44,43,43,42,42,42,42,42,42,42,42,42,42,42,43,43,53])},{name:"todbox 1/3 pulse",expression:.5,samples:c([1,-1,-1])},{name:"todbox 1/5 pulse",expression:.5,samples:c([1,-1,-1,-1,-1])},{name:"todbox slap bass",expression:.5,samples:f([1,.5,0,.5,1.25,.5,-.25,.1,-.1,.1,1.1,2.1,3,3.5,2.9,3.3,2.7,2.9,2.3,2,1.9,1.8,1,.7,.9,.8,.4,.1,0,.2,.4,.6,.5,.8])},{name:"todbox harsh wave",expression:.45,samples:f([1,-1,-1,-1,.5,.5,.5,.7,.39,1.3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1])},{name:"todbox accordian",expression:.5,samples:f([0,1,1,2,2,1.5,1.5,.8,0,-2,-3.25,-4,-4.5,-5.5,-6,-5.75,-5.5,-5,-5,-5,-6,-6,-6,-5,-4,-3,-2,-1,.75,1,2,3,4,5,6,6.5,7.5,8,7.75,6,5.25,5,5,5,5,5,4.25,3.75,3.25,2.75,1.25,-.75,-2,-.75,1.25,1.25,2,2,2,2,1.5,-1,-2,-1,1.5,2,2.75,2.75,2.75,3,2.75,-1,-2,-2.5,-2,-1,-2.25,-2.75,-2,-3,-1.75,1,2,3.5,4,5.25,6,8,9.75,10,9.5,9,8.5,7.5,6.5,5.25,5,4.5,4,4,4,3.25,2.5,2,1,-.5,-2,-3.5,-4,-4,-4,-3.75,-3,-2,-1])},{name:"todbox beta banana wave",expression:.8,samples:f([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0])},{name:"todbox beta test wave",expression:.5,samples:f([56,0,-52,16,3,3,2,-35,20,147,-53,0,0,5,-6])},{name:"todbox beta real snare",expression:1,samples:f([0,-.01208,-.02997,-.04382,-.06042,-.07529,-.09116,-.10654,-.12189,-.13751,-.15289,-.16849,-.18387,-.19974,-.21484,-.23071,-.24557,-.26144,-.27731,-.29141,-.3035,-.32416,-.34406,-.32947,-.31158,-.33725,-.37579,-.39746,-.40201,-.40906,-.4418,-.47229,-.47379,-.47733,-.45239,-.33954,-.22894,-.22443,-.32138,-.46371,-.57178,-.61081,-.59998,-.61459,-.62189,-.43979,-.19217,-.12643,-.17252,-.20956,-.20981,-.19217,-.22845,-.34332,-.50629,-.64307,-.72922,-.81384,-.87857,-.90149,-.88687,-.86169,-.87781,-.80478,-.52493,-.31308,-.33249,-.39395,-.39017,-.30301,-.19949,-.13071,-.02493,.14307,.34961,.52542,.63223,.68613,.7471,.87305,.98184,.98889,.97052,.99066,.99747,.99344,.99469,.99393,.9957,.99393,.99521,.99469,.9942,.99521,.9942,.99521,.99469,.99469,.99521,.9942,.99545,.99445,.99469,.99493,.9942,.99521,.99393,.99493,.99469,.99445,.9957,.99445,.99521,.99469,.99469,.99521,.9942,.99545,.99445,.99445,.99493,.9942,.99545,.9942,.99493,.99493,.9942,.99545,.99445,.99521,.99469,.99445,.99545,.99368,.99393,.99445,.99268,.97983,.97229,.95944,.88486,.76773,.64481,.53098,.39847,.19318,-.03827,-.20325,-.39319,-.68765,-.88461,-.93448,-.96069,-.97681,-.98715,-.99042,-.99142,-.99091,-.99142,-.99219,-.99091,-.99219,-.99066,-.99142,-.99142,-.99118,-.99191,-.99066,-.99191,-.99142,-.99142,-.99191,-.99091,-.99219,-.99118,-.99142,-.99167,-.99091,-.99219,-.99091,-.99167,-.99142,-.99091,-.99191,-.99091,-.99191,-.99142,-.99118,-.99191,-.99066,-.99191,-.99118,-.99142,-.99191,-.99066,-.99191,-.99091,-.99167,-.99191,-.99118,-.99219,-.99091,-.99191,-.99142,-.99142,-.99243,-.98865,-.98764,-.99219,-.98083,-.92517,-.9277,-.91486,-.59042,-.15189,.02945,.05667,.06195,.00629,-.18008,-.56497,-.8801,-.9277,-.92871,-.97705,-.99167,-.98663,-.99118,-.99042,-.99219,-.99142,-.99118,-.98941,-.99219,-1,-.9758,-.95993,-.99948,-.98236,-.84659,-.7486,-.70679,-.59747,-.48035,-.41687,-.36826,-.29745,-.18185,-.06219,.02164,.07907,.13123,.18033,.1962,.15692,.14053,.20251,.2753,.30905,.29092,.27252,.30402,.32416,.32214,.35239,.3967,.43198,.4942,.58487,.64154,.65967,.6705,.67026,.66522,.6554,.66119,.70627,.75842,.78738,.7894,.78763,.80402,.85944,.94559,.9899,.9816,.98007,.99368,.99393,.98538,.9758,.97101,.93802,.81812,.64633,.46649,.28613,.14685,.08966,.12543,.20325,.24557,.18866,.02795,-.20175,-.44205,-.58713,-.57629,-.41385,-.14255,.18033,.47882,.68311,.72314,.62064,.48309,.43073,.53577,.72794,.9025,.97354,.97,.98083,.99191,.99319,.99493,.99393,.99521,.99393,.99545,.9942,.99493,.99493,.99445,.99545,.9942,.99545,.99243,.98917,.98386,.97781,.95844,.89066,.81561,.78134,.77277,.75995,.73022,.67126,.57178,.47,.38361,.29419,.20703,.14734,.15866,.25162,.35818,.45062,.5675,.69748,.81232,.89697,.95062,.97656,.98615,.99191,.99219,.99243,.99368,.99368,.97028,.95566,.94559,.82617,.59973,.38361,.23901,.15338,.12921,.11206,.04382,-.12946,-.43552,-.72644,-.89847,-.95465,-.95541,-.97229,-.99268,-.99319,-.9884,-.99142,-.99167,-.99091,-.9884,-.98965,-.99368,-.97455,-.9501,-.94684,-.96219,-.98514,-.99243,-.98889,-.98917,-.99142,-.99219,-.99091,-.99191,-.99142,-.99142,-.99191,-.99066,-.99167,-.99091,-.99142,-.99191,-.99091,-.99191,-.99091,-.99167,-.99167,-.99091,-.99219,-.99091,-.99191,-.99142,-.99118,-.99191,-.99066,-.99191,-.99091,-.99118,-.99243,-.98941,-.98462,-.96976,-.9632,-.96194,-.87305,-.66196,-.44809,-.29495,-.18085,-.11813,-.11334,-.18564,-.34885,-.58237,-.8045,-.93726,-.97806,-.97354,-.97531,-.9899,-.99368,-.98941,-.99219,-.99091,-.99142,-.99167,-.99091,-.99191,-.99118,-.99219,-.98236,-.97781,-.97656,-.95135,-.87204,-.71335,-.52139,-.34232,-.17783,-.00906,.14886,.3045,.48889,.67404,.8403,.94128,.97681,.98462,.98337,.99142,.99521,.99493,.9942,.99445,.99521,.99393,.99545,.99445,.99521,.99521,.99445,.9957,.99445,.99521,.99469,.99445,.99521,.9942,.99521,.99445,.99445,.99521,.99445,.99545,.99445,.99469,.99493,.99393,.99493,.99445,.99393,.98285,.97781,.97479,.92844,.82114,.66095,.52417,.46826,.46722,.47934,.47379,.47076,.48209,.42014,.25439,.10074,-.00302,-.08966,-.16068,-.21436,-.2204,-.15137,-.00476,.18536,.37631,.52292,.62164,.70425,.74835,.72366,.63928,.52567,.40805,.35666,.42896,.60175,.802,.92743,.96548,.97632,.98337,.99066,.99521,.9942,.99368,.99292,.9884,.98083,.96774,.93323,.8544,.6947,.47202,.20425,-.0889,-.36423,-.60025,-.77481,-.90173,-.96017,-.97028,-.98108,-.9884,-.99219,-.9899,-.99219,-.99142,-.99142,-.99219,-.99091,-.99243,-.99066,-.99142,-.99142,-.99118,-.99191,-.99066,-.99167,-.99142,-.99142,-.99219,-.99091,-.99191,-.99118,-.99142,-.99191,-.99091,-.99191,-.99091,-.99167,-.99191,-.99118,-.99219,-.99091,-.99167,-.99142,-.99142,-.99219,-.99091,-.99191,-.99142,-.99118,-.98917,-.99042,-.99445,-.9733,-.9559,-.96219,-.8967,-.72241,-.55112,-.44809,-.39319,-.37833,-.35641,-.2627,-.1423,-.11282,-.13525,-.11536,-.09671,-.11511,-.1806,-.26874,-.33374,-.42215,-.51358,-.44785,-.3045,-.28613,-.30527,-.25037,-.1539,-.08286,-.11157,-.12592,-.00327,.13803,.19141,.1282,.01788,-.03952,-.12592,-.26773,-.34634,-.31384,-.1806,-.0108,.13574,.2612,.36975,.46573,.55087,.63626,.73022,.83072,.92014,.97177,.98587,.98413,.99167,.99445,.99292,.99219,.9874,.98007,.96472,.92239,.82166,.69067,.57959,.54962,.59695,.64255,.64633,.60629,.55942,.5491,.58966,.61887,.56952,.54181,.59518,.63248,.63876,.65463,.73398,.88312,.96927,.97101,.97958,.99344,.9942,.99268,.99493,.99469,.99445,.99521,.99445,.99545,.9942,.99493,.99493,.9942,.99545,.9942,.99493,.9942,.99393,.9942,.9884,.98309,.98309,.96069,.88461,.7937,.72064,.65765,.59998,.53247,.49268,.48615,.44205,.38034,.36447,.38715,.39294,.32645,.19595,.07782,-.05893,-.27832,-.48309,-.62619,-.72995,-.79999,-.84583,-.82166,-.73575,-.67227,-.65491,-.6496,-.66397,-.70175,-.72894,-.74658,-.76724,-.7952,-.82846,-.86523,-.90527,-.94382,-.89948,-.69849,-.47479,-.31662,-.15414,-.00729,.07077,.08237,.04431,-.02292,-.11761,-.24307,-.36926,-.45087,-.4617,-.4025,-.30679,-.17529,0,.14331,.24179,.36774,.49545,.56522,.57907,.56775,.53851,.51132,.48688,.41913,.26044,.00955,-.26297,-.46396,-.62341,-.82214,-.94684,-.96774,-.97531,-.98413,-.99017,-.9899,-.99219,-.99066,-.99142,-.99167,-.99118,-.99219,-.9899,-.99118,-.99368,-.99142,-.97757,-.97403,-.98007,-.9617,-.86826,-.67783,-.52719,-.48788,-.4549,-.43146,-.47681,-.54105,-.57983,-.60904,-.62317,-.59949,-.55566,-.52063,-.52115,-.55112,-.56244,-.58337,-.6554,-.73373,-.77228,-.74759,-.6889,-.64609,-.61887,-.5806,-.50351,-.40729,-.33929,-.3511,-.42944,-.47028,-.42267,-.32718,-.20224,-.0564,.04556,.10529,.1763,.26169,.33197,.32138,.23776,.20956,.23148,.20352,.23325,.39267,.52719,.58438,.62289,.66345,.70023,.66296,.5433,.42618,.33475,.24533,.14105,.03851,.01358,.09143,.22845,.34961,.41711,.4874,.58914,.69519,.78186,.84357,.89822,.95389,.98135,.98615,.99167,.99243,.99445,.9942,.99469,.99493,.99393,.99545,.99445,.99521,.99469,.99445,.99521,.9942,.99469,.98965,.98715,.98563,.96295,.91736,.86624,.82367,.77554,.68411,.53549,.38916,.2612,.11435,-.04053,-.18161,-.23172,-.19394,-.15237,-.1073,-.02997,.08588,.2262,.34305,.44104,.5574,.65765,.71259,.69217,.65363,.69748,.79572,.89368,.95514,.97733,.98413,.98816,.99243,.99445,.99243,.97302,.96674,.97983,.90378,.71005,.51056,.40451,.40982,.41559,.32996,.24356,.18866,.11411,.05365,.01157,-.03247,-.09216,-.16095,-.23248,-.31662,-.39771,-.48663,-.59647,-.71536,-.82013,-.85287,-.82947,-.84937,-.92215,-.97177,-.98663,-.98816,-.98438,-.99091,-.99219,-.99091,-.99191,-.99042,-.99191,-.99091,-.99142,-.99191,-.99091,-.99191,-.99091,-.99167,-.99142])},{name:"ultrabox shortened od guitar",expression:.5,samples:f([-.82785,-.67621,-.40268,-.43817,-.45468,-.22531,-.18329,.2475,.71246,.52155,.56082,.48395,.3399,.46957,.27744,.42313,.47104,.18796,.1293,-.13901,-.07431,-.16348,-.74857,-.73206,-.35181,-.26227,-.41882,-.27786,-.19806,-.19867,.18643,.24808,.08847,-.06964,.06912,.20474,-.05304,.29416,.31967,.14243,.27521,-.23932,-.14752,.1236,-.26123,-.26111,.06616,.2652,.0809,.1524,.16254,-.12061,.04562,.00131,.0405,.08182,-.21729,-.17041,-.16312,-.08563,.0639,.05099,.05627,.02728,.00726,-.13028,-.05673,-.14969,-.17645,.35492,.16766,-.00897,.24326,-.00461,-.04456,.01776,-.0495,-.01221,.02039,.07684,.13397,.3985,.35962,.13754,.4231,.27161,-.17609,.03659,.10635,-.21909,-.22046,-.20258,-.40973,-.4028,-.40521,-.66284])}]),u.chipWaves=function(e){const t=new Array(e.length),n={};for(let i=0;i<t.length;i++){t[i]=Object.assign([],e[i]);const s=t[i];s.index=i,n[s.name]=s}for(let e in n)n[e].samples=d(n[e].samples);const i=t;return i.dictionary=n,i}(t.rawChipWaves),u.rawRawChipWaves=t.rawChipWaves,u.firstIndexForSamplesInChipWaveList=t.chipWaves.length,u.chipNoises=w([{name:"retro",expression:.25,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"white",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null},{name:"clang",expression:.4,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"buzz",expression:.3,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"hollow",expression:1.5,basePitch:96,pitchFilterMult:1,isSoft:!0,samples:null},{name:"shine",expression:1,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"deep",expression:1.5,basePitch:120,pitchFilterMult:1024,isSoft:!0,samples:null},{name:"cutter",expression:.005,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"metallic",expression:1,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"static",expression:1,basePitch:96,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"1-bit white",expression:.5,basePitch:74.41,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"1-bit metallic",expression:.5,basePitch:86.41,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"crackling",expression:.9,basePitch:69,pitchFilterMult:1024,isSoft:!1,samples:null},{name:"pink",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null},{name:"brownian",expression:1,basePitch:69,pitchFilterMult:8,isSoft:!0,samples:null}]),u.filterFreqStep=1/4,u.filterFreqRange=34,u.filterFreqReferenceSetting=28,u.filterFreqReferenceHz=8e3,u.filterFreqMaxHz=t.filterFreqReferenceHz*Math.pow(2,t.filterFreqStep*(t.filterFreqRange-1-t.filterFreqReferenceSetting)),u.filterFreqMinHz=8,u.filterGainRange=15,u.filterGainCenter=7,u.filterGainStep=.5,u.filterMaxPoints=8,u.filterTypeNames=["low-pass","high-pass","peak"],u.filterMorphCount=10,u.filterSimpleCutRange=11,u.filterSimplePeakRange=8,u.fadeInRange=10,u.fadeOutTicks=[-24,-12,-6,-3,-1,6,12,24,48,72,96],u.fadeOutNeutral=4,u.drumsetFadeOutTicks=48,u.transitions=w([{name:"normal",isSeamless:!1,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!1},{name:"interrupt",isSeamless:!0,continues:!1,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"continue",isSeamless:!0,continues:!0,slides:!1,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!0},{name:"slide in pattern",isSeamless:!0,continues:!1,slides:!0,slideTicks:3,includeAdjacentPatterns:!1}]),u.vibratos=w([{name:"none",amplitude:0,type:0,delayTicks:0},{name:"light",amplitude:.15,type:0,delayTicks:0},{name:"delayed",amplitude:.3,type:0,delayTicks:37},{name:"heavy",amplitude:.45,type:0,delayTicks:0},{name:"shaky",amplitude:.1,type:1,delayTicks:0}]),u.vibratoTypes=w([{name:"normal",periodsSeconds:[.14],period:.14},{name:"shaky",periodsSeconds:[.11,.17798,.33],period:266.97}]),u.arpSpeedScale=[0,.0625,.125,.2,.25,1/3,.4,.5,2/3,.75,.8,.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4,4.15,4.3,4.5,4.8,5,5.5,6,8],u.unisons=w([{name:"none",voices:1,spread:0,offset:0,expression:1.4,sign:1},{name:"shimmer",voices:2,spread:.018,offset:0,expression:.8,sign:1},{name:"hum",voices:2,spread:.045,offset:0,expression:1,sign:1},{name:"honky tonk",voices:2,spread:.09,offset:0,expression:1,sign:1},{name:"dissonant",voices:2,spread:.25,offset:0,expression:.9,sign:1},{name:"fifth",voices:2,spread:3.5,offset:3.5,expression:.9,sign:1},{name:"octave",voices:2,spread:6,offset:6,expression:.8,sign:1},{name:"bowed",voices:2,spread:.02,offset:0,expression:1,sign:-1},{name:"piano",voices:2,spread:.01,offset:0,expression:1,sign:.7},{name:"warbled",voices:2,spread:.25,offset:.05,expression:.9,sign:-.8},{name:"hecking gosh",voices:2,spread:6.25,offset:-6,expression:.8,sign:-.7},{name:"spinner",voices:2,spread:.02,offset:0,expression:1,sign:1},{name:"detune",voices:1,spread:0,offset:.25,expression:1,sign:1},{name:"rising",voices:2,spread:1,offset:.7,expression:.95,sign:1},{name:"vibrate",voices:2,spread:3.5,offset:7,expression:.975,sign:1},{name:"fourths",voices:2,spread:4,offset:4,expression:.95,sign:1},{name:"bass",voices:1,spread:0,offset:-7,expression:1,sign:1},{name:"dirty",voices:2,spread:0,offset:.1,expression:.975,sign:1},{name:"stationary",voices:2,spread:3.5,offset:0,expression:.9,sign:1},{name:"recurve",voices:2,spread:.005,offset:0,expression:1,sign:1},{name:"voiced",voices:2,spread:9.5,offset:0,expression:1,sign:1},{name:"fluctuate",voices:2,spread:12,offset:0,expression:1,sign:1},{name:"thin",voices:1,spread:0,offset:50,expression:1,sign:1},{name:"inject",voices:2,spread:6,offset:.4,expression:1,sign:1},{name:"askewed",voices:2,spread:0,offset:.42,expression:.7,sign:1},{name:"resonance",voices:2,spread:.0025,offset:.1,expression:.8,sign:-1.5},{name:"FART",voices:2,spread:13,offset:-5,expression:1,sign:-3},{name:"augmented",voices:4,spread:6,offset:6,expression:.5,sign:1},{name:"diminished",voices:5,spread:6,offset:6,expression:.4,sign:1},{name:"chorus",voices:9,spread:.22,offset:0,expression:.15,sign:1},{name:"block",voices:9,spread:6,offset:6,expression:.15,sign:.8},{name:"extraterrestrial",voices:6,spread:15.2,offset:-6,expression:.35,sign:.7},{name:"bow",voices:9,spread:.006,offset:0,expression:.15,sign:.5}]),u.effectNames=["reverb","chorus","panning","distortion","bitcrusher","note filter","echo","pitch shift","detune","vibrato","transition type","chord type","","ring mod","granular"],u.effectOrder=[2,10,11,7,8,9,5,14,3,4,1,6,0,13],u.noteSizeMax=6,u.volumeRange=50,u.volumeLogScale=.1428,u.panCenter=50,u.panMax=2*t.panCenter,u.panDelaySecondsMax=.001,u.ringModRange=8,u.ringModHzRange=64,u.ringModMinHz=20,u.ringModMaxHz=4400,u.rmHzOffsetCenter=200,u.rmHzOffsetMax=400,u.rmHzOffsetMin=0,u.granularRange=10,u.grainSizeMin=40,u.grainSizeMax=2e3,u.grainSizeStep=40,u.grainRangeMax=1600,u.grainAmountsMax=10,u.granularEnvelopeType=0,u.chorusRange=8,u.chorusPeriodSeconds=2,u.chorusDelayRange=.0034,u.chorusDelayOffsets=[[1.51,2.1,3.35],[1.47,2.15,3.25]],u.chorusPhaseOffsets=[[0,2.1,4.2],[3.2,5.3,1]],u.chorusMaxDelay=t.chorusDelayRange*(1+t.chorusDelayOffsets[0].concat(t.chorusDelayOffsets[1]).reduce(((e,t)=>Math.max(e,t)))),u.chords=w([{name:"simultaneous",customInterval:!1,arpeggiates:!1,strumParts:0,singleTone:!1},{name:"strum",customInterval:!1,arpeggiates:!1,strumParts:1,singleTone:!1},{name:"arpeggio",customInterval:!1,arpeggiates:!0,strumParts:0,singleTone:!0},{name:"custom interval",customInterval:!0,arpeggiates:!1,strumParts:0,singleTone:!0},{name:"monophonic",customInterval:!1,arpeggiates:!1,strumParts:0,singleTone:!0}]),u.maxChordSize=9,u.operatorCount=4,u.maxPitchOrOperatorCount=Math.max(t.maxChordSize,t.operatorCount+2),u.algorithms=w([{name:"1←(2 3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3,4],[],[],[]]},{name:"1←(2 3←4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[],[4],[]]},{name:"1←2←(3 4)",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3,4],[],[]]},{name:"1←(2 3)←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2,3],[4],[4],[]]},{name:"1←2←3←4",carrierCount:1,associatedCarrier:[1,1,1,1],modulatedBy:[[2],[3],[4],[]]},{name:"1←3 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[3],[4],[],[]]},{name:"1 2←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3,4],[],[]]},{name:"1 2←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[],[3],[4],[]]},{name:"(1 2)←3←4",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3],[3],[4],[]]},{name:"(1 2)←(3 4)",carrierCount:2,associatedCarrier:[1,2,2,2],modulatedBy:[[3,4],[3,4],[],[]]},{name:"1 2 3←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[],[],[4],[]]},{name:"(1 2 3)←4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[4],[4],[4],[]]},{name:"1 2 3 4",carrierCount:4,associatedCarrier:[1,2,3,4],modulatedBy:[[],[],[],[]]},{name:"1←(2 3) 2←4",carrierCount:2,associatedCarrier:[1,2,1,2],modulatedBy:[[2,3],[4],[],[]]},{name:"1←(2 (3 (4",carrierCount:3,associatedCarrier:[1,2,3,3],modulatedBy:[[2,3,4],[3,4],[4],[]]}]),u.algorithms6Op=w([{name:"Custom",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4,5,6],[],[],[],[],[]]},{name:"1←2←3←4←5←6",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2],[3],[4],[5],[6],[]]},{name:"1←3 2←4←5←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4],[],[5],[6],[]]},{name:"1←3←4 2←5←6",carrierCount:2,associatedCarrier:[1,1,1,2,2,2],modulatedBy:[[3],[5],[4],[],[6],[]]},{name:"1←4 2←5 3←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4],[5],[6],[],[],[]]},{name:"1←3 2←(4 5←6)",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4,5],[],[],[6],[]]},{name:"1←(3 4) 2←5←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3,4],[5],[],[],[6],[]]},{name:"1←3 2←(4 5 6)",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4,5,6],[],[],[],[]]},{name:"1←3 2←(4 5)←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4,5],[],[6],[6],[]]},{name:"1←3 2←4←(5 6)",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3],[4],[],[5,6],[],[]]},{name:"1←(2 3 4 5 6)",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4,5,6],[],[],[],[],[]]},{name:"1←(2 3←5 4←6)",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4],[],[5],[6],[],[]]},{name:"1←(2 3 4←5←6)",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4],[],[],[5],[6],[]]},{name:"1←4←5 (2 3)←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4],[6],[6],[5],[],[]]},{name:"1←(3 4)←5 2←6",carrierCount:2,associatedCarrier:[1,2,2,2,2,2],modulatedBy:[[3,4],[6],[5],[5],[],[]]},{name:"(1 2)←4 3←(5 6)",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4],[4],[5,6],[],[],[]]},{name:"(1 2)←5 (3 4)←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[5],[5],[6],[6],[],[]]},{name:"(1 2 3)←(4 5 6)",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[4,5,6],[4,5,6],[4,5,6],[],[],[]]},{name:"1←5 (2 3 4)←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[5],[6],[6],[6],[],[]]},{name:"1 2←5 (3 4)←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[5],[6],[6],[],[]]},{name:"1 2 (3 4 5)←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[],[],[6],[6],[6],[]]},{name:"1 2 3 (4 5)←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[],[],[],[6],[6],[]]},{name:"1 2←4 3←(5 6)",carrierCount:3,associatedCarrier:[1,2,3,3,3,3],modulatedBy:[[],[4],[5,6],[],[],[]]},{name:"1←4 2←(5 6) 3",carrierCount:3,associatedCarrier:[1,2,3,3,3,3],modulatedBy:[[4],[5,6],[],[],[],[]]},{name:"1 2 3←5 4←6",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[],[5],[6],[],[]]},{name:"1 (2 3)←5←6 4",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[5],[5],[],[6],[]]},{name:"1 2 3←5←6 4",carrierCount:4,associatedCarrier:[1,2,3,4,4,4],modulatedBy:[[],[],[5,6],[],[],[]]},{name:"(1 2 3 4 5)←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[6],[6],[6],[6],[6],[]]},{name:"1 2 3 4 5←6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[],[],[],[],[6],[]]},{name:"1 2 3 4 5 6",carrierCount:6,associatedCarrier:[1,2,3,4,5,6],modulatedBy:[[],[],[],[],[],[]]},{name:"1←(2 (3 (4 (5 (6",carrierCount:5,associatedCarrier:[1,2,3,4,5,5],modulatedBy:[[2,3,4,5,6],[3,4,5,6],[4,5,6],[5,6],[6],[]]},{name:"1←(2(3(4(5(6",carrierCount:1,associatedCarrier:[1,1,1,1,1,1],modulatedBy:[[2,3,4,5,6],[3,4,5,6],[4,5,6],[5,6],[6],[]]},{name:"1←4(2←5(3←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[2,3,4],[3,5],[6],[],[],[]]},{name:"1←4(2←5 3←6",carrierCount:3,associatedCarrier:[1,2,3,1,2,3],modulatedBy:[[2,3,4],[5],[6],[],[],[]]}]),u.operatorCarrierInterval=[0,.04,-.073,.091,.061,.024],u.operatorAmplitudeMax=15,u.operatorFrequencies=w([{name:"0.12×",mult:.125,hzOffset:0,amplitudeSign:1},{name:"0.25×",mult:.25,hzOffset:0,amplitudeSign:1},{name:"0.5×",mult:.5,hzOffset:0,amplitudeSign:1},{name:"0.75×",mult:.75,hzOffset:0,amplitudeSign:1},{name:"1×",mult:1,hzOffset:0,amplitudeSign:1},{name:"~1×",mult:1,hzOffset:1.5,amplitudeSign:-1},{name:"2×",mult:2,hzOffset:0,amplitudeSign:1},{name:"~2×",mult:2,hzOffset:-1.3,amplitudeSign:-1},{name:"3×",mult:3,hzOffset:0,amplitudeSign:1},{name:"3.5×",mult:3.5,hzOffset:-.05,amplitudeSign:1},{name:"4×",mult:4,hzOffset:0,amplitudeSign:1},{name:"~4×",mult:4,hzOffset:-2.4,amplitudeSign:-1},{name:"5×",mult:5,hzOffset:0,amplitudeSign:1},{name:"6×",mult:6,hzOffset:0,amplitudeSign:1},{name:"7×",mult:7,hzOffset:0,amplitudeSign:1},{name:"8×",mult:8,hzOffset:0,amplitudeSign:1},{name:"9×",mult:9,hzOffset:0,amplitudeSign:1},{name:"10×",mult:10,hzOffset:0,amplitudeSign:1},{name:"11×",mult:11,hzOffset:0,amplitudeSign:1},{name:"12×",mult:12,hzOffset:0,amplitudeSign:1},{name:"13×",mult:13,hzOffset:0,amplitudeSign:1},{name:"14×",mult:14,hzOffset:0,amplitudeSign:1},{name:"15×",mult:15,hzOffset:0,amplitudeSign:1},{name:"16×",mult:16,hzOffset:0,amplitudeSign:1},{name:"17×",mult:17,hzOffset:0,amplitudeSign:1},{name:"18×",mult:18,hzOffset:0,amplitudeSign:1},{name:"19×",mult:19,hzOffset:0,amplitudeSign:1},{name:"20×",mult:20,hzOffset:0,amplitudeSign:1},{name:"~20×",mult:20,hzOffset:-5,amplitudeSign:-1},{name:"25×",mult:25,hzOffset:0,amplitudeSign:1},{name:"50×",mult:50,hzOffset:0,amplitudeSign:1},{name:"75×",mult:75,hzOffset:0,amplitudeSign:1},{name:"100×",mult:100,hzOffset:0,amplitudeSign:1},{name:"128×",mult:128,hzOffset:0,amplitudeSign:1},{name:"256×",mult:250,hzOffset:0,amplitudeSign:1}]),u.envelopes=w([{name:"none",type:0,speed:0},{name:"note size",type:1,speed:0},{name:"pitch",type:2,speed:0},{name:"punch",type:4,speed:0},{name:"flare -1",type:5,speed:128},{name:"flare 1",type:5,speed:32},{name:"flare 2",type:5,speed:8},{name:"flare 3",type:5,speed:2},{name:"twang -1",type:6,speed:128},{name:"twang 1",type:6,speed:32},{name:"twang 2",type:6,speed:8},{name:"twang 3",type:6,speed:2},{name:"swell -1",type:7,speed:128},{name:"swell 1",type:7,speed:32},{name:"swell 2",type:7,speed:8},{name:"swell 3",type:7,speed:2},{name:"tremolo0",type:8,speed:8},{name:"tremolo1",type:8,speed:4},{name:"tremolo2",type:8,speed:2},{name:"tremolo3",type:8,speed:1},{name:"tremolo4",type:9,speed:4},{name:"tremolo5",type:9,speed:2},{name:"tremolo6",type:9,speed:1},{name:"decay -1",type:10,speed:40},{name:"decay 1",type:10,speed:10},{name:"decay 2",type:10,speed:7},{name:"decay 3",type:10,speed:4},{name:"wibble-1",type:11,speed:128},{name:"wibble 1",type:11,speed:24},{name:"wibble 2",type:11,speed:12},{name:"wibble 3",type:11,speed:4},{name:"linear-2",type:12,speed:256},{name:"linear-1",type:12,speed:128},{name:"linear 1",type:12,speed:32},{name:"linear 2",type:12,speed:8},{name:"linear 3",type:12,speed:2},{name:"rise -2",type:13,speed:256},{name:"rise -1",type:13,speed:128},{name:"rise 1",type:13,speed:32},{name:"rise 2",type:13,speed:8},{name:"rise 3",type:13,speed:2},{name:"flute 1",type:11,speed:16},{name:"flute 2",type:11,speed:8},{name:"flute 3",type:11,speed:4},{name:"tripolo1",type:8,speed:9},{name:"tripolo2",type:8,speed:6},{name:"tripolo3",type:8,speed:3},{name:"tripolo4",type:9,speed:9},{name:"tripolo5",type:9,speed:6},{name:"tripolo6",type:9,speed:3},{name:"pentolo1",type:8,speed:10},{name:"pentolo2",type:8,speed:5},{name:"pentolo3",type:8,speed:2.5},{name:"pentolo4",type:9,speed:10},{name:"pentolo5",type:9,speed:5},{name:"pentolo6",type:9,speed:2.5},{name:"flutter 1",type:8,speed:14},{name:"flutter 2",type:9,speed:11},{name:"water-y flutter",type:8,speed:9},{name:"blip 1",type:14,speed:6},{name:"blip 2",type:14,speed:16},{name:"blip 3",type:14,speed:32},{name:"fall 1",type:15,speed:8},{name:"fall 2",type:15,speed:4},{name:"fall 3",type:15,speed:2}]),u.newEnvelopes=w([{name:"none",type:0,speed:0},{name:"note size",type:1,speed:0},{name:"pitch",type:2,speed:0},{name:"random",type:3,speed:4},{name:"punch",type:4,speed:0},{name:"flare",type:5,speed:32},{name:"twang",type:6,speed:32},{name:"swell",type:7,speed:32},{name:"lfo",type:8,speed:4},{name:"decay",type:10,speed:10},{name:"wibble",type:11,speed:24},{name:"linear",type:12,speed:32},{name:"rise",type:13,speed:32},{name:"blip",type:14,speed:6},{name:"fall",type:15,speed:2}]),u.feedbacks=w([{name:"1⟲",indices:[[1],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[]]},{name:"3⟲",indices:[[],[],[3],[]]},{name:"4⟲",indices:[[],[],[],[4]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4]]},{name:"1→2",indices:[[],[1],[],[]]},{name:"1→3",indices:[[],[],[1],[]]},{name:"1→4",indices:[[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[]]},{name:"2→4",indices:[[],[],[],[2]]},{name:"3→4",indices:[[],[],[],[3]]},{name:"1→3 2→4",indices:[[],[],[1],[2]]},{name:"1→4 2→3",indices:[[],[],[2],[1]]},{name:"1→2→3→4",indices:[[],[1],[2],[3]]},{name:"1↔2 3↔4",indices:[[2],[1],[4],[3]]},{name:"1↔4 2↔3",indices:[[4],[3],[2],[1]]},{name:"2→1→4→3→2",indices:[[2],[3],[4],[1]]},{name:"1→2→3→4→1",indices:[[4],[1],[2],[3]]},{name:"(1 2 3)→4",indices:[[],[],[],[1,2,3]]},{name:"ALL",indices:[[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]}]),u.feedbacks6Op=w([{name:"Custom",indices:[[2,3,4,5,6],[],[],[],[],[]]},{name:"1⟲",indices:[[1],[],[],[],[],[]]},{name:"2⟲",indices:[[],[2],[],[],[],[]]},{name:"3⟲",indices:[[],[],[3],[],[],[]]},{name:"4⟲",indices:[[],[],[],[4],[],[]]},{name:"5⟲",indices:[[],[],[],[],[5],[]]},{name:"6⟲",indices:[[],[],[],[],[],[6]]},{name:"1⟲ 2⟲",indices:[[1],[2],[],[],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4],[],[]]},{name:"1⟲ 2⟲ 3⟲",indices:[[1],[2],[3],[],[],[]]},{name:"2⟲ 3⟲ 4⟲",indices:[[],[2],[3],[4],[],[]]},{name:"1⟲ 2⟲ 3⟲ 4⟲",indices:[[1],[2],[3],[4],[],[]]},{name:"1⟲ 2⟲ 3⟲ 4⟲ 5⟲",indices:[[1],[2],[3],[4],[5],[]]},{name:"1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲",indices:[[1],[2],[3],[4],[5],[6]]},{name:"1→2",indices:[[],[1],[],[],[],[]]},{name:"1→3",indices:[[],[],[1],[],[],[]]},{name:"1→4",indices:[[],[],[],[1],[],[]]},{name:"1→5",indices:[[],[],[],[],[1],[]]},{name:"1→6",indices:[[],[],[],[],[],[1]]},{name:"2→3",indices:[[],[],[2],[],[],[]]},{name:"2→4",indices:[[],[],[],[2],[],[]]},{name:"3→4",indices:[[],[],[],[3],[],[]]},{name:"4→5",indices:[[],[],[],[],[4],[]]},{name:"1→4 2→5 3→6",indices:[[],[],[],[1],[2],[3]]},{name:"1→5 2→6 3→4",indices:[[],[],[],[3],[1],[2]]},{name:"1→2→3→4→5→6",indices:[[],[1],[2],[3],[4],[5]]},{name:"2→1→6→5→4→3→2",indices:[[2],[3],[4],[5],[6],[1]]},{name:"1→2→3→4→5→6→1",indices:[[6],[1],[2],[3],[4],[5]]},{name:"1↔2 3↔4 5↔6",indices:[[2],[1],[4],[3],[6],[5]]},{name:"1↔4 2↔5 3↔6",indices:[[4],[5],[6],[1],[2],[3]]},{name:"(1,2,3,4,5)→6",indices:[[],[],[],[],[],[1,2,3,4,5]]},{name:"ALL",indices:[[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]]}]),u.chipNoiseLength=32768,u.spectrumNoiseLength=32768,u.spectrumBasePitch=24,u.spectrumControlPoints=30,u.spectrumControlPointsPerOctave=7,u.spectrumControlPointBits=3,u.spectrumMax=(1<<t.spectrumControlPointBits)-1,u.harmonicsControlPoints=28,u.harmonicsRendered=64,u.harmonicsRenderedForPickedString=256,u.harmonicsControlPointBits=3,u.harmonicsMax=(1<<t.harmonicsControlPointBits)-1,u.harmonicsWavelength=2048,u.pulseWidthRange=50,u.pulseWidthStepPower=.5,u.supersawVoiceCount=7,u.supersawDynamismMax=6,u.supersawSpreadMax=12,u.supersawShapeMax=6,u.pitchChannelCountMin=1,u.pitchChannelCountMax=60,u.noiseChannelCountMin=0,u.noiseChannelCountMax=60,u.modChannelCountMin=0,u.modChannelCountMax=60,u.noiseInterval=6,u.pitchesPerOctave=12,u.drumCount=12,u.pitchOctaves=8,u.modCount=6,u.maxPitch=t.pitchOctaves*t.pitchesPerOctave,u.maximumTonesPerChannel=2*t.maxChordSize,u.justIntonationSemitones=[.5,8/15,9/16,.6,5/8,2/3,32/45,3/4,.8,5/6,8/9,15/16,1,16/15,9/8,1.2,5/4,4/3,45/32,1.5,1.6,5/3,16/9,15/8,2].map((e=>Math.log2(e)*t.pitchesPerOctave)),u.pitchShiftRange=t.justIntonationSemitones.length,u.pitchShiftCenter=t.pitchShiftRange>>1,u.detuneCenter=200,u.detuneMax=400,u.detuneMin=0,u.songDetuneMin=0,u.songDetuneMax=500,u.unisonVoicesMin=1,u.unisonVoicesMax=9,u.unisonSpreadMin=-96,u.unisonSpreadMax=96,u.unisonOffsetMin=-96,u.unisonOffsetMax=96,u.unisonExpressionMin=-2,u.unisonExpressionMax=2,u.unisonSignMin=-2,u.unisonSignMax=2,u.sineWaveLength=256,u.sineWaveMask=t.sineWaveLength-1,u.sineWave=function(){const e=new Float32Array(u.sineWaveLength+1);for(let t=0;t<u.sineWaveLength+1;t++)e[t]=Math.sin(t*Math.PI*2/u.sineWaveLength);return e}(),u.perEnvelopeSpeedIndices=[0,.01,.02,.03,.04,.05,.06,.07,.08,.09,.1,.2,.25,.3,.3333,.4,.5,.6,.6667,.7,.75,.8,.9,1,1.25,1.3333,1.5,1.6667,1.75,2,2.25,2.5,2.75,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,11,12,13,14,15,16,17,18,19,20,24,32,40,64,128,256],u.perEnvelopeSpeedToIndices={0:0,.01:1,.02:2,.03:3,.04:4,.05:5,.06:6,.07:7,.08:8,.09:9,.1:10,.2:11,.25:12,.3:13,.3333:14,.4:15,.5:16,.6:17,.6667:18,.7:19,.75:20,.8:21,.9:22,1:23,1.25:24,1.3333:25,1.5:26,1.6667:27,1.75:28,2:29,2.25:30,2.5:31,2.75:32,3:33,3.5:34,4:35,4.5:36,5:37,5.5:38,6:39,6.5:40,7:41,7.5:42,8:43,8.5:44,9:45,9.5:46,10:47,11:48,12:49,13:50,14:51,15:52,16:53,17:54,18:55,19:56,20:57,24:58,32:59,40:60,64:61,128:62,256:63},u.perEnvelopeBoundMin=0,u.perEnvelopeBoundMax=2,u.randomEnvelopeSeedMax=63,u.randomEnvelopeStepsMax=24,u.pickedStringDispersionCenterFreq=6e3,u.pickedStringDispersionFreqScale=.3,u.pickedStringDispersionFreqMult=4,u.pickedStringShelfHz=4e3,u.distortionRange=8,u.stringSustainRange=15,u.stringDecayRate=.12,u.enableAcousticSustain=!1,u.sustainTypeNames=["bright","acoustic"],u.bitcrusherFreqRange=14,u.bitcrusherOctaveStep=.5,u.bitcrusherQuantizationRange=8,u.maxEnvelopeCount=16,u.defaultAutomationRange=13,u.instrumentAutomationTargets=w([{name:"none",computeIndex:null,displayName:"none",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"noteVolume",computeIndex:0,displayName:"note volume",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:null},{name:"pulseWidth",computeIndex:2,displayName:"pulse width",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[6,8]},{name:"stringSustain",computeIndex:3,displayName:"sustain",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[7]},{name:"unison",computeIndex:4,displayName:"unison",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[0,5,7,9,6,2,3,4]},{name:"operatorFrequency",computeIndex:5,displayName:"fm# freq",interleave:!0,isFilter:!1,maxCount:t.operatorCount+2,effect:null,compatibleInstruments:[1,11]},{name:"operatorAmplitude",computeIndex:11,displayName:"fm# volume",interleave:!1,isFilter:!1,maxCount:t.operatorCount+2,effect:null,compatibleInstruments:[1,11]},{name:"feedbackAmplitude",computeIndex:17,displayName:"fm feedback",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[1,11]},{name:"pitchShift",computeIndex:18,displayName:"pitch shift",interleave:!1,isFilter:!1,maxCount:1,effect:7,compatibleInstruments:null},{name:"detune",computeIndex:19,displayName:"detune",interleave:!1,isFilter:!1,maxCount:1,effect:8,compatibleInstruments:null},{name:"vibratoDepth",computeIndex:20,displayName:"vibrato depth",interleave:!1,isFilter:!1,maxCount:1,effect:9,compatibleInstruments:null},{name:"noteFilterAllFreqs",computeIndex:1,displayName:"n. filter freqs",interleave:!1,isFilter:!0,maxCount:1,effect:5,compatibleInstruments:null},{name:"noteFilterFreq",computeIndex:21,displayName:"n. filter # freq",interleave:!1,isFilter:!0,maxCount:t.filterMaxPoints,effect:5,compatibleInstruments:null},{name:"decimalOffset",computeIndex:37,displayName:"decimal offset",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[6,8]},{name:"supersawDynamism",computeIndex:38,displayName:"dynamism",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]},{name:"supersawSpread",computeIndex:39,displayName:"spread",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]},{name:"supersawShape",computeIndex:40,displayName:"saw↔pulse",interleave:!1,isFilter:!1,maxCount:1,effect:null,compatibleInstruments:[8]},{name:"panning",computeIndex:41,displayName:"panning",interleave:!1,isFilter:!1,maxCount:1,effect:2,compatibleInstruments:null},{name:"distortion",computeIndex:42,displayName:"distortion",interleave:!1,isFilter:!1,maxCount:1,effect:3,compatibleInstruments:null},{name:"bitcrusherQuantization",computeIndex:43,displayName:"bitcrush",interleave:!1,isFilter:!1,maxCount:1,effect:4,compatibleInstruments:null},{name:"bitcrusherFrequency",computeIndex:44,displayName:"freq crush",interleave:!1,isFilter:!1,maxCount:1,effect:4,compatibleInstruments:null},{name:"chorus",computeIndex:45,displayName:"chorus",interleave:!1,isFilter:!1,maxCount:1,effect:1,compatibleInstruments:null},{name:"echoSustain",computeIndex:46,displayName:"echo",interleave:!1,isFilter:!1,maxCount:1,effect:6,compatibleInstruments:null},{name:"reverb",computeIndex:47,displayName:"reverb",interleave:!1,isFilter:!1,maxCount:1,effect:0,compatibleInstruments:null},{name:"arpeggioSpeed",computeIndex:48,displayName:"arpeggio speed",interleave:!1,isFilter:!1,maxCount:1,effect:11,compatibleInstruments:null},{name:"ringModulation",computeIndex:49,displayName:"ring mod",interleave:!1,isFilter:!1,maxCount:1,effect:13,compatibleInstruments:null},{name:"ringModulationHz",computeIndex:50,displayName:"ring mod hz",interleave:!1,isFilter:!1,maxCount:1,effect:13,compatibleInstruments:null},{name:"granular",computeIndex:51,displayName:"granular",interleave:!1,isFilter:!1,maxCount:1,effect:14,compatibleInstruments:null},{name:"grainFreq",computeIndex:52,displayName:"grain freq",interleave:!1,isFilter:!1,maxCount:1,effect:14,compatibleInstruments:null},{name:"grainSize",computeIndex:53,displayName:"grain size",interleave:!1,isFilter:!1,maxCount:1,effect:14,compatibleInstruments:null},{name:"grainRange",computeIndex:54,displayName:"grain range",interleave:!1,isFilter:!1,maxCount:1,effect:14,compatibleInstruments:null},{name:"echoDelay",computeIndex:55,displayName:"echo delay",interleave:!1,isFilter:!1,maxCount:1,effect:6,compatibleInstruments:null}]),u.operatorWaves=w([{name:"sine",samples:t.sineWave},{name:"triangle",samples:function(){const e=new Float32Array(u.sineWaveLength+1);for(let t=0;t<u.sineWaveLength+1;t++)e[t]=Math.asin(Math.sin(t*Math.PI*2/u.sineWaveLength))/(Math.PI/2);return e}()},{name:"pulse width",samples:g(.5)},{name:"sawtooth",samples:b()},{name:"ramp",samples:b(!0)},{name:"trapezoid",samples:function(e=2){const t=new Float32Array(u.sineWaveLength+1);for(let n=0;n<u.sineWaveLength+1;n++)t[n]=Math.max(-1,Math.min(1,Math.asin(Math.sin(n*Math.PI*2/u.sineWaveLength))*e));return t}(2)},{name:"quasi-sine",samples:function(){const e=new Float32Array(u.sineWaveLength+1);for(let t=0;t<u.sineWaveLength+1;t++)e[t]=Math.round(Math.sin(t*Math.PI*2/u.sineWaveLength));return e}()}]),u.pwmOperatorWaves=w([{name:"1%",samples:g(.01)},{name:"5%",samples:g(.05)},{name:"12.5%",samples:g(.125)},{name:"25%",samples:g(.25)},{name:"33%",samples:g(1/3)},{name:"50%",samples:g(.5)},{name:"66%",samples:g(2/3)},{name:"75%",samples:g(.75)},{name:"87.5%",samples:g(.875)},{name:"95%",samples:g(.95)},{name:"99%",samples:g(.99)}]),u.barEditorHeight=10,u.modulators=w([{name:"none",pianoName:"None",maxRawVol:6,newNoteVol:6,forSong:!0,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"No Mod Setting",promptDesc:["No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.","[$LO - $HI]"]},{name:"song volume",pianoName:"Volume",maxRawVol:100,newNoteVol:100,forSong:!0,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"Song Volume",promptDesc:["This setting affects the overall volume of the song, just like the main volume slider.","At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"tempo",pianoName:"Tempo",maxRawVol:t.tempoMax-t.tempoMin,newNoteVol:Math.ceil((t.tempoMax-t.tempoMin)/2),forSong:!0,convertRealFactor:t.tempoMin,associatedEffect:15,maxIndex:0,promptName:"Song Tempo",promptDesc:["This setting controls the speed your song plays at, just like the tempo slider.","When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.","Note that you can make a 'swing' effect by rapidly changing between two tempo values.","[OVERWRITING] [$LO - $HI] [BPM]"]},{name:"song reverb",pianoName:"Reverb",maxRawVol:2*t.reverbRange,newNoteVol:t.reverbRange,forSong:!0,convertRealFactor:-t.reverbRange,associatedEffect:15,maxIndex:0,promptName:"Song Reverb",promptDesc:["This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.","At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"next bar",pianoName:"Next Bar",maxRawVol:1,newNoteVol:1,forSong:!0,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"Go To Next Bar",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.","This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.","You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.","[$LO - $HI]"]},{name:"note volume",pianoName:"Note Vol.",maxRawVol:t.volumeRange,newNoteVol:Math.ceil(t.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-t.volumeRange/2),associatedEffect:15,maxIndex:0,promptName:"Note Volume",promptDesc:["This setting affects the volume of your instrument as if its note size had been scaled.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.","This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.","For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"pan",pianoName:"Pan",maxRawVol:t.panMax,newNoteVol:Math.ceil(t.panMax/2),forSong:!1,convertRealFactor:0,associatedEffect:2,maxIndex:0,promptName:"Instrument Panning",promptDesc:["This setting controls the panning of your instrument, just like the panning slider.","At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.","[OVERWRITING] [$LO - $HI] [L-R]"]},{name:"reverb",pianoName:"Reverb",maxRawVol:t.reverbRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:0,maxIndex:0,promptName:"Instrument Reverb",promptDesc:["This setting controls the reverb of your insturment, just like the reverb slider.","At $LO, your instrument will have no reverb. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"distortion",pianoName:"Distortion",maxRawVol:t.distortionRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:3,maxIndex:0,promptName:"Instrument Distortion",promptDesc:["This setting controls the amount of distortion for your instrument, just like the distortion slider.","At $LO, your instrument will have no distortion. At $HI, it will be at maximum.","[OVERWRITING] [$LO - $HI]"]},{name:"fm slider 1",pianoName:"FM 1",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"FM Slider 1",promptDesc:["This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 2",pianoName:"FM 2",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"FM Slider 2",promptDesc:["This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 3",pianoName:"FM 3",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"FM Slider 3",promptDesc:["This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 4",pianoName:"FM 4",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"FM Slider 4",promptDesc:["This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm feedback",pianoName:"FM Feedbck",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"FM Feedback",promptDesc:["This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"pulse width",pianoName:"Pulse Width",maxRawVol:t.pulseWidthRange,newNoteVol:t.pulseWidthRange,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"Pulse Width",promptDesc:["This setting controls the width of this instrument's pulse wave, just like the pulse width slider.","At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).","Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.","[OVERWRITING] [$LO - $HI] [%Duty]"]},{name:"detune",pianoName:"Detune",maxRawVol:t.detuneMax-t.detuneMin,newNoteVol:t.detuneCenter,forSong:!1,convertRealFactor:-t.detuneCenter,associatedEffect:8,maxIndex:0,promptName:"Instrument Detune",promptDesc:["This setting controls the detune for this instrument, just like the detune slider.","At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.","[OVERWRITING] [$LO - $HI] [cents]"]},{name:"vibrato depth",pianoName:"Vibrato Depth",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,maxIndex:0,promptName:"Vibrato Depth",promptDesc:["This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.","At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.","[OVERWRITING] [$LO - $HI] [pitch ÷25]"]},{name:"song detune",pianoName:"Detune",maxRawVol:t.songDetuneMax-t.songDetuneMin,newNoteVol:Math.ceil((t.songDetuneMax-t.songDetuneMin)/2),forSong:!0,convertRealFactor:-250,associatedEffect:15,maxIndex:0,promptName:"Song Detune",promptDesc:["This setting controls the overall detune of the entire song. There is no associated slider.","At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.","[MULTIPLICATIVE] [$LO - $HI] [cents x4]"]},{name:"vibrato speed",pianoName:"Vibrato Speed",maxRawVol:30,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,maxIndex:0,promptName:"Vibrato Speed",promptDesc:["This setting controls the speed your instrument will vibrato at, just like the slider.","A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"vibrato delay",pianoName:"Vibrato Delay",maxRawVol:50,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:9,maxIndex:0,promptName:"Vibrato Delay",promptDesc:["This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.","A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).","[OVERWRITING] [$LO - $HI] [beats ÷24]"]},{name:"arp speed",pianoName:"Arp Speed",maxRawVol:50,newNoteVol:12,forSong:!1,convertRealFactor:0,associatedEffect:11,maxIndex:0,promptName:"Arpeggio Speed",promptDesc:["This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.","Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.","[0-4]: x0, x1/16, x⅛, x⅕, x¼,","[5-9]: x⅓, x⅖, x½, x⅔, x¾,","[10-14]: x⅘, x0.9, x1, x1.1, x1.2,","[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,","[20-24]: x1.8, x1.9, x2, x2.1, x2.2,","[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,","[30-34]: x2.8, x2.9, x3, x3.1, x3.2,","[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,","[40-44]: x3.8, x3.9, x4, x4.15, x4.3,","[45-50]: x4.5, x4.8, x5, x5.5, x6, x8","[OVERWRITING] [$LO - $HI]"]},{name:"pan delay",pianoName:"Pan Delay",maxRawVol:20,newNoteVol:10,forSong:!1,convertRealFactor:0,associatedEffect:2,maxIndex:0,promptName:"Panning Delay",promptDesc:["This setting controls the delay applied to panning for your instrument, just like the pan delay slider.","With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.","[OVERWRITING] [$LO - $HI]"]},{name:"reset arp",pianoName:"Reset Arp",maxRawVol:1,newNoteVol:1,forSong:!1,convertRealFactor:0,associatedEffect:11,maxIndex:0,promptName:"Reset Arpeggio",promptDesc:["This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.","This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.","[$LO - $HI]"]},{name:"eq filter",pianoName:"EQFlt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"EQ Filter",promptDesc:["This setting controls a few separate things for your instrument's EQ filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"note filter",pianoName:"N.Flt",maxRawVol:10,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,maxIndex:0,promptName:"Note Filter",promptDesc:["This setting controls a few separate things for your instrument's note filter.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"bit crush",pianoName:"Bitcrush",maxRawVol:t.bitcrusherQuantizationRange-1,newNoteVol:Math.round(t.bitcrusherQuantizationRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,maxIndex:0,promptName:"Instrument Bit Crush",promptDesc:["This setting controls the bit crush of your instrument, just like the bit crush slider.","At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"freq crush",pianoName:"Freq Crush",maxRawVol:t.bitcrusherFreqRange-1,newNoteVol:Math.round(t.bitcrusherFreqRange/2),forSong:!1,convertRealFactor:0,associatedEffect:4,maxIndex:0,promptName:"Instrument Frequency Crush",promptDesc:["This setting controls the frequency crush of your instrument, just like the freq crush slider.","At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo",pianoName:"Echo",maxRawVol:t.echoSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:6,maxIndex:0,promptName:"Instrument Echo Sustain",promptDesc:["This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.","At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"echo delay",pianoName:"Echo Delay",maxRawVol:t.echoDelayRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:6,maxIndex:0,promptName:"Instrument Echo Delay",promptDesc:["This setting controls the echo delay of your instrument, just like the echo delay slider.","At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.","[OVERWRITING] [$LO - $HI] [~beats ÷12]"]},{name:"chorus",pianoName:"Chorus",maxRawVol:t.chorusRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:1,maxIndex:0,promptName:"Instrument Chorus",promptDesc:["This setting controls the chorus strength of your instrument, just like the chorus slider.","At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt cut",pianoName:"EQFlt Cut",maxRawVol:t.filterSimpleCutRange-1,newNoteVol:t.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"EQ Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"eq filt peak",pianoName:"EQFlt Peak",maxRawVol:t.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"EQ Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt cut",pianoName:"N.Flt Cut",maxRawVol:t.filterSimpleCutRange-1,newNoteVol:t.filterSimpleCutRange-1,forSong:!1,convertRealFactor:0,associatedEffect:5,maxIndex:0,promptName:"Note Filter Cutoff Frequency",promptDesc:["This setting controls the filter cut position of your instrument, just like the filter cut slider.","This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.","[OVERWRITING] [$LO - $HI]"]},{name:"note filt peak",pianoName:"N.Flt Peak",maxRawVol:t.filterSimplePeakRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:5,maxIndex:0,promptName:"Note Filter Peak Gain",promptDesc:["This setting controls the filter peak position of your instrument, just like the filter peak slider.","This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.","[OVERWRITING] [$LO - $HI]"]},{name:"pitch shift",pianoName:"Pitch Shift",maxRawVol:t.pitchShiftRange-1,newNoteVol:t.pitchShiftCenter,forSong:!1,convertRealFactor:-t.pitchShiftCenter,associatedEffect:7,maxIndex:0,promptName:"Pitch Shift",promptDesc:["This setting controls the pitch offset of your instrument, just like the pitch shift slider.","At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.","[OVERWRITING] [$LO - $HI] [pitch]"]},{name:"sustain",pianoName:"Sustain",maxRawVol:t.stringSustainRange-1,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"Picked String Sustain",promptDesc:["This setting controls the sustain of your picked string instrument, just like the sustain slider.","At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"mix volume",pianoName:"Mix Vol.",maxRawVol:t.volumeRange,newNoteVol:Math.ceil(t.volumeRange/2),forSong:!1,convertRealFactor:Math.ceil(-t.volumeRange/2),associatedEffect:15,maxIndex:0,promptName:"Mix Volume",promptDesc:["This setting affects the volume of your instrument as if its volume slider had been moved.","At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.","Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.","[MULTIPLICATIVE] [$LO - $HI]"]},{name:"fm slider 5",pianoName:"FM 5",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"FM Slider 5",promptDesc:["This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"fm slider 6",pianoName:"FM 6",maxRawVol:15,newNoteVol:15,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"FM Slider 6",promptDesc:["This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.","It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.","For the full range of control with this mod, move your underlying slider all the way to the right.","[MULTIPLICATIVE] [$LO - $HI] [%]"]},{name:"decimal offset",pianoName:"Decimal Offset",maxRawVol:99,newNoteVol:0,forSong:!1,convertRealFactor:0,invertSliderIndicator:!0,associatedEffect:15,maxIndex:0,promptName:"Decimal Offset",promptDesc:["This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.","[$LO - $HI]"]},{name:"envelope speed",pianoName:"EnvelopeSpd",maxRawVol:50,newNoteVol:12,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"Envelope Speed",promptDesc:["This setting controls how fast all of the envelopes for the instrument play.","At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:","[0-4]: x0, x1/16, x⅛, x⅕, x¼,","[5-9]: x⅓, x⅖, x½, x⅔, x¾,","[10-14]: x⅘, x0.9, x1, x1.1, x1.2,","[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,","[20-24]: x1.8, x1.9, x2, x2.1, x2.2,","[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,","[30-34]: x2.8, x2.9, x3, x3.1, x3.2,","[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,","[40-44]: x3.8, x3.9, x4, x4.15, x4.3,","[45-50]: x4.5, x4.8, x5, x5.5, x6, x8","[OVERWRITING] [$LO - $HI]"]},{name:"dynamism",pianoName:"Dynamism",maxRawVol:t.supersawDynamismMax,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"Supersaw Dynamism",promptDesc:["This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.","At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"spread",pianoName:"Spread",maxRawVol:t.supersawSpreadMax,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"Supersaw Spread",promptDesc:["This setting controls the supersaw spread of your instrument, just like the spread slider.","At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.","[OVERWRITING] [$LO - $HI]"]},{name:"saw shape",pianoName:"Saw Shape",maxRawVol:t.supersawShapeMax,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"Supersaw Shape",promptDesc:["This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.","As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.","[OVERWRITING] [$LO - $HI] [%]"]},{name:"individual envelope speed",pianoName:"IndvEnvSpd",maxRawVol:63,newNoteVol:23,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:t.maxEnvelopeCount-1,promptName:"Individual Envelope Speed",promptDesc:["This setting controls how fast the specified envelope of the instrument will play.","At $LO, your the envelope will be frozen, and at values near there they will change very slowly. At 23, the envelope will work as usual, performing at normal speed. This increases up to $HI, where the envelope will change very quickly. The speeds are given below:","[0-4]: x0, x0.01, x0.02, x0.03, x0.04,","[5-9]: x0.05, x0.06, x0.07, x0.08, x0.09,","[10-14]: x0.1, x0.2, x0.25, x0.3, x0.33,","[15-19]: x0.4, x0.5, x0.6, x0.6667, x0.7,","[20-24]: x0.75, x0.8, x0.9, x1, x1.25,","[25-29]: x1.3333, x1.5, x1.6667, x1.75, x2,","[30-34]: x2.25, x2.5, x2.75, x3, x3.5,","[35-39]: x4, x4.5, x5, x5.5, x6,","[40-44]: x6.5, x7, x7.5, x8, x8.5,","[45-49]: x9, x9.5, x10, x11, x12","[50-54]: x13, x14, x15, x16, x17","[55-59]: x18, x19, x20, x24, x32","[60-63]: x40, x64, x128, x256","[OVERWRITING] [$LO - $HI]"]},{name:"song eq",pianoName:"Song EQ",maxRawVol:10,newNoteVol:0,forSong:!0,convertRealFactor:0,associatedEffect:15,maxIndex:0,promptName:"Song EQ Filter",promptDesc:["This setting overwrites every instrument's eq filter. You can do this in a few separate ways, similar to the per instrument eq filter modulator.","When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.","Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.","If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.","[OVERWRITING] [$LO - $HI]"]},{name:"reset envelope",pianoName:"ResetEnv",maxRawVol:1,newNoteVol:1,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:t.maxEnvelopeCount-1,promptName:"Reset Envelope",promptDesc:["This setting functions a lot like the reset arp modulator. Wherever a note is placed, the envelope of this instrument at the specified index will reset at the very start of that note. ","[$LO - $HI]"]},{name:"ring modulation",pianoName:"Ring Mod",maxRawVol:t.ringModRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:13,maxIndex:0,promptName:"Ring Modulation",promptDesc:["This setting controls the Ring Modulation effect in your instrument.","[OVERWRITING] [$LO - $HI]"]},{name:"ring mod hertz",pianoName:"Ring Mod(Hz)",maxRawVol:t.ringModHzRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:13,maxIndex:0,promptName:"Ring Modulation (Hertz)",promptDesc:["This setting controls the Hertz (Hz) used in the Ring Modulation effect in your instrument.","[OVERWRITING] [$LO - $HI]"]},{name:"granular",pianoName:"Granular",maxRawVol:t.granularRange,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,maxIndex:0,promptName:"Granular",promptDesc:["This setting controls the granular effect in your instrument.","[OVERWRITING] [$LO - $HI]"]},{name:"grain freq",pianoName:"Grain #",maxRawVol:t.grainAmountsMax,newNoteVol:8,forSong:!1,convertRealFactor:0,associatedEffect:14,maxIndex:0,promptName:"Grain Count",promptDesc:["This setting controls the density of grains for the granular effect on your instrument.","[OVERWRITING] [$LO - $HI]"]},{name:"grain size",pianoName:"Grain Size",maxRawVol:t.grainSizeMax/t.grainSizeStep,newNoteVol:t.grainSizeMin/t.grainSizeStep,forSong:!1,convertRealFactor:0,associatedEffect:14,maxIndex:0,promptName:"Grain Size",promptDesc:["This setting controls the grain size of the granular effect in your instrument.","The number shown in the mod channel is multiplied by "+t.grainSizeStep+" to get the actual grain size.","[OVERWRITING] [$LO - $HI]"]},{name:"grain range",pianoName:"Grain Range",maxRawVol:t.grainRangeMax/t.grainSizeStep,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:14,maxIndex:0,promptName:"Grain Range",promptDesc:["This setting controls the range of values for your grain size of the granular effect in your instrument, from no variation to a lot","The number shown in the mod channel is multiplied by "+t.grainSizeStep+" to get the actual grain size.","[OVERWRITING] [$LO - $HI]"]},{name:"individual envelope lower bound",pianoName:"IndvEnvLow",maxRawVol:10*t.perEnvelopeBoundMax,newNoteVol:0,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:t.maxEnvelopeCount-1,promptName:"Individual Envelope Lower Bound",promptDesc:["This setting controls the envelope lower bound","At $LO, your the envelope will output an upper envelope bound to 0, and at $HI your envelope will output an upper envelope bound to 2.","This settings will not work if your lower envelope bound is higher than your upper envelope bound"]},{name:"individual envelope upper bound",pianoName:"IndvEnvUp",maxRawVol:10*t.perEnvelopeBoundMax,newNoteVol:10,forSong:!1,convertRealFactor:0,associatedEffect:15,maxIndex:t.maxEnvelopeCount-1,promptName:"Individual Envelope Upper Bound",promptDesc:["This setting controls the envelope upper bound","At $LO, your the envelope will output a 0 to lower envelope bound, and at $HI your envelope will output a 2 to lower envelope bound.","This settings will not work if your lower envelope bound is higher than your upper envelope bound"]}]),/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);class G{static valueToPreset(e){var t;const n=e>>6,i=63&e;return null===(t=G.presetCategories[n])||void 0===t?void 0:t.presets[i]}static midiProgramToPresetValue(e){for(let t=0;t<G.presetCategories.length;t++){const n=G.presetCategories[t];for(let i=0;i<n.presets.length;i++){const s=n.presets[i];if(s.generalMidi&&s.midiProgram==e)return(t<<6)+i}}return null}static nameToPresetValue(e){for(let t=0;t<G.presetCategories.length;t++){const n=G.presetCategories[t];for(let i=0;i<n.presets.length;i++){if(n.presets[i].name==e)return(t<<6)+i}}return null}static instrumentToPreset(e){var t;return null===(t=G.presetCategories[0].presets.dictionary)||void 0===t?void 0:t[null==i?void 0:i[e]]}}function W(e,t){for(let n=0;n<e.length;n++)e[n]*=t}function A(e){if(!function(e){return!(!e||e&e-1)}(e))throw new Error("FFT array length must be a power of 2.");return Math.round(Math.log(e)/Math.log(2))}function R(e,t){const n=A(t);if(t<4)throw new Error("FFT array length must be at least 4.");for(let i=n-1;i>=2;i--){const n=1<<i,s=n>>1,a=n<<1,o=2*Math.PI/a,r=Math.cos(o),l=Math.sin(o),p=2*r;for(let i=0;i<t;i+=a){const t=i,a=t+s,o=t+n,h=o+s,u=o+n,c=e[t],f=e[o];e[t]=c+f,e[a]*=2,e[o]=c-f,e[h]*=2;let d=r,m=-l,v=1,y=0;for(let n=1;n<s;n++){const i=t+n,s=o-n,a=o+n,r=u-n,l=e[i],h=e[s],c=e[a],f=e[r],g=l-h,b=c+f;e[i]=l+h,e[s]=f-c,e[a]=g*d-b*m,e[r]=b*d+g*m;const S=p*d-v,w=p*m-y;v=d,y=m,d=S,m=w}}}for(let n=0;n<t;n+=4){const t=n+1,i=n+2,s=n+3,a=e[n],o=2*e[t],r=e[i],l=2*e[s],p=a+r,h=a-r;e[n]=p+o,e[t]=p-o,e[i]=h+l,e[s]=h-l}!function(e,t){const n=A(t);if(n>16)throw new Error("FFT array length must not be greater than 2^16.");const i=16-n;for(let n=0;n<t;n++){let t;if(t=(43690&n)>>1|(21845&n)<<1,t=(52428&t)>>2|(13107&t)<<2,t=(61680&t)>>4|(3855&t)<<4,t=(t>>8|(255&t)<<8)>>i,t>n){let i=e[n];e[n]=e[t],e[t]=i}}}(e,t)}G.version="1.4.3",G.versionDisplayName="Slarmoo's Box Testing "+G.version,G.releaseNotesURL="./patch_notes.html",G.isOnMac=/^Mac/i.test(navigator.platform)||/Mac OS X/i.test(navigator.userAgent)||/^(iPhone|iPad|iPod)/i.test(navigator.platform)||/(iPhone|iPad|iPod)/i.test(navigator.userAgent),G.ctrlSymbol=G.isOnMac?"⌘":"Ctrl+",G.ctrlName=G.isOnMac?"command":"control",G.presetCategories=w([{name:"Custom Instruments",presets:w([{name:i[0],customType:0},{name:i[1],customType:1},{name:i[2],customType:2},{name:i[3],customType:3},{name:i[4],customType:4},{name:i[5],customType:5},{name:i[6],customType:6},{name:i[7],customType:7},{name:i[8],customType:8},{name:i[9],customType:9},{name:i[11],customType:11}])},{name:"Retro Presets",presets:w([{name:"square wave",midiProgram:80,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"square",unison:"none",envelopes:[]}},{name:"triangle wave",midiProgram:71,settings:{type:"chip",eqFilter:[],effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1,chord:"arpeggio",wave:"triangle",unison:"none",envelopes:[]}},{name:"square lead",midiProgram:80,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"square",unison:"hum",envelopes:[]}},{name:"sawtooth lead 1",midiProgram:81,generalMidi:!0,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",wave:"sawtooth",unison:"shimmer",envelopes:[]}},{name:"sawtooth lead 2",midiProgram:81,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:1}],effects:["vibrato","aliasing"],vibrato:"light",transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[]}},{name:"chip noise",midiProgram:116,isNoise:!0,settings:{type:"noise",transition:"hard",effects:["aliasing"],chord:"arpeggio",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"steady",wave:"retro"}},{name:"supersaw lead",midiProgram:81,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:2}],effects:["reverb"],reverb:67,fadeInSeconds:0,fadeOutTicks:-6,pulseWidth:50,dynamism:100,spread:58,shape:0,envelopes:[]}},{name:"FM twang",midiProgram:32,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM bass",midiProgram:36,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:11},{frequency:"1×",amplitude:7},{frequency:"1×",amplitude:9},{frequency:"20×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"twang 2",index:3}]}},{name:"FM flute",midiProgram:73,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"twang 2",index:1}]}},{name:"FM organ",midiProgram:16,settings:{type:"FM",eqFilter:[],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:14},{frequency:"2×",amplitude:14},{frequency:"1×",amplitude:11},{frequency:"2×",amplitude:11}],envelopes:[]}},{name:"FM sine",midiProgram:55,settings:{type:"FM",eqFilter:[],eqFilterType:!0,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,effects:[],panDelay:10,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1 2 3 4",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine"},{frequency:"1×",amplitude:0,waveform:"sine"},{frequency:"1×",amplitude:0,waveform:"sine"},{frequency:"1×",amplitude:0,waveform:"sine"}],envelopes:[]}},{name:"NES Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",vibrato:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-23,-23,-23,-23,-22,-22,-22,-22,-21,-21,-21,-21,-20,-20,-20,-20,-19,-19,-19,-19,-18,-18,-18,-18,-17,-17,-17,-17,24,24,24,24,23,23,23,23,22,22,22,22,21,21,21,21,20,20,20,20,19,19,19,19,18,18,18,18,17,17,17,17]}},{name:"Gameboy Pulse",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-17,-15,-13,-13,-11,-11,-11,-9,-9,-9,-9,-7,-7,-7,-7,-7,-5,-5,-5,-5,-5,-5,-3,-3,-3,-3,-3,-3,-3,-3,24,20,17,15,13,13,11,11,11,9,9,9,9,7,7,7,7,7,5,5,5,5,5,5,3,3,3,3,3,3,3,3]}},{name:"VRC6 Sawtooth",midiProgram:81,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-20,-16,-13,-10,-8,-6,-5,-4,-4,0,0,0,0,4,4,4,4,4,4,8,8,8,8,8,8,8,8,12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,20,20,20,20,20,20,20,20,24,24,24,24,24,24,24,24,24,24,24,24]}},{name:"Atari Square",midiProgram:80,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-23,-23,-23,-22,-22,-22,-21,-21,-21,-20,-20,-20,-19,-19,-19,-18,-18,-18,-17,-17,-17,-16,-16,-16,-15,-15,-15,-14,-14,-14,-13,-13,-13,24,24,24,23,23,23,22,22,22,21,21,21,20,20,20,19,19,19,18,18,18,17,17,17,16,16,15,15]}},{name:"Atari Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,24,-24,-24,-24,24,24,-24,-24,-24,-24,-24,-24,-24,-24,-24,24,24,24,24,24,24,-24,-24,24,24,24,24,24,-24,-24,-24,-24,24,24,-24,-24,24,24]}},{name:"Sunsoft Bass",midiProgram:36,settings:{type:"custom chip",effects:["aliasing"],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"arpeggio",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5}],unison:"none",envelopes:[],customChipWave:[24,24,15,15,9,9,-4,-4,0,0,-13,-13,-19,-19,-24,-24,-24,-24,-10,-10,0,0,-7,-7,-7,-7,0,0,6,6,-4,-4,3,3,-4,-4,3,3,3,3,9,9,15,15,15,15,6,6,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,3,3,12,12,24,24]}}])},{name:"Keyboard Presets",presets:w([{name:"grand piano 1",midiProgram:0,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,86,86,71,71,71,0,86,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}},{name:"bright piano",midiProgram:1,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.7071},{type:"high-pass",cutoffHz:148.65,linearGain:.5},{type:"peak",cutoffHz:3363.59,linearGain:1.4142}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,86,86,71,71,0,71,71,71,71,71,71,14,57,57,57,57,57,57,29,57,57,57,57,57,57,57],unison:"piano",stringSustain:86,envelopes:[]}},{name:"electric grand",midiProgram:2,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"1/8 pulse",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"honky-tonk piano",midiProgram:3,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,100,86,71,86,71,43,71,43,43,57,57,57,29,57,57,57,57,57,57,43,57,57,57,43,43,43,43],unison:"honky tonk",stringSustain:71,envelopes:[]}},{name:"electric piano 1",midiProgram:4,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:.5}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",harmonics:[86,100,100,71,71,57,57,43,43,43,29,29,29,14,14,14,0,0,0,0,0,57,0,0,0,0,0,0],unison:"none",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"electric piano 2",midiProgram:5,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:9},{frequency:"16×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"harpsichord",midiProgram:6,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:250,linearGain:.3536},{type:"peak",cutoffHz:11313.71,linearGain:2.8284}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",harmonics:[100,100,100,86,57,86,86,86,86,57,57,71,71,86,86,71,71,86,86,71,71,71,71,71,71,71,71,71],unison:"none",stringSustain:79,envelopes:[]}},{name:"clavinet",midiProgram:7,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.3536}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"3⟲",feedbackAmplitude:6,operators:[{frequency:"3×",amplitude:15},{frequency:"~1×",amplitude:6},{frequency:"8×",amplitude:4},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"},{target:"feedbackAmplitude",envelope:"twang 2"}]}},{name:"dulcimer",midiProgram:15,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,100,86,100,86,57,100,100,86,100,86,100,86,100,71,57,71,71,100,86,71,86,86,100,86,86,86],unison:"piano",stringSustain:79,envelopes:[]}},{name:"grand piano 2",midiProgram:0,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:2e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.125}],reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",harmonics:[100,86,86,86,86,71,71,57,0,57,29,43,57,57,57,43,43,0,29,43,43,43,43,43,43,29,0,29],unison:"piano",stringSustain:79,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}},{name:"grand piano 3",midiProgram:0,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:148.65,linearGain:.7071},{type:"peak",cutoffHz:1681.79,linearGain:4},{type:"low-pass",cutoffHz:8e3,linearGain:.1768},{type:"peak",cutoffHz:3363.59,linearGain:4},{type:"peak",cutoffHz:2378.41,linearGain:.25}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.3536},{type:"high-pass",cutoffHz:125,linearGain:.0884}],reverb:67,fadeInSeconds:0,fadeOutTicks:48,harmonics:[100,100,86,86,86,71,71,71,0,71,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],unison:"piano",stringSustain:86,stringSustainType:"acoustic",envelopes:[{target:"noteFilterFreq",envelope:"note size",index:0},{target:"noteFilterFreq",envelope:"twang 1",index:1},{target:"noteFilterFreq",envelope:"twang 1",index:1}]}}])},{name:"Idiophone Presets",presets:w([{name:"celesta",midiProgram:8,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~1×",amplitude:11,envelope:"custom"},{frequency:"8×",amplitude:6,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"3×",amplitude:1,envelope:"twang 2"}]}},{name:"glockenspiel",midiProgram:9,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:193,effects:["panning","chord type","note filter","reverb"],chord:"strum",fastTwoNoteArp:!0,arpeggioSpeed:12,noteFilterType:!0,noteSimpleCut:9,noteSimplePeak:1,noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:48,algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,operators:[{frequency:"1×",amplitude:7,waveform:"sine",pulseWidth:5},{frequency:"5×",amplitude:11,waveform:"sine",pulseWidth:5},{frequency:"8×",amplitude:7,waveform:"sine",pulseWidth:5},{frequency:"20×",amplitude:2,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:8,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"feedbackAmplitude",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"music box 1",midiProgram:10,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,0,0,100,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,71,0],unison:"none",stringSustain:64,envelopes:[]}},{name:"music box 2",midiProgram:10,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:.7071}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,57,57,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0],unison:"none",stringSustain:29,envelopes:[]}},{name:"vibraphone",midiProgram:11,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:3,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:9,envelope:"custom"},{frequency:"9×",amplitude:3,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"}]}},{name:"marimba",midiProgram:12,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:197,effects:["panning","chord type","note filter","reverb"],chord:"strum",fastTwoNoteArp:!0,arpeggioSpeed:12,noteFilterType:!0,noteSimpleCut:6,noteSimplePeak:2,noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.7071}],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:48,algorithm:"1 2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:6,waveform:"sine",pulseWidth:5},{frequency:"13×",amplitude:6,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2}],isDrum:!1}},{name:"kalimba",midiProgram:108,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:198,effects:["panning","chord type","note filter","reverb"],chord:"strum",fastTwoNoteArp:!0,arpeggioSpeed:12,noteFilterType:!0,noteSimpleCut:7,noteSimplePeak:1,noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:.5}],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:48,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:11,waveform:"sine",pulseWidth:5},{frequency:"5×",amplitude:3,waveform:"sine",pulseWidth:5},{frequency:"20×",amplitude:3,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:8,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:1},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2}],isDrum:!1}},{name:"xylophone",midiProgram:13,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"11×",amplitude:9,envelope:"custom"},{frequency:"20×",amplitude:6,envelope:"twang 1"}]}},{name:"tubular bell",midiProgram:14,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.5},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:96,chord:"strum",harmonics:[43,71,0,100,0,100,0,86,0,0,86,0,14,71,14,14,57,14,14,43,14,14,43,14,14,43,14,14],unison:"shimmer",stringSustain:86,envelopes:[]}},{name:"bell synth",midiProgram:14,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:10,envelope:"custom"},{frequency:"7×",amplitude:6,envelope:"twang 3"},{frequency:"20×",amplitude:1,envelope:"twang 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"rain drop",midiProgram:96,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"20×",amplitude:3,envelope:"twang 1"},{frequency:"1×",amplitude:6,envelope:"tremolo1"}]}},{name:"crystal",midiProgram:98,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"delayed",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"custom"},{frequency:"6×",amplitude:4,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"}]}},{name:"tinkle bell",midiProgram:112,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"~2×",amplitude:7,envelope:"custom"},{frequency:"5×",amplitude:7,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"16×",amplitude:7,envelope:"custom"}]}},{name:"agogo",midiProgram:113,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:205,effects:["panning","chord type","note filter","reverb"],chord:"strum",fastTwoNoteArp:!0,arpeggioSpeed:12,noteFilterType:!0,noteSimpleCut:8,noteSimplePeak:1,noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:48,algorithm:"1 2 3 4",feedbackType:"1→4",feedbackAmplitude:15,operators:[{frequency:"2×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"5×",amplitude:6,waveform:"sine",pulseWidth:5},{frequency:"8×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"13×",amplitude:11,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"feedbackAmplitude",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}}])},{name:"Guitar Presets",presets:w([{name:"nylon guitar",midiProgram:24,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"5×",amplitude:2,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"steady"}]}},{name:"steel guitar",midiProgram:25,generalMidi:!0,settings:{type:"Picked String",eqFilter:[],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",harmonics:[100,100,86,71,71,71,86,86,71,57,43,43,43,57,57,57,57,57,43,43,43,43,43,43,43,43,43,43],unison:"none",stringSustain:71,envelopes:[]}},{name:"jazz guitar",midiProgram:26,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,57,71,71,43,57,71,57,43,29,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"clean guitar",midiProgram:27,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",interval:"union",vibrato:"none",harmonics:[86,100,100,100,86,57,86,100,100,100,71,57,43,71,86,71,57,57,71,71,71,71,57,57,57,57,57,43]}},{name:"muted guitar",midiProgram:28,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:4,envelope:"twang 3"},{frequency:"4×",amplitude:4,envelope:"twang 2"},{frequency:"16×",amplitude:4,envelope:"twang 1"}]}}])},{name:"Picked Bass Presets",presets:w([{name:"acoustic bass",midiProgram:32,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,71,71,71,57,57,57,57,43,43,43,43,43,29,29,29,29,29,29,14,14,14,14,14,14,14]}},{name:"fingered bass",midiProgram:33,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,86,71,57,71,43,57,29,29,29,29,29,29,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0]}},{name:"picked bass",midiProgram:34,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:1,envelope:"twang 3"},{frequency:"1×",amplitude:9,envelope:"steady"}]}},{name:"fretless bass",midiProgram:35,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"flare 2",interval:"union",vibrato:"none",harmonics:[100,100,86,71,71,57,57,71,71,71,57,57,57,57,57,57,57,43,43,43,43,43,43,43,43,29,29,14]}},{name:"slap bass 1",midiProgram:36,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:0,filterEnvelope:"twang 1",interval:"union",vibrato:"none",harmonics:[100,100,100,100,86,71,57,29,29,43,43,57,71,57,29,29,43,57,57,57,43,43,43,57,71,71,71,71]}},{name:"slap bass 2",midiProgram:37,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"3⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"13×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"bass synth 1",midiProgram:38,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"strum",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲ 4⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 1"},{frequency:"~1×",amplitude:13,envelope:"twang 2"}]}},{name:"bass synth 2",midiProgram:39,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1e3,filterResonance:57,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1→2",feedbackAmplitude:4,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"steady"},{frequency:"3×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"bass & lead",midiProgram:87,generalMidi:!0,settings:{type:"chip",transition:"hard",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:86,filterEnvelope:"twang 2",wave:"sawtooth",interval:"shimmer",vibrato:"none"}},{name:"dubstep yoi yoi",midiProgram:87,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.7071}],effects:["note filter","bitcrusher"],noteFilter:[{type:"low-pass",cutoffHz:594.6,linearGain:11.3137}],bitcrusherOctave:1.5,bitcrusherQuantization:0,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"arpeggio",wave:"sawtooth",unison:"none",envelopes:[{target:"noteFilterFreq",envelope:"flare 2",index:0}]}}])},{name:"Picked String Presets",presets:w([{name:"pizzicato strings",midiProgram:45,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"medium fade",chord:"harmony",filterCutoffHz:1e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"3×",amplitude:11,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"~1×",amplitude:10,envelope:"steady"}]}},{name:"harp",midiProgram:46,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"3⟲",feedbackAmplitude:6,feedbackEnvelope:"twang 2",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"4×",amplitude:6,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"steady"},{frequency:"1×",amplitude:6,envelope:"steady"}]}},{name:"sitar",midiProgram:104,generalMidi:!0,settings:{type:"FM",transition:"hard fade",effects:"reverb",chord:"strum",filterCutoffHz:8e3,filterResonance:57,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"twang 3"},{frequency:"9×",amplitude:3,envelope:"twang 3"},{frequency:"16×",amplitude:9,envelope:"swell 3"}]}},{name:"banjo",midiProgram:105,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"11×",amplitude:3,envelope:"twang 3"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"ukulele",midiProgram:105,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:0,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"9×",amplitude:4,envelope:"twang 2"},{frequency:"1×",amplitude:11,envelope:"steady"}]}},{name:"shamisen",midiProgram:106,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 1",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"3⟲",feedbackAmplitude:9,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"steady"},{frequency:"16×",amplitude:4,envelope:"twang 3"},{frequency:"1×",amplitude:7,envelope:"steady"}]}},{name:"koto",midiProgram:107,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"twang 2",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 2",operators:[{frequency:"~1×",amplitude:12,envelope:"custom"},{frequency:"6×",amplitude:10,envelope:"custom"},{frequency:"4×",amplitude:8,envelope:"twang 3"},{frequency:"~2×",amplitude:8,envelope:"twang 3"}]}}])},{name:"Distortion Presets",presets:w([{name:"overdrive guitar",midiProgram:29,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:840.9,linearGain:.5}],effects:["note filter","distortion"],noteFilter:[{type:"high-pass",cutoffHz:297.3,linearGain:2},{type:"low-pass",cutoffHz:2378.41,linearGain:.7071}],distortion:71,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"distortion guitar",midiProgram:30,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071},{type:"high-pass",cutoffHz:210.22,linearGain:1},{type:"low-pass",cutoffHz:5656.85,linearGain:1},{type:"peak",cutoffHz:594.6,linearGain:.3536},{type:"peak",cutoffHz:1e3,linearGain:.25}],effects:["note filter","distortion","reverb"],noteFilter:[{type:"high-pass",cutoffHz:353.55,linearGain:2},{type:"low-pass",cutoffHz:2e3,linearGain:1}],distortion:86,reverb:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:12,chord:"strum",harmonics:[86,100,100,86,86,86,86,71,71,71,71,71,71,71,71,71,71,57,57,57,57,57,57,57,57,57,57,57],unison:"none",stringSustain:71,envelopes:[{target:"noteFilterFreq",envelope:"note size",index:1}]}},{name:"charango synth",midiProgram:84,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:1}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2→3→4",feedbackAmplitude:8,operators:[{frequency:"3×",amplitude:13},{frequency:"~1×",amplitude:5},{frequency:"4×",amplitude:6},{frequency:"3×",amplitude:7}],envelopes:[{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"guitar harmonics",midiProgram:31,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3)←4",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"4×",amplitude:12},{frequency:"16×",amplitude:5},{frequency:"1×",amplitude:2},{frequency:"~1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:1},{target:"operatorAmplitude",envelope:"punch",index:2},{target:"operatorAmplitude",envelope:"twang 1",index:3}]}},{name:"PWM overdrive",midiProgram:29,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1.4142}],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:17.67767,envelopes:[{target:"pulseWidth",envelope:"punch"}]}},{name:"PWM distortion",midiProgram:30,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:2}],effects:["vibrato"],vibrato:"delayed",transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",pulseWidth:50,envelopes:[{target:"pulseWidth",envelope:"swell 1"}]}},{name:"FM overdrive",midiProgram:29,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:2,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"~2×",amplitude:6},{frequency:"1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"twang 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3},{target:"feedbackAmplitude",envelope:"punch"}]}},{name:"FM distortion",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:2}],effects:["reverb"],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"strum",algorithm:"1←(2 3←4)",feedbackType:"1→2",feedbackAmplitude:4,operators:[{frequency:"~1×",amplitude:15},{frequency:"1×",amplitude:11},{frequency:"1×",amplitude:9},{frequency:"~2×",amplitude:4}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"swell 3",index:3}]}}])},{name:"Bellows Presets",presets:w([{name:"drawbar organ 1",midiProgram:16,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,86,0,86,0,0,0,86,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"drawbar organ 2",midiProgram:16,midiSubharmonicOctaves:1,settings:{type:"harmonics",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[86,29,71,86,71,14,0,100,0,0,0,86,0,0,0,71,0,0,0,57,0,0,0,29,0,0,0,0]}},{name:"percussive organ",midiProgram:17,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:515,effects:["panning","vibrato","note filter","chorus","reverb"],vibrato:"delayed",vibratoDepth:.3,vibratoDelay:18.5,vibratoSpeed:10,vibratoType:0,noteFilterType:!0,noteSimpleCut:8,noteSimplePeak:1,noteFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:.5}],pan:0,panDelay:10,chorus:100,reverb:0,fadeInSeconds:0,fadeOutTicks:-3,algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,operators:[{frequency:"1×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"6×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"punch",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"feedbackAmplitude",envelope:"flare",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"rock organ",midiProgram:18,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"punch",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,feedbackEnvelope:"flare 1",operators:[{frequency:"1×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"6×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:5,envelope:"steady"}]}},{name:"pipe organ",midiProgram:19,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"2×",amplitude:9,envelope:"custom"},{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"}]}},{name:"reed organ",midiProgram:20,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[71,86,100,86,71,100,57,71,71,71,43,43,43,71,43,71,57,57,57,57,57,57,57,29,43,29,29,14]}},{name:"accordion",midiProgram:21,generalMidi:!0,settings:{type:"chip",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:0,filterEnvelope:"swell 1",wave:"double saw",interval:"honky tonk",vibrato:"none"}},{name:"bandoneon",midiProgram:23,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",interval:"hum",vibrato:"none",harmonics:[86,86,86,57,71,86,57,71,71,71,57,43,57,43,71,43,71,57,57,43,43,43,57,43,43,29,29,29]}},{name:"bagpipe",midiProgram:109,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"punch",interval:"hum",vibrato:"none",harmonics:[71,86,86,100,100,86,57,100,86,71,71,71,57,57,57,71,57,71,57,71,43,57,57,43,43,43,43,43]}}])},{name:"String Presets",presets:w([{name:"violin 1",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"delayed",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1→2",feedbackAmplitude:5,operators:[{frequency:"4×",amplitude:9},{frequency:"3×",amplitude:9},{frequency:"2×",amplitude:7},{frequency:"7×",amplitude:5}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"viola",midiProgram:41,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"7×",amplitude:7,envelope:"custom"},{frequency:"13×",amplitude:4,envelope:"custom"},{frequency:"1×",amplitude:5,envelope:"steady"}]}},{name:"cello",midiProgram:42,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:.1768},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"peak",cutoffHz:4756.83,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:16e3,linearGain:.0884}],reverb:67,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:12,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"16×",amplitude:5},{frequency:"~1×",amplitude:10},{frequency:"1×",amplitude:9},{frequency:"6×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3}]}},{name:"contrabass",midiProgram:43,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"16×",amplitude:5,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"steady"},{frequency:"6×",amplitude:3,envelope:"swell 1"}]}},{name:"fiddle",midiProgram:110,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"delayed",algorithm:"(1 2)←(3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 1",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"8×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"16×",amplitude:3,envelope:"steady"}]}},{name:"tremolo strings",midiProgram:44,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,effects:["panning","note filter","chorus","reverb"],noteFilterType:!0,noteSimpleCut:6,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:.1768}],pan:0,panDelay:10,chorus:100,reverb:0,fadeInSeconds:.0125,fadeOutTicks:72,algorithm:"1 2 3 4",feedbackType:"1→2→3→4",feedbackAmplitude:12,operators:[{frequency:"1×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"7×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:4,perEnvelopeLowerBound:.5,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"strings",midiProgram:48,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:9,envelope:"custom"},{frequency:"3×",amplitude:9,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:3,envelope:"swell 1"}]}},{name:"slow strings",midiProgram:49,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:1414,filterResonance:0,filterEnvelope:"swell 2",vibrato:"none",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:6,feedbackEnvelope:"flare 3",operators:[{frequency:"4×",amplitude:10,envelope:"custom"},{frequency:"3×",amplitude:10,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:4,envelope:"swell 1"}]}},{name:"strings synth 1",midiProgram:50,generalMidi:!0,settings:{type:"chip",transition:"soft fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:1414,filterResonance:43,filterEnvelope:"steady",wave:"sawtooth",interval:"hum",vibrato:"delayed"}},{name:"strings synth 2",midiProgram:51,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:12,feedbackEnvelope:"swell 1",operators:[{frequency:"3×",amplitude:6,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"custom"},{frequency:"1×",amplitude:9,envelope:"custom"}]}},{name:"orchestra hit 1",midiProgram:55,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"FM",effects:"chorus & reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"custom",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,feedbackEnvelope:"twang 3",operators:[{frequency:"1×",amplitude:15,envelope:"twang 3"},{frequency:"2×",amplitude:15,envelope:"flare 3"},{frequency:"4×",amplitude:15,envelope:"flare 2"},{frequency:"8×",amplitude:15,envelope:"flare 1"}]}},{name:"violin 2",midiProgram:40,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:2828,linearGain:1.4142},{type:"high-pass",cutoffHz:105.11,linearGain:.3536}],effects:["vibrato","reverb"],vibrato:"light",reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:6,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"twang 3",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:13,envelope:"custom"},{frequency:"2×",amplitude:7,envelope:"steady"},{frequency:"7×",amplitude:8,envelope:"swell 1"}]}},{name:"orchestra hit 2",midiProgram:55,midiSubharmonicOctaves:1,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:588,effects:["panning","vibrato","note filter","chorus","reverb"],vibrato:"delayed",vibratoDepth:.3,vibratoDelay:18.5,vibratoSpeed:10,vibratoType:0,noteFilterType:!0,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.5}],pan:0,panDelay:10,chorus:100,reverb:0,fadeInSeconds:.0125,fadeOutTicks:72,algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:14,operators:[{frequency:"1×",amplitude:12,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:14,waveform:"sine",pulseWidth:5},{frequency:"3×",amplitude:12,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:14,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"supersaw string",midiProgram:41,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1.4142},{type:"low-pass",cutoffHz:3363.59,linearGain:.1768}],effects:["note filter","reverb"],noteFilter:[{type:"high-pass",cutoffHz:500,linearGain:.1768}],reverb:33,fadeInSeconds:.0263,fadeOutTicks:6,pulseWidth:35.35534,dynamism:83,spread:8,shape:50,envelopes:[{target:"noteFilterFreq",envelope:"twang 1",index:0}]}},{name:"supersaw string 2",midiProgram:41,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5},{type:"high-pass",cutoffHz:594.6,linearGain:.25},{type:"peak",cutoffHz:2e3,linearGain:2.8284},{type:"peak",cutoffHz:4756.83,linearGain:2}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5},{type:"high-pass",cutoffHz:594.6,linearGain:.25},{type:"peak",cutoffHz:2e3,linearGain:2.8284},{type:"peak",cutoffHz:4756.83,linearGain:2}],effects:["note filter","chorus","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:1}],noteSubFilters0:[{type:"low-pass",cutoffHz:8e3,linearGain:1}],chorus:57,reverb:42,fadeInSeconds:.0575,fadeOutTicks:-6,pulseWidth:50,dynamism:67,spread:58,shape:0,envelopes:[{target:"noteFilterAllFreqs",envelope:"punch"},{target:"pulseWidth",envelope:"flare 2"}]}}])},{name:"Vocal Presets",presets:w([{name:"choir soprano",midiProgram:94,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25},{type:"low-pass",cutoffHz:6727.17,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:33,fadeInSeconds:.0413,fadeOutTicks:24,harmonics:[100,100,86,57,29,29,57,71,57,29,14,14,14,29,43,57,43,29,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"choir tenor",midiProgram:52,generalMidi:!0,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"choir bass",midiProgram:52,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:11.3137},{type:"peak",cutoffHz:594.6,linearGain:5.6569},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:11.3137}],effects:["vibrato","chorus","reverb"],vibrato:"shaky",chorus:100,reverb:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:48,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo soprano",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2},{type:"peak",cutoffHz:1189.21,linearGain:5.6569},{type:"high-pass",cutoffHz:707.11,linearGain:2.8284},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:.25}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,86,43,14,14,57,71,57,14,14,14,14,14,43,57,43,14,14,14,14,14,14,14,0,0,0,0],unison:"none",envelopes:[]}},{name:"solo tenor",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"peak",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:707.11,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"high-pass",cutoffHz:297.3,linearGain:.7071},{type:"low-pass",cutoffHz:2828.43,linearGain:11.3137}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,harmonics:[86,100,100,86,71,57,43,29,29,29,29,43,43,43,29,29,29,29,29,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"solo bass",midiProgram:85,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:5.6569},{type:"peak",cutoffHz:594.6,linearGain:8},{type:"peak",cutoffHz:1681.79,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:840.9,linearGain:8},{type:"high-pass",cutoffHz:210.22,linearGain:1.4142}],effects:["vibrato","reverb"],vibrato:"shaky",reverb:33,transition:"normal",fadeInSeconds:.0263,fadeOutTicks:12,chord:"simultaneous",harmonics:[71,86,100,100,86,86,57,43,29,29,29,29,29,29,43,43,43,43,43,29,29,29,29,14,14,14,14,14],unison:"none",envelopes:[]}},{name:"voice ooh",midiProgram:53,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:57,filterEnvelope:"steady",interval:"union",vibrato:"shaky",harmonics:[100,57,43,43,14,14,0,0,0,14,29,29,14,0,14,29,29,14,0,0,0,0,0,0,0,0,0,0]}},{name:"voice synth",midiProgram:54,generalMidi:!0,settings:{type:"chip",transition:"medium fade",effects:"chorus & reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:57,filterEnvelope:"steady",wave:"rounded",interval:"union",vibrato:"light"}},{name:"vox synth lead",midiProgram:85,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"steady",vibrato:"light",algorithm:"(1 2 3)←4",feedbackType:"1→2→3→4",feedbackAmplitude:2,feedbackEnvelope:"punch",operators:[{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"9×",amplitude:5,envelope:"custom"},{frequency:"20×",amplitude:1,envelope:"custom"},{frequency:"~1×",amplitude:4,envelope:"steady"}]}},{name:"tiny robot",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"delayed",reverb:33,transition:"slide",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:2,operators:[{frequency:"2×",amplitude:15},{frequency:"1×",amplitude:7},{frequency:"~1×",amplitude:7},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:1},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"yowie",midiProgram:85,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,effects:["panning","note filter","reverb"],noteFilterType:!0,noteSimpleCut:6,noteSimplePeak:6,noteFilter:[{type:"low-pass",cutoffHz:2e3,linearGain:4}],pan:0,panDelay:10,reverb:0,fadeInSeconds:.0413,fadeOutTicks:6,algorithm:"1←2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:12,operators:[{frequency:"2×",amplitude:12,waveform:"sine",pulseWidth:5},{frequency:"16×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2,perEnvelopeLowerBound:.5,perEnvelopeUpperBound:1},{target:"feedbackAmplitude",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:1,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"mouse",midiProgram:85,settings:{type:"FM",eqFilter:[],effects:["vibrato","reverb"],vibrato:"light",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:5,operators:[{frequency:"2×",amplitude:13},{frequency:"5×",amplitude:12},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteVolume",envelope:"note size"},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"gumdrop",midiProgram:85,settings:{type:"FM",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:0,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:15,envelope:"punch"},{frequency:"4×",amplitude:15,envelope:"punch"},{frequency:"7×",amplitude:15,envelope:"punch"},{frequency:"1×",amplitude:10,envelope:"twang 1"}]}},{name:"echo drop",midiProgram:102,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"hard",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"~2×",amplitude:11,envelope:"custom"},{frequency:"~1×",amplitude:5,envelope:"steady"},{frequency:"11×",amplitude:2,envelope:"steady"},{frequency:"16×",amplitude:5,envelope:"swell 3"}]}},{name:"dark choir",midiProgram:85,settings:{type:"spectrum",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",spectrum:[43,14,14,14,14,14,14,100,14,14,14,57,14,14,100,14,43,14,43,14,14,43,14,29,14,29,14,14,29,0]}}])},{name:"Brass Presets",presets:w([{name:"trumpet",midiProgram:56,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:5,envelope:"flare 2"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"trombone",midiProgram:57,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:7,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"tuba",midiProgram:58,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3 4)",feedbackType:"2⟲",feedbackAmplitude:8,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"muted trumpet",midiProgram:59,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:2.8284},{type:"peak",cutoffHz:4e3,linearGain:2.8284}],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:13},{frequency:"1×",amplitude:5},{frequency:"9×",amplitude:5},{frequency:"13×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 1"},{target:"operatorAmplitude",envelope:"swell 1",index:3},{target:"feedbackAmplitude",envelope:"flare 2"}]}},{name:"french horn",midiProgram:60,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:1},{type:"peak",cutoffHz:2378.41,linearGain:2.8284}],effects:["reverb"],reverb:33,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:12},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:8}],envelopes:[{target:"operatorAmplitude",envelope:"swell 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"swell 1"}]}},{name:"brass section",midiProgram:61,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"punch",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"swell 1"},{frequency:"~1×",amplitude:10,envelope:"swell 1"}]}},{name:"brass synth 1",midiProgram:62,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:11,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:14,envelope:"custom"},{frequency:"1×",amplitude:12,envelope:"flare 1"},{frequency:"~1×",amplitude:8,envelope:"flare 2"}]}},{name:"brass synth 2",midiProgram:63,generalMidi:!0,settings:{type:"FM",transition:"soft",effects:"reverb",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"twang 3",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:9,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"flare 1"},{frequency:"~1×",amplitude:7,envelope:"flare 1"}]}},{name:"pulse brass",midiProgram:62,settings:{type:"PWM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 1",pulseWidth:50,pulseEnvelope:"flare 3",vibrato:"none"}}])},{name:"Reed Presets",presets:w([{name:"soprano sax",midiProgram:64,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"4⟲",feedbackAmplitude:5,feedbackEnvelope:"swell 1",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"4×",amplitude:4,envelope:"swell 1"},{frequency:"1×",amplitude:7,envelope:"steady"},{frequency:"5×",amplitude:4,envelope:"punch"}]}},{name:"alto sax",midiProgram:65,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:4,feedbackEnvelope:"punch",operators:[{frequency:"1×",amplitude:13,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"4×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:12,envelope:"steady"}]}},{name:"tenor sax",midiProgram:66,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"steady",vibrato:"none",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:6,feedbackEnvelope:"swell 1",operators:[{frequency:"2×",amplitude:12,envelope:"custom"},{frequency:"3×",amplitude:7,envelope:"steady"},{frequency:"1×",amplitude:3,envelope:"steady"},{frequency:"8×",amplitude:3,envelope:"steady"}]}},{name:"baritone sax",midiProgram:67,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"swell 2",operators:[{frequency:"1×",amplitude:12,envelope:"custom"},{frequency:"8×",amplitude:4,envelope:"steady"},{frequency:"4×",amplitude:5,envelope:"steady"},{frequency:"1×",amplitude:4,envelope:"punch"}]}},{name:"sax synth",midiProgram:64,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:4,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:15,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"shehnai",midiProgram:111,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:8e3,filterResonance:0,filterEnvelope:"steady",vibrato:"light",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:3,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"oboe",midiProgram:68,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 1",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"tremolo5",operators:[{frequency:"1×",amplitude:7,envelope:"custom"},{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:2,envelope:"steady"}]}},{name:"english horn",midiProgram:69,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2←(3 4)",feedbackType:"2⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"4×",amplitude:12,envelope:"custom"},{frequency:"2×",amplitude:10,envelope:"custom"},{frequency:"1×",amplitude:8,envelope:"punch"},{frequency:"8×",amplitude:4,envelope:"steady"}]}},{name:"bassoon",midiProgram:70,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:707,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:2,feedbackEnvelope:"steady",operators:[{frequency:"2×",amplitude:11,envelope:"custom"},{frequency:"1×",amplitude:6,envelope:"steady"},{frequency:"6×",amplitude:6,envelope:"swell 1"},{frequency:"1×",amplitude:0,envelope:"steady"}]}},{name:"clarinet",midiProgram:71,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}},{name:"harmonica",midiProgram:22,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,preset:778,effects:["panning","note filter","reverb"],noteFilterType:!0,noteSimpleCut:9,noteSimplePeak:2,noteFilter:[{type:"low-pass",cutoffHz:7231.23,linearGain:1}],noteSubFilters1:[{type:"low-pass",cutoffHz:7231.23,linearGain:1}],pan:0,panDelay:10,reverb:0,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:9,operators:[{frequency:"2×",amplitude:14,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:2,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2},{target:"feedbackAmplitude",envelope:"tremolo2",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}}])},{name:"Flute Presets",presets:w([{name:"flute 1",midiProgram:73,generalMidi:!0,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:9656.85,linearGain:.5}],eqFilterType:!0,eqSimpleCut:9,eqSimplePeak:1,envelopeSpeed:12,discreteEnvelope:!1,preset:832,eqSubFilters1:[],effects:["panning","reverb"],pan:0,panDelay:10,reverb:0,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3 4)",feedbackType:"4⟲",feedbackAmplitude:7,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:4,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:3,waveform:"sine",pulseWidth:5},{frequency:"~1×",amplitude:1,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorAmplitude",envelope:"punch",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"feedbackAmplitude",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:7,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"recorder",midiProgram:74,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:29,filterEnvelope:"swell 2",interval:"union",vibrato:"none",harmonics:[100,43,57,43,57,43,43,43,43,43,43,43,43,29,29,29,29,29,29,29,14,14,14,14,14,14,14,0]}},{name:"whistle",midiProgram:78,generalMidi:!0,settings:{type:"harmonics",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:2e3,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"ocarina",midiProgram:79,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"steady",interval:"union",vibrato:"none",harmonics:[100,14,57,14,29,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{name:"piccolo",midiProgram:72,generalMidi:!0,settings:{type:"FM",effects:"reverb",transition:"soft",chord:"harmony",filterCutoffHz:5657,filterResonance:43,filterEnvelope:"steady",vibrato:"none",algorithm:"1←3 2←4",feedbackType:"4⟲",feedbackAmplitude:15,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"1×",amplitude:10,envelope:"custom"},{frequency:"~2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:5,envelope:"punch"}]}},{name:"shakuhachi",midiProgram:77,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"steady",vibrato:"delayed",algorithm:"1←(2 3←4)",feedbackType:"3→4",feedbackAmplitude:15,feedbackEnvelope:"steady",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"2×",amplitude:3,envelope:"punch"},{frequency:"~1×",amplitude:4,envelope:"twang 1"},{frequency:"20×",amplitude:15,envelope:"steady"}]}},{name:"pan flute",midiProgram:75,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:5.6569}],effects:["note filter","reverb"],noteFilter:[{type:"high-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,fadeInSeconds:.0125,fadeOutTicks:-3,spectrum:[100,0,0,0,0,0,0,14,0,0,0,71,0,0,14,0,57,0,29,14,29,14,14,29,14,29,14,14,29,14],envelopes:[{target:"noteFilterFreq",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"punch"}]}},{name:"blown bottle",midiProgram:76,generalMidi:!0,settings:{type:"FM",effects:"chorus & reverb",transition:"cross fade",chord:"harmony",filterCutoffHz:5657,filterResonance:57,filterEnvelope:"steady",vibrato:"none",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:7,feedbackEnvelope:"twang 1",operators:[{frequency:"1×",amplitude:15,envelope:"custom"},{frequency:"3×",amplitude:4,envelope:"custom"},{frequency:"6×",amplitude:2,envelope:"custom"},{frequency:"11×",amplitude:2,envelope:"custom"}]}},{name:"calliope",midiProgram:82,generalMidi:!0,settings:{type:"spectrum",transition:"cross fade",effects:"reverb",chord:"harmony",filterCutoffHz:5657,filterResonance:14,filterEnvelope:"steady",spectrum:[100,0,0,0,0,0,0,86,0,0,0,71,0,0,57,0,43,0,29,14,14,29,14,14,14,14,14,14,14,14]}},{name:"chiffer",midiProgram:83,generalMidi:!0,settings:{type:"spectrum",effects:"reverb",transition:"hard",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"punch",spectrum:[86,0,0,0,0,0,0,71,0,0,0,71,0,0,57,0,57,0,43,14,14,43,14,29,14,29,29,29,29,14]}},{name:"breath noise",midiProgram:121,generalMidi:!0,settings:{type:"spectrum",eqFilter:[],effects:["chord type","note filter","reverb"],chord:"strum",noteFilter:[{type:"high-pass",cutoffHz:840.9,linearGain:.3536},{type:"low-pass",cutoffHz:16e3,linearGain:.3536}],reverb:33,fadeInSeconds:.0413,fadeOutTicks:12,spectrum:[71,0,0,0,0,0,0,29,0,0,0,71,0,0,29,0,100,29,14,29,100,29,100,14,14,71,0,29,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"}]}},{name:"flute 2",midiProgram:73,generalMidi:!0,settings:{type:"harmonics",effects:"reverb",transition:"seamless",chord:"harmony",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"steady",interval:"union",vibrato:"delayed",harmonics:[100,43,86,57,86,71,86,71,71,71,71,71,71,43,71,71,57,57,57,57,57,57,43,43,43,29,14,0]}}])},{name:"Pad Presets",presets:w([{name:"new age pad",midiProgram:88,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲ 2⟲",feedbackAmplitude:3,operators:[{frequency:"2×",amplitude:14},{frequency:"~1×",amplitude:4},{frequency:"6×",amplitude:3},{frequency:"13×",amplitude:3}],envelopes:[{target:"operatorAmplitude",envelope:"swell 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"feedbackAmplitude",envelope:"swell 3"}]}},{name:"warm pad",midiProgram:89,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:7,operators:[{frequency:"1×",amplitude:14},{frequency:"1×",amplitude:6},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"},{target:"operatorAmplitude",envelope:"swell 1",index:1}]}},{name:"polysynth pad",midiProgram:90,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"honky tonk",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"space voice pad",midiProgram:91,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569},{type:"peak",cutoffHz:2828.43,linearGain:5.6569},{type:"peak",cutoffHz:1414.21,linearGain:.1768}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:8},{frequency:"3×",amplitude:7},{frequency:"11×",amplitude:2}],envelopes:[{target:"operatorAmplitude",envelope:"punch",index:3},{target:"feedbackAmplitude",envelope:"swell 2"}]}},{name:"bowed glass pad",midiProgram:92,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:10},{frequency:"2×",amplitude:12},{frequency:"3×",amplitude:7},{frequency:"7×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"flare 3",index:3}]}},{name:"metallic pad",midiProgram:93,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:13,operators:[{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:9},{frequency:"1×",amplitude:7},{frequency:"11×",amplitude:7}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"swell 2",index:2},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"sweep pad",midiProgram:95,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",wave:"sawtooth",unison:"hum",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"atmosphere",midiProgram:99,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],effects:["chorus","reverb"],chorus:100,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"strum",algorithm:"1←(2 3 4)",feedbackType:"3⟲ 4⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:14},{frequency:"~1×",amplitude:10},{frequency:"3×",amplitude:7},{frequency:"1×",amplitude:7}],envelopes:[{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"twang 2",index:2},{target:"operatorAmplitude",envelope:"twang 3",index:3}]}},{name:"brightness",midiProgram:100,generalMidi:!0,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:2}],effects:["chorus"],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",harmonics:[100,86,86,86,43,57,43,71,43,43,43,57,43,43,57,71,57,43,29,43,57,57,43,29,29,29,29,14],unison:"octave",stringSustain:86,envelopes:[]}},{name:"goblins",midiProgram:101,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2828.43,linearGain:11.3137}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"simultaneous",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:10,operators:[{frequency:"1×",amplitude:15},{frequency:"4×",amplitude:5},{frequency:"1×",amplitude:10},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 2"},{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"feedbackAmplitude",envelope:"flare 3"}]}},{name:"sci-fi",midiProgram:103,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:9513.66,linearGain:2.8284}],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←3←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"~1×",amplitude:13},{frequency:"2×",amplitude:10},{frequency:"5×",amplitude:5},{frequency:"11×",amplitude:8}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"tremolo5",index:3},{target:"feedbackAmplitude",envelope:"twang 3"}]}},{name:"flutter pad",midiProgram:90,settings:{type:"FM",eqFilter:[],effects:["vibrato","note filter","chorus"],vibrato:"delayed",noteFilter:[{type:"low-pass",cutoffHz:4e3,linearGain:4}],chorus:100,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",algorithm:"(1 2)←(3 4)",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:9,operators:[{frequency:"1×",amplitude:13},{frequency:"5×",amplitude:7},{frequency:"7×",amplitude:5},{frequency:"~1×",amplitude:6}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"},{target:"operatorAmplitude",envelope:"tremolo1",index:2},{target:"operatorAmplitude",envelope:"punch",index:3}]}},{name:"feedback pad",midiProgram:89,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:2378.41,linearGain:8}],effects:[],transition:"normal",fadeInSeconds:.0575,fadeOutTicks:96,chord:"custom interval",algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:8,operators:[{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"1×",amplitude:15},{frequency:"~1×",amplitude:15}],envelopes:[{target:"feedbackAmplitude",envelope:"swell 2"}]}},{name:"supersaw pad",midiProgram:93,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.1768}],effects:["reverb"],reverb:100,fadeInSeconds:.0263,fadeOutTicks:24,pulseWidth:50,dynamism:100,spread:58,shape:0,envelopes:[]}}])},{name:"Drum Presets",presets:w([{name:"standard drumset",midiProgram:116,isNoise:!0,settings:{type:"drumset",effects:"reverb",drums:[{filterEnvelope:"twang 1",spectrum:[57,71,71,86,86,86,71,71,71,71,57,57,57,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29,29]},{filterEnvelope:"twang 1",spectrum:[0,0,0,100,71,71,57,86,57,57,57,71,43,43,57,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,100,57,43,43,29,57,43,29,71,43,43,43,43,57,43,43,43,43,43,43,43,43,29,43,43,43]},{filterEnvelope:"twang 1",spectrum:[0,0,0,0,0,71,57,43,43,43,57,57,43,29,57,43,43,43,29,43,57,43,43,43,43,43,43,29,43,43]},{filterEnvelope:"decay 2",spectrum:[0,14,29,43,86,71,29,43,43,43,43,29,71,29,71,29,43,43,43,43,57,43,43,57,43,43,43,57,57,57]},{filterEnvelope:"decay 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,57,71,71,71,71,71,71,71,71,57,57,57,57,43,43,43]},{filterEnvelope:"twang 3",spectrum:[43,43,43,71,29,29,43,43,43,29,43,43,43,29,29,43,43,29,29,29,57,14,57,43,43,57,43,43,57,57]},{filterEnvelope:"decay 3",spectrum:[29,43,43,43,43,29,29,43,29,29,43,29,14,29,43,29,43,29,57,29,43,57,43,71,43,71,57,57,71,71]},{filterEnvelope:"twang 3",spectrum:[43,29,29,43,29,29,29,57,29,29,29,57,43,43,29,29,57,43,43,43,71,43,43,71,57,71,71,71,71,71]},{filterEnvelope:"decay 3",spectrum:[57,57,57,43,57,57,43,43,57,43,43,43,71,57,43,57,86,71,57,86,71,57,86,100,71,86,86,86,86,86]},{filterEnvelope:"flare 1",spectrum:[0,0,14,14,14,14,29,29,29,43,43,43,57,57,71,71,86,86,100,100,100,100,100,100,100,100,86,57,29,0]},{filterEnvelope:"decay 2",spectrum:[14,14,14,14,29,14,14,29,14,43,14,43,57,86,57,57,100,57,43,43,57,100,57,43,29,14,0,0,0,0]}]}},{name:"steel pan",midiProgram:114,generalMidi:!0,settings:{type:"FM",eqFilter:[{type:"high-pass",cutoffHz:62.5,linearGain:.1768}],effects:["note filter","chorus","reverb"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],chorus:67,reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:24,chord:"simultaneous",algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"~1×",amplitude:14},{frequency:"7×",amplitude:3},{frequency:"3×",amplitude:5},{frequency:"4×",amplitude:4}],envelopes:[{target:"noteFilterAllFreqs",envelope:"decay 2"},{target:"operatorAmplitude",envelope:"flare 1",index:1},{target:"operatorAmplitude",envelope:"flare 2",index:2},{target:"operatorAmplitude",envelope:"swell 2",index:3}]}},{name:"steel pan synth",midiProgram:114,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"simultaneous",algorithm:"1 2 3←4",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"~1×",amplitude:12},{frequency:"2×",amplitude:15},{frequency:"4×",amplitude:14},{frequency:"~1×",amplitude:3}],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"operatorAmplitude",envelope:"note size",index:0},{target:"operatorAmplitude",envelope:"note size",index:1},{target:"operatorAmplitude",envelope:"flare 1",index:2},{target:"operatorAmplitude",envelope:"flare 2",index:3},{target:"feedbackAmplitude",envelope:"flare 1"}]}},{name:"timpani",midiProgram:47,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"peak",cutoffHz:6727.17,linearGain:5.6569}],effects:["pitch shift","note filter","reverb"],pitchShiftSemitones:15,noteFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[100,0,0,0,86,0,0,71,0,14,43,14,43,43,0,29,43,29,29,29,43,29,43,29,43,43,43,43,43,43],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 1"},{target:"pitchShift",envelope:"twang 1"}]}},{name:"dark strike",midiProgram:47,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.7071}],reverb:33,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",spectrum:[0,0,14,14,14,29,29,43,43,86,43,43,43,29,86,29,29,29,86,29,14,14,14,14,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}},{name:"woodblock",midiProgram:115,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:14,filterEnvelope:"twang 1",spectrum:[0,14,29,43,43,57,86,86,71,57,57,43,43,57,86,86,43,43,71,57,57,57,57,57,86,86,71,71,71,71]}},{name:"taiko drum",midiProgram:116,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:29,filterEnvelope:"twang 1",spectrum:[71,100,100,43,43,71,71,43,43,43,43,43,43,57,29,57,43,57,43,43,57,43,43,43,43,43,43,43,43,43]}},{name:"melodic drum",midiProgram:117,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2828,filterResonance:43,filterEnvelope:"twang 1",spectrum:[100,71,71,57,57,43,43,71,43,43,43,57,43,43,57,43,43,43,43,29,29,29,29,29,29,29,29,29,29,29]}},{name:"drum synth",midiProgram:118,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:4e3,filterResonance:43,filterEnvelope:"decay 1",spectrum:[100,86,71,57,43,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29]}},{name:"tom-tom",midiProgram:116,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"twang 1",spectrum:[100,29,14,0,0,86,14,43,29,86,29,14,29,57,43,43,43,43,57,43,43,43,29,57,43,43,43,43,43,43]}},{name:"metal pipe",midiProgram:117,isNoise:!0,midiSubharmonicOctaves:-1.5,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:8e3,filterResonance:14,filterEnvelope:"twang 2",spectrum:[29,43,86,43,43,43,43,43,100,29,14,14,100,14,14,0,0,0,0,0,14,29,29,14,0,0,14,29,0,0]}},{name:"synth kick",midiProgram:47,settings:{type:"FM",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-6,chord:"simultaneous",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"8×",amplitude:15},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0},{frequency:"1×",amplitude:0}],envelopes:[{target:"operatorFrequency",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"twang 2"}]}}])},{name:"Novelty Presets",presets:w([{name:"guitar fret noise",midiProgram:120,generalMidi:!0,settings:{type:"spectrum",eqFilter:[{type:"high-pass",cutoffHz:1e3,linearGain:.1768}],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:5.6569}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",spectrum:[0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,29,14,0,0,43,0,43,0,71,43,0,57,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"},{target:"noteVolume",envelope:"twang 2"}]}},{name:"fifth saw lead",midiProgram:86,generalMidi:!0,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:1.4142}],chorus:67,transition:"normal",fadeInSeconds:0,fadeOutTicks:48,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 3"}]}},{name:"fifth swell",midiProgram:86,midiSubharmonicOctaves:1,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2e3,linearGain:2}],chorus:100,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"swell 3"}]}},{name:"soundtrack",midiProgram:97,generalMidi:!0,settings:{type:"chip",eqFilter:[],effects:["note filter","chorus"],noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],chorus:67,transition:"normal",fadeInSeconds:.0413,fadeOutTicks:72,chord:"simultaneous",wave:"sawtooth",unison:"fifth",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 3"}]}},{name:"reverse cymbal",midiProgram:119,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"none",transition:"soft",chord:"harmony",filterCutoffHz:4e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[29,57,57,29,57,57,29,29,43,29,29,43,29,29,57,57,14,57,14,57,71,71,57,86,57,100,86,86,86,86]}},{name:"seashore",midiProgram:122,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",transition:"soft fade",effects:"reverb",chord:"harmony",filterCutoffHz:2828,filterResonance:0,filterEnvelope:"swell 3",spectrum:[14,14,29,29,43,43,43,57,57,57,57,57,57,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,57]}},{name:"bird tweet",midiProgram:123,generalMidi:!0,settings:{type:"harmonics",eqFilter:[],effects:["chord type","vibrato","reverb"],chord:"strum",vibrato:"heavy",reverb:67,fadeInSeconds:.0575,fadeOutTicks:-6,harmonics:[0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"hum",envelopes:[{target:"noteVolume",envelope:"decay 1"}]}},{name:"telephone ring",midiProgram:124,generalMidi:!0,settings:{type:"FM",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:5656.85,linearGain:1}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"arpeggio",algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:12},{frequency:"1×",amplitude:4},{frequency:"20×",amplitude:1},{frequency:"1×",amplitude:0}],envelopes:[{target:"noteFilterAllFreqs",envelope:"tremolo4"},{target:"operatorAmplitude",envelope:"tremolo1",index:1}]}},{name:"helicopter",midiProgram:125,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-.5,settings:{type:"spectrum",effects:"reverb",transition:"seamless",chord:"arpeggio",filterCutoffHz:1414,filterResonance:14,filterEnvelope:"tremolo4",spectrum:[14,43,43,57,57,57,71,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,71,71,71,57,57]}},{name:"applause",midiProgram:126,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-3,settings:{type:"spectrum",effects:"reverb",transition:"soft fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 3",spectrum:[14,14,29,29,29,43,43,57,71,71,86,86,86,71,71,57,57,57,71,86,86,86,86,86,71,71,57,57,57,57]}},{name:"gunshot",midiProgram:127,generalMidi:!0,isNoise:!0,midiSubharmonicOctaves:-2,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"strum",filterCutoffHz:1414,filterResonance:29,filterEnvelope:"twang 1",spectrum:[14,29,43,43,57,57,57,71,71,71,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,57,57,57,57,43]}},{name:"scoot",midiProgram:92,settings:{type:"chip",eqFilter:[],effects:["note filter"],noteFilter:[{type:"low-pass",cutoffHz:707.11,linearGain:4}],transition:"normal",fadeInSeconds:.0125,fadeOutTicks:-3,chord:"simultaneous",wave:"double saw",unison:"shimmer",envelopes:[{target:"noteFilterAllFreqs",envelope:"flare 1"}]}},{name:"buzz saw",midiProgram:30,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],effects:[],transition:"normal",fadeInSeconds:.0263,fadeOutTicks:-3,chord:"custom interval",algorithm:"1←2←3←4",feedbackType:"1⟲",feedbackAmplitude:4,operators:[{frequency:"5×",amplitude:13},{frequency:"1×",amplitude:10},{frequency:"~1×",amplitude:6},{frequency:"11×",amplitude:12}],envelopes:[]}},{name:"mosquito",midiProgram:93,settings:{type:"PWM",eqFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:2}],effects:["vibrato"],vibrato:"shaky",transition:"normal",fadeInSeconds:.0575,fadeOutTicks:-6,chord:"simultaneous",pulseWidth:4.41942,envelopes:[{target:"pulseWidth",envelope:"tremolo6"}]}},{name:"breathing",midiProgram:126,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"spectrum",effects:"reverb",transition:"hard fade",chord:"harmony",filterCutoffHz:2e3,filterResonance:14,filterEnvelope:"swell 2",spectrum:[14,14,14,29,29,29,29,29,43,29,29,43,43,43,29,29,71,43,86,86,57,100,86,86,86,86,71,86,71,57]}},{name:"klaxon synth",midiProgram:125,isNoise:!0,midiSubharmonicOctaves:-1,settings:{type:"noise",effects:"reverb",transition:"slide",chord:"harmony",filterCutoffHz:2e3,filterResonance:86,filterEnvelope:"steady",wave:"buzz"}},{name:"theremin",midiProgram:40,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.7071}],effects:["vibrato","reverb"],vibrato:"heavy",reverb:33,transition:"slide in pattern",fadeInSeconds:.0263,fadeOutTicks:-6,chord:"simultaneous",harmonics:[100,71,57,43,29,29,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],unison:"none",envelopes:[]}},{name:"sonar ping",midiProgram:121,settings:{type:"spectrum",eqFilter:[],effects:["note filter","reverb"],noteFilter:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],reverb:33,transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72,chord:"simultaneous",spectrum:[100,43,29,29,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],envelopes:[{target:"noteFilterAllFreqs",envelope:"twang 2"}]}}])},{name:"UltraBox Presets",presets:w([{name:"nes white",midiProgram:116,generalMidi:!0,isNoise:!0,settings:{type:"noise",eqFilter:[],eqFilterType:!1,eqSimpleCut:8,eqSimplePeak:0,eqSubFilters1:[],effects:["panning"],pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:0,wave:"1-bit white",envelopes:[]}},{name:"nes ping",midiProgram:116,generalMidi:!0,isNoise:!0,settings:{type:"noise",eqFilter:[],eqFilterType:!1,eqSimpleCut:8,eqSimplePeak:0,eqSubFilters1:[],effects:["panning"],pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:0,wave:"1-bit metallic",envelopes:[]}},{name:"distorted pulse vocal",generalMidi:!1,settings:{type:"chip",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[{type:"low-pass",cutoffHz:19027.31,linearGain:.0884}],effects:["panning","transition type","pitch shift","vibrato","note filter","bitcrusher","echo","reverb"],transition:"normal",clicklessTransition:!1,pitchShiftSemitones:0,vibrato:"delayed",vibratoDepth:.3,vibratoDelay:18.5,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"high-pass",cutoffHz:840.9,linearGain:11.3137},{type:"low-pass",cutoffHz:297.3,linearGain:8},{type:"peak",cutoffHz:500,linearGain:11.3137},{type:"high-pass",cutoffHz:62.5,linearGain:1.4142},{type:"peak",cutoffHz:176.78,linearGain:11.3137},{type:"high-pass",cutoffHz:250,linearGain:11.3137}],noteSubFilters0:[{type:"high-pass",cutoffHz:840.9,linearGain:11.3137},{type:"low-pass",cutoffHz:297.3,linearGain:8},{type:"peak",cutoffHz:500,linearGain:11.3137},{type:"high-pass",cutoffHz:62.5,linearGain:1.4142},{type:"peak",cutoffHz:176.78,linearGain:11.3137},{type:"high-pass",cutoffHz:250,linearGain:11.3137}],bitcrusherOctave:6.5,bitcrusherQuantization:71,pan:0,panDelay:10,echoSustain:14,echoDelayBeats:.167,reverb:0,fadeInSeconds:0,fadeOutTicks:-3,wave:"1/8 pulse",unison:"none",envelopes:[]}},{name:"dubsteb bwah",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.7071}],eqFilterType:!0,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters1:[],effects:["panning","transition type","chord type"],transition:"interrupt",clicklessTransition:!1,chord:"custom interval",fastTwoNoteArp:!1,arpeggioSpeed:12,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:10,operators:[{frequency:"2×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:11,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:13,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteVolume",envelope:"note size"},{target:"operatorAmplitude",envelope:"swell 2",index:1},{target:"operatorAmplitude",envelope:"punch",index:2},{target:"operatorAmplitude",envelope:"note size",index:3}]}},{name:"FM cool bass",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:1},{type:"high-pass",cutoffHz:88.39,linearGain:1},{type:"peak",cutoffHz:1e3,linearGain:.7071}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:1},{type:"high-pass",cutoffHz:88.39,linearGain:1},{type:"peak",cutoffHz:1e3,linearGain:.7071}],effects:["panning","transition type","note filter","reverb"],transition:"interrupt",clicklessTransition:!1,noteFilterType:!0,noteSimpleCut:9,noteSimplePeak:2,noteFilter:[{type:"low-pass",cutoffHz:7231.23,linearGain:1}],noteSubFilters1:[{type:"low-pass",cutoffHz:7231.23,linearGain:1}],pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1←(2 3←4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"2×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:7,waveform:"sine",pulseWidth:5},{frequency:"13×",amplitude:11,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"punch"},{target:"operatorAmplitude",envelope:"twang 2",index:1},{target:"operatorAmplitude",envelope:"twang 3",index:2},{target:"operatorAmplitude",envelope:"twang 2",index:3}]}},{name:"FM funky bass",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:.1768}],eqFilterType:!0,eqSimpleCut:5,eqSimplePeak:0,eqSubFilters1:[],effects:["panning","transition type","reverb"],transition:"normal",clicklessTransition:!1,pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:-3,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"~1×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteVolume",envelope:"punch"},{target:"noteVolume",envelope:"note size"}]}},{name:"talking bass",generalMidi:!1,settings:{type:"FM",eqFilter:[],effects:["chord type"],chord:"custom interval",fadeInSeconds:0,fadeOutTicks:-3,algorithm:"1←(2 3)←4",feedbackType:"1⟲",feedbackAmplitude:15,operators:[{frequency:"1×",amplitude:15},{frequency:"2×",amplitude:8},{frequency:"2×",amplitude:5},{frequency:"1×",amplitude:12}],envelopes:[{target:"operatorAmplitude",envelope:"note size",index:2},{target:"operatorAmplitude",envelope:"note size",index:3},{target:"feedbackAmplitude",envelope:"note size"}]}},{name:"synth marimba",generalMidi:!1,settings:{type:"Picked String",eqFilter:[{type:"high-pass",cutoffHz:176.78,linearGain:1},{type:"peak",cutoffHz:4e3,linearGain:.5}],effects:["note filter","echo"],noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:1.4142}],echoSustain:71,echoDelayBeats:.5,fadeInSeconds:0,fadeOutTicks:-1,harmonics:[86,100,29,29,0,0,0,100,0,0,0,86,29,0,14,100,0,0,0,0,0,14,0,0,14,0,0,86],unison:"fifth",stringSustain:7,envelopes:[{target:"noteFilterAllFreqs",envelope:"punch"}]}},{name:"italian accordian",generalMidi:!1,settings:{type:"custom chip",eqFilter:[{type:"low-pass",cutoffHz:6e3,linearGain:.5}],eqFilterType:!0,eqSimpleCut:8,eqSimplePeak:1,eqSubFilters1:[],effects:["panning","chorus","reverb"],pan:0,panDelay:10,chorus:71,reverb:45,fadeInSeconds:.0263,fadeOutTicks:-3,wave:"square",unison:"honky tonk",customChipWave:{0:-24,1:-24,2:-24,3:-24,4:-24,5:-24,6:-24,7:-24,8:-24,9:-24,10:-24,11:-24,12:-24,13:-24,14:-24,15:-24,16:24,17:24,18:24,19:24,20:24,21:24,22:24,23:24,24:-24,25:-24,26:-24,27:-24,28:-24,29:-24,30:-24,31:-24,32:-24,33:-24,34:-24,35:-24,36:-24,37:-24,38:-24,39:-24,40:24,41:24,42:24,43:24,44:24,45:24,46:24,47:24,48:-24,49:-24,50:-24,51:-24,52:-24,53:-24,54:-24,55:-24,56:-24,57:-24,58:-24,59:-24,60:-24,61:-24,62:-24,63:-24},customChipWaveIntegral:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0},envelopes:[]}},{name:"chip supersaw",generalMidi:!1,settings:{type:"custom chip",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.7071}],eqFilterType:!0,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters1:[],effects:["panning","transition type","vibrato","chorus","reverb"],transition:"interrupt",clicklessTransition:!1,vibrato:"delayed",vibratoDepth:.3,vibratoDelay:18.5,vibratoSpeed:10,vibratoType:0,pan:0,panDelay:10,chorus:29,reverb:29,fadeInSeconds:0,fadeOutTicks:-1,wave:"square",unison:"dissonant",customChipWave:{0:22,1:22,2:16,3:6,4:0,5:-3,6:-8,7:-10,8:-13,9:-16,10:-19,11:-19,12:-20,13:-22,14:-22,15:-24,16:-24,17:-24,18:-24,19:-24,20:-24,21:-24,22:-24,23:-24,24:-24,25:-24,26:-24,27:-24,28:-24,29:-24,30:-24,31:24,32:24,33:16,34:9,35:6,36:4,37:2,38:0,39:-1,40:-3,41:-4,42:-4,43:-6,44:-6,45:-6,46:-6,47:-5,48:-5,49:-4,50:-2,51:-2,52:1,53:4,54:6,55:8,56:10,57:12,58:14,59:16,60:18,61:19,62:22,63:24},customChipWaveIntegral:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0},envelopes:[]}},{name:"fm supersaw",generalMidi:!1,settings:{type:"FM6op",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:1.4142},{type:"high-pass",cutoffHz:148.65,linearGain:.7071}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[{type:"low-pass",cutoffHz:19027.31,linearGain:1.4142},{type:"high-pass",cutoffHz:148.65,linearGain:.7071}],effects:["panning","transition type","pitch shift","note filter","chorus","reverb"],transition:"continue",clicklessTransition:!1,pitchShiftSemitones:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[],noteSubFilters0:[],noteSubFilters1:[{type:"low-pass",cutoffHz:4756.83,linearGain:1}],pan:0,panDelay:10,chorus:71,reverb:0,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1 2 3 4 5 6",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:13,waveform:"sawtooth",pulseWidth:5},{frequency:"~1×",amplitude:15,waveform:"sawtooth",pulseWidth:5},{frequency:"2×",amplitude:10,waveform:"sawtooth",pulseWidth:5},{frequency:"3×",amplitude:7,waveform:"sawtooth",pulseWidth:5},{frequency:"4×",amplitude:9,waveform:"sawtooth",pulseWidth:5},{frequency:"8×",amplitude:6,waveform:"sawtooth",pulseWidth:5}],envelopes:[]}},{name:"wind",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:250.03,linearGain:11.3137}],eqFilterType:!0,eqSimpleCut:0,eqSimplePeak:7,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["transition type","reverb"],transition:"continue",clicklessTransition:!1,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1←(2 3 4)",feedbackType:"1→3 2→4",feedbackAmplitude:15,operators:[{frequency:"16×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"16×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"16×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"16×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[]}},{name:"mrow",generalMidi:!1,settings:{type:"FM",eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,eqSubFilters0:[],effects:["panning","chord type","reverb"],chord:"custom interval",fastTwoNoteArp:!1,arpeggioSpeed:12,pan:0,panDelay:10,reverb:35,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←3 2←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:5,operators:[{frequency:"4×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:13,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:9,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorAmplitude",envelope:"flare 1",index:0},{target:"operatorAmplitude",envelope:"note size",index:1},{target:"operatorAmplitude",envelope:"note size",index:2},{target:"operatorAmplitude",envelope:"flare 3",index:3},{target:"feedbackAmplitude",envelope:"flare 1"}]}},{name:"vocal why",generalMidi:!1,settings:{type:"harmonics",eqFilter:[],effects:["note filter","panning","reverb"],noteFilter:[{type:"low-pass",cutoffHz:840.9,linearGain:11.3137}],pan:0,reverb:0,fadeInSeconds:.0263,fadeOutTicks:-3,harmonics:[100,86,29,29,14,14,0,14,14,43,71,100,100,86,71,71,57,57,43,43,43,43,43,0,0,0,0,0],unison:"octave",envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"}]}}])},{name:"Slarmoo's Box Presets",presets:w([{name:"radio fm",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:1189.21,linearGain:1.4142},{type:"high-pass",cutoffHz:74.33,linearGain:.3536}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:1189.21,linearGain:1.4142},{type:"high-pass",cutoffHz:74.33,linearGain:.3536}],effects:["panning","detune","vibrato","bitcrusher","reverb"],detuneCents:0,vibrato:"none",vibratoDepth:0,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,bitcrusherOctave:6.5,bitcrusherQuantization:43,pan:0,panDelay:10,reverb:0,fadeInSeconds:0,fadeOutTicks:6,algorithm:"1 2 3 4",feedbackType:"1⟲ 2⟲",feedbackAmplitude:4,operators:[{frequency:"1×",amplitude:13,waveform:"sine",pulseWidth:5},{frequency:"0.12×",amplitude:7,waveform:"trapezoid",pulseWidth:5},{frequency:"0.5×",amplitude:10,waveform:"triangle",pulseWidth:5},{frequency:"~1×",amplitude:5,waveform:"triangle",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"anguished underworld",generalMidi:!1,settings:{type:"FM6op",eqFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.0884},{type:"high-pass",cutoffHz:148.65,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:13454.34,linearGain:.0884},{type:"high-pass",cutoffHz:148.65,linearGain:.5}],effects:["panning","note filter","distortion","bitcrusher","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:2828.43,linearGain:.0884},{type:"high-pass",cutoffHz:420.45,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2}],noteSubFilters0:[{type:"low-pass",cutoffHz:2828.43,linearGain:.0884},{type:"high-pass",cutoffHz:420.45,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2}],noteSubFilters1:[{type:"low-pass",cutoffHz:1681.79,linearGain:.5}],distortion:43,aliases:!1,bitcrusherOctave:4.5,bitcrusherQuantization:43,pan:0,panDelay:10,reverb:0,fadeInSeconds:.075,fadeOutTicks:6,algorithm:"1 2←4 3←(5 6)",feedbackType:"1→5 2→6 3→4",feedbackAmplitude:4,operators:[{frequency:"0.25×",amplitude:14,waveform:"triangle",pulseWidth:5},{frequency:"0.5×",amplitude:13,waveform:"sawtooth",pulseWidth:5},{frequency:"1×",amplitude:12,waveform:"trapezoid",pulseWidth:5},{frequency:"8×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"0.75×",amplitude:3,waveform:"ramp",pulseWidth:5}],envelopes:[{target:"noteFilterAllFreqs",envelope:"punch"},{target:"operatorAmplitude",envelope:"decay -1",index:5},{target:"feedbackAmplitude",envelope:"wibble 3"}],isDrum:!1}},{name:"faint sorrow",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:4240.89,linearGain:2}],eqFilterType:!0,eqSimpleCut:8,eqSimplePeak:4,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","detune","vibrato","echo","reverb"],detuneCents:22,vibrato:"light",vibratoDepth:.15,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,pan:0,panDelay:10,echoSustain:100,echoDelayBeats:.667,reverb:87,fadeInSeconds:.075,fadeOutTicks:48,algorithm:"1 2 3 4",feedbackType:"1⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"~1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"~1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"bright sorrow fm",generalMidi:!1,settings:{type:"FM",eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[],effects:["panning","chord type","note filter","echo","reverb"],chord:"strum",fastTwoNoteArp:!1,arpeggioSpeed:12,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:2e3,linearGain:2.8284}],noteSubFilters0:[{type:"low-pass",cutoffHz:2e3,linearGain:2.8284}],noteSubFilters1:[{type:"low-pass",cutoffHz:1414.21,linearGain:1.4142}],pan:0,panDelay:10,echoSustain:71,echoDelayBeats:1.333,reverb:61,fadeInSeconds:0,fadeOutTicks:48,algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲",feedbackAmplitude:2,operators:[{frequency:"1×",amplitude:13,waveform:"sine",pulseWidth:5},{frequency:"5×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"5×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:7,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"wet sorrow fm",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.7071}],eqFilterType:!0,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","vibrato","reverb"],vibrato:"light",vibratoDepth:.15,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,pan:0,panDelay:10,reverb:23,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:4,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:3,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:2,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorAmplitude",envelope:"decay 3",index:2}],isDrum:!1}},{name:"scream fm",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:2},{type:"high-pass",cutoffHz:250,linearGain:.0884},{type:"peak",cutoffHz:1189.21,linearGain:.3536},{type:"peak",cutoffHz:707.11,linearGain:.125},{type:"peak",cutoffHz:353.55,linearGain:.7071}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:8e3,linearGain:2},{type:"high-pass",cutoffHz:250,linearGain:.0884},{type:"peak",cutoffHz:1189.21,linearGain:.3536},{type:"peak",cutoffHz:707.11,linearGain:.125},{type:"peak",cutoffHz:353.55,linearGain:.7071}],effects:["panning","detune","note filter","distortion","reverb"],detuneCents:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"high-pass",cutoffHz:1681.79,linearGain:.125},{type:"low-pass",cutoffHz:19027.31,linearGain:.0884},{type:"peak",cutoffHz:2e3,linearGain:11.3137}],noteSubFilters0:[{type:"high-pass",cutoffHz:1681.79,linearGain:.125},{type:"low-pass",cutoffHz:19027.31,linearGain:.0884},{type:"peak",cutoffHz:2e3,linearGain:11.3137}],distortion:0,aliases:!1,pan:0,panDelay:10,reverb:87,fadeInSeconds:.135,fadeOutTicks:-3,algorithm:"(1 2 3)←4",feedbackType:"1⟲ 2⟲ 3⟲ 4⟲",feedbackAmplitude:11,operators:[{frequency:"4×",amplitude:13,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:3,waveform:"sine",pulseWidth:5},{frequency:"7×",amplitude:5,waveform:"triangle",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"detune",envelope:"swell 1"},{target:"feedbackAmplitude",envelope:"tremolo4"}],isDrum:!1}},{name:"anguished radio fm pad",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.0884},{type:"peak",cutoffHz:9513.66,linearGain:4},{type:"peak",cutoffHz:353.55,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:62.5,linearGain:.0884},{type:"peak",cutoffHz:9513.66,linearGain:4},{type:"peak",cutoffHz:353.55,linearGain:.0884}],eqSubFilters4:[],effects:["panning","detune","note filter","bitcrusher","chorus","echo","reverb"],detuneCents:-16,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[],noteSubFilters0:[],noteSubFilters1:[{type:"low-pass",cutoffHz:19027.31,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884},{type:"peak",cutoffHz:11313.71,linearGain:11.3137}],noteSubFilters2:[{type:"low-pass",cutoffHz:105.11,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884},{type:"peak",cutoffHz:11313.71,linearGain:11.3137}],noteSubFilters4:[{type:"low-pass",cutoffHz:19027.31,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884},{type:"peak",cutoffHz:11313.71,linearGain:11.3137}],bitcrusherOctave:5.5,bitcrusherQuantization:43,pan:0,panDelay:10,chorus:29,echoSustain:43,echoDelayBeats:1,reverb:58,fadeInSeconds:0,fadeOutTicks:48,algorithm:"1←3 2←4",feedbackType:"1→3",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:7,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"juicy kick",generalMidi:!1,settings:{type:"FM",eqFilter:[{type:"high-pass",cutoffHz:62.5,linearGain:11.3137},{type:"low-pass",cutoffHz:5656.85,linearGain:.3536},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1189.21,linearGain:.0884},{type:"peak",cutoffHz:594.6,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:62.5,linearGain:11.3137},{type:"low-pass",cutoffHz:5656.85,linearGain:.3536},{type:"peak",cutoffHz:840.9,linearGain:.0884},{type:"peak",cutoffHz:1189.21,linearGain:.0884},{type:"peak",cutoffHz:594.6,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884}],effects:["panning"],pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-6,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"20×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorFrequency",envelope:"twang 1",index:0},{target:"noteVolume",envelope:"twang 2"}],isDrum:!1}},{name:"good vibes supersaw",generalMidi:!1,settings:{type:"supersaw",eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:6,discreteEnvelope:!1,pitchEnvelopeStart:37,pitchEnvelopeEnd:96,pitchEnvelopeInverse:!0,eqSubFilters0:[],effects:["panning","transition type","detune","chorus","reverb"],transition:"interrupt",clicklessTransition:!1,detuneCents:30,pan:0,panDelay:10,chorus:14,reverb:23,fadeInSeconds:.0263,fadeOutTicks:12,pulseWidth:26,decimalOffset:0,dynamism:33,spread:33,shape:17,envelopes:[{target:"supersawShape",envelope:"pitch"},{target:"detune",envelope:"tremolo2"}],isDrum:!1}},{name:"ethereal",generalMidi:!1,isNoise:!1,settings:{type:"spectrum",volume:0,eqFilter:[{type:"peak",cutoffHz:4e3,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884},{type:"peak",cutoffHz:6727.17,linearGain:.0884},{type:"high-pass",cutoffHz:88.39,linearGain:1.4142}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:4,discreteEnvelope:!1,eqSubFilters0:[{type:"peak",cutoffHz:4e3,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884},{type:"peak",cutoffHz:6727.17,linearGain:.0884},{type:"high-pass",cutoffHz:88.39,linearGain:1.4142}],eqSubFilters1:[],effects:["panning","transition type","chord type","pitch shift","detune","vibrato","note filter","bitcrusher","chorus","reverb"],transition:"continue",clicklessTransition:!1,chord:"simultaneous",fastTwoNoteArp:!1,arpeggioSpeed:12,pitchShiftSemitones:12,detuneCents:36,vibrato:"custom",vibratoDepth:.12,vibratoDelay:36,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"peak",cutoffHz:2828.43,linearGain:.0884},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"low-pass",cutoffHz:6727.17,linearGain:.0884},{type:"high-pass",cutoffHz:420.45,linearGain:.7071}],noteSubFilters0:[{type:"peak",cutoffHz:2828.43,linearGain:.0884},{type:"peak",cutoffHz:2e3,linearGain:.0884},{type:"low-pass",cutoffHz:6727.17,linearGain:.0884},{type:"high-pass",cutoffHz:420.45,linearGain:.7071}],bitcrusherOctave:4.5,bitcrusherQuantization:43,pan:0,panDelay:10,chorus:71,reverb:100,fadeInSeconds:0,fadeOutTicks:-1,spectrum:[43,0,0,0,0,0,0,71,0,0,0,57,0,0,57,0,43,0,43,0,0,29,0,29,0,14,14,14,0,0],unison:"none",pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,pitchEnvelopeStart1:0,pitchEnvelopeEnd1:96,envelopeInverse1:!1,pitchEnvelopeStart2:0,pitchEnvelopeEnd2:96,envelopeInverse2:!1,envelopes:[{target:"noteVolume",envelope:"note size"},{target:"detune",envelope:"tremolo3"},{target:"bitcrusherQuantization",envelope:"note size"}],isDrum:!1}},{name:"walrus wuh",generalMidi:!1,settings:{type:"supersaw",eqFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25},{type:"high-pass",cutoffHz:353.55,linearGain:2},{type:"peak",cutoffHz:4756.83,linearGain:.0884},{type:"peak",cutoffHz:3363.59,linearGain:.0884},{type:"peak",cutoffHz:74.33,linearGain:2.8284}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,pitchEnvelopeStart:0,pitchEnvelopeEnd:96,pitchEnvelopeInverse:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25},{type:"high-pass",cutoffHz:353.55,linearGain:2},{type:"peak",cutoffHz:4756.83,linearGain:.0884},{type:"peak",cutoffHz:3363.59,linearGain:.0884},{type:"peak",cutoffHz:74.33,linearGain:2.8284}],effects:["panning","note filter","bitcrusher","chorus","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:.125}],noteSubFilters0:[{type:"low-pass",cutoffHz:11313.71,linearGain:.125}],bitcrusherOctave:4,bitcrusherQuantization:71,pan:0,panDelay:10,chorus:86,reverb:32,fadeInSeconds:.0263,fadeOutTicks:48,pulseWidth:50,decimalOffset:0,dynamism:100,spread:50,shape:0,envelopes:[{target:"noteVolume",envelope:"punch"},{target:"bitcrusherQuantization",envelope:"decay 3"}],isDrum:!1}},{name:"saturnic",generalMidi:!1,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:4240.89,linearGain:2}],eqFilterType:!0,eqSimpleCut:8,eqSimplePeak:4,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","vibrato","chorus","echo","reverb"],vibrato:"light",vibratoDepth:.15,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,pan:0,panDelay:10,chorus:100,echoSustain:71,echoDelayBeats:.5,reverb:45,fadeInSeconds:.0125,fadeOutTicks:72,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:15,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"glassy harmonics",generalMidi:!1,settings:{type:"harmonics",volume:0,eqFilter:[{type:"low-pass",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:840.9,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:1e3,linearGain:11.3137},{type:"peak",cutoffHz:840.9,linearGain:.5}],effects:["panning","detune","note filter","chorus","reverb"],detuneCents:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[],noteSubFilters0:[],pan:0,panDelay:10,chorus:14,reverb:29,fadeInSeconds:0,fadeOutTicks:-3,harmonics:[100,0,43,29,0,100,0,0,0,0,0,0,0,0,14,29,14,0,14,0,0,0,0,100,0,0,14,0],unison:"none",envelopes:[],isDrum:!1}},{name:"plucked",generalMidi:!1,settings:{type:"Picked String",volume:0,eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:4756.83,linearGain:.0884}],effects:["panning","transition type","echo","reverb"],transition:"interrupt",clicklessTransition:!1,pan:0,panDelay:10,echoSustain:100,echoDelayBeats:1.333,reverb:26,fadeInSeconds:0,fadeOutTicks:24,harmonics:[100,86,57,0,0,57,57,57,86,57,57,43,43,43,29,29,14,14,29,14,14,14,29,100,57,43,14,14],unison:"none",stringSustain:14,envelopes:[],isDrum:!1}},{name:"spectrum wind",generalMidi:!1,isNoise:!0,settings:{type:"spectrum",volume:0,eqFilter:[{type:"low-pass",cutoffHz:19027.31,linearGain:.7071}],eqFilterType:!0,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","note filter","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:1.4142}],noteSubFilters0:[{type:"low-pass",cutoffHz:2378.41,linearGain:1.4142}],pan:0,panDelay:10,reverb:87,fadeInSeconds:0,fadeOutTicks:12,spectrum:[29,0,0,0,0,0,0,71,0,0,0,14,57,14,0,57,57,0,0,57,0,71,14,29,100,71,0,100,14,86],unison:"none",envelopes:[],isDrum:!0}},{name:"hi-hat",generalMidi:!1,isNoise:!0,settings:{type:"noise",volume:0,eqFilter:[{type:"low-pass",cutoffHz:16e3,linearGain:.3536},{type:"high-pass",cutoffHz:4756.83,linearGain:.1768}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:16e3,linearGain:.3536},{type:"high-pass",cutoffHz:4756.83,linearGain:.1768}],eqSubFilters1:[{type:"low-pass",cutoffHz:16e3,linearGain:.3536},{type:"high-pass",cutoffHz:4756.83,linearGain:.1768}],eqSubFilters2:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536},{type:"high-pass",cutoffHz:4756.83,linearGain:.1768}],eqSubFilters3:[{type:"low-pass",cutoffHz:8e3,linearGain:.1768},{type:"high-pass",cutoffHz:4756.83,linearGain:.1768}],effects:["panning"],pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-3,wave:"white",unison:"none",envelopes:[],isDrum:!0}},{name:"jungle bass",generalMidi:!1,isNoise:!1,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.0884},{type:"peak",cutoffHz:148.65,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:2378.41,linearGain:.0884},{type:"peak",cutoffHz:148.65,linearGain:.0884}],effects:["panning","vibrato","note filter","chorus","reverb"],vibrato:"none",vibratoDepth:0,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:297.3,linearGain:1},{type:"peak",cutoffHz:74.33,linearGain:.0884}],noteSubFilters0:[{type:"low-pass",cutoffHz:297.3,linearGain:1},{type:"peak",cutoffHz:74.33,linearGain:.0884}],pan:0,panDelay:10,chorus:14,reverb:3,fadeInSeconds:0,fadeOutTicks:48,algorithm:"1←3 2←4",feedbackType:"1↔2 3↔4",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:13,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"8×",amplitude:11,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,pitchEnvelopeStart1:0,pitchEnvelopeEnd1:96,envelopeInverse1:!1,pitchEnvelopeStart2:12,pitchEnvelopeEnd2:28,envelopeInverse2:!1,envelopes:[{target:"operatorFrequency",envelope:"swell 3",index:0},{target:"operatorAmplitude",envelope:"swell 3",index:1},{target:"noteFilterFreq",envelope:"pitch",index:0}],isDrum:!1}},{name:"beach tide",generalMidi:!1,isNoise:!1,settings:{type:"harmonics",volume:0,eqFilter:[{type:"high-pass",cutoffHz:594.6,linearGain:.3536},{type:"low-pass",cutoffHz:13454.34,linearGain:.1768},{type:"peak",cutoffHz:8e3,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:594.6,linearGain:.3536},{type:"low-pass",cutoffHz:13454.34,linearGain:.1768},{type:"peak",cutoffHz:8e3,linearGain:.0884}],effects:["panning","transition type","chord type","note filter","chorus","reverb"],transition:"continue",clicklessTransition:!1,chord:"simultaneous",fastTwoNoteArp:!1,arpeggioSpeed:12,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"high-pass",cutoffHz:420.45,linearGain:1},{type:"peak",cutoffHz:5656.85,linearGain:.1768}],noteSubFilters0:[{type:"high-pass",cutoffHz:420.45,linearGain:1},{type:"peak",cutoffHz:5656.85,linearGain:.1768}],pan:0,panDelay:10,chorus:14,reverb:32,fadeInSeconds:.0938,fadeOutTicks:72,harmonics:[86,86,71,57,57,43,43,43,29,29,14,14,14,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0],unison:"none",pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,envelopes:[{target:"noteFilterAllFreqs",envelope:"pitch"}],isDrum:!1}},{name:"starlight",generalMidi:!1,isNoise:!1,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:2378.41,linearGain:.0884}],effects:["panning","transition type","vibrato","bitcrusher","echo","reverb"],transition:"continue",clicklessTransition:!1,vibrato:"light",vibratoDepth:.15,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,bitcrusherOctave:5.5,bitcrusherQuantization:29,pan:0,panDelay:10,echoSustain:29,echoDelayBeats:1,reverb:13,fadeInSeconds:0,fadeOutTicks:24,algorithm:"1←(2 3 4)",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:6,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"distant monument",generalMidi:!1,isNoise:!1,settings:{type:"chip",volume:0,eqFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:1},{type:"peak",cutoffHz:11313.71,linearGain:.25},{type:"peak",cutoffHz:500,linearGain:.125},{type:"peak",cutoffHz:210.22,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:5.6569}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:3363.59,linearGain:1},{type:"peak",cutoffHz:11313.71,linearGain:.25},{type:"peak",cutoffHz:500,linearGain:.125},{type:"peak",cutoffHz:210.22,linearGain:5.6569},{type:"peak",cutoffHz:840.9,linearGain:5.6569}],effects:["panning","transition type","chord type","detune","bitcrusher","chorus","echo","reverb"],transition:"normal",clicklessTransition:!1,chord:"strum",fastTwoNoteArp:!1,arpeggioSpeed:12,detuneCents:24,bitcrusherOctave:2.5,bitcrusherQuantization:14,pan:0,panDelay:10,chorus:86,echoSustain:71,echoDelayBeats:1,reverb:35,fadeInSeconds:.0413,fadeOutTicks:12,wave:"modbox pnryshk a (u5)",unison:"detune",isUsingAdvancedLoopControls:!1,chipWaveLoopStart:0,chipWaveLoopEnd:11,chipWaveLoopMode:0,chipWavePlayBackwards:!1,chipWaveStartOffset:0,pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,pitchEnvelopeStart1:0,pitchEnvelopeEnd1:96,envelopeInverse1:!1,envelopes:[{target:"noteVolume",envelope:"punch"},{target:"noteVolume",envelope:"twang 1"}],isDrum:!1}},{name:"mercurial",generalMidi:!1,isNoise:!1,settings:{type:"FM6op",volume:0,eqFilter:[{type:"low-pass",cutoffHz:11313.71,linearGain:.5},{type:"peak",cutoffHz:88.39,linearGain:2.8284},{type:"peak",cutoffHz:1189.21,linearGain:.1768}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:11313.71,linearGain:.5},{type:"peak",cutoffHz:88.39,linearGain:2.8284},{type:"peak",cutoffHz:1189.21,linearGain:.1768}],eqSubFilters1:[],effects:["panning","distortion","chorus"],distortion:43,aliases:!1,pan:0,panDelay:10,chorus:43,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"Custom",feedbackType:"1⟲",feedbackAmplitude:8,customAlgorithm:{mods:[[3],[5],[4],[],[6],[]],carrierCount:2},operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"0.5×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"~2×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:9,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:2,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteVolume",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorFrequency",envelope:"linear",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"distortion",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:20,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"air hiss",generalMidi:!1,isNoise:!0,settings:{type:"spectrum",volume:0,eqFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.25}],eqFilterType:!0,eqSimpleCut:7,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","note filter","distortion","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"high-pass",cutoffHz:2828.43,linearGain:.3536}],noteSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"high-pass",cutoffHz:2828.43,linearGain:.3536}],distortion:71,aliases:!1,pan:0,panDelay:10,reverb:6,fadeInSeconds:0,fadeOutTicks:-24,spectrum:[57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,57,71,86,100,100,100,100,86,71,71,43],unison:"none",envelopes:[],isDrum:!0}},{name:"spectral phaser",generalMidi:!1,settings:{type:"spectrum",volume:0,eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536},{type:"high-pass",cutoffHz:74.33,linearGain:.25}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:10,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["panning","note filter","distortion","bitcrusher","chorus","echo","reverb"],noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"peak",cutoffHz:9513.66,linearGain:5.6569},{type:"peak",cutoffHz:5656.85,linearGain:.0884},{type:"peak",cutoffHz:2828.43,linearGain:4},{type:"peak",cutoffHz:1414.21,linearGain:.125},{type:"peak",cutoffHz:707.11,linearGain:4},{type:"peak",cutoffHz:353.55,linearGain:.1768},{type:"peak",cutoffHz:148.65,linearGain:4},{type:"peak",cutoffHz:88.39,linearGain:.1768}],noteSubFilters0:[{type:"peak",cutoffHz:9513.66,linearGain:5.6569},{type:"peak",cutoffHz:5656.85,linearGain:.0884},{type:"peak",cutoffHz:2828.43,linearGain:4},{type:"peak",cutoffHz:1414.21,linearGain:.125},{type:"peak",cutoffHz:707.11,linearGain:4},{type:"peak",cutoffHz:353.55,linearGain:.1768},{type:"peak",cutoffHz:148.65,linearGain:4},{type:"peak",cutoffHz:88.39,linearGain:.1768}],distortion:14,aliases:!1,bitcrusherOctave:6,bitcrusherQuantization:14,pan:0,panDelay:10,chorus:100,echoSustain:86,echoDelayBeats:1,reverb:32,fadeInSeconds:0,fadeOutTicks:48,spectrum:[86,0,0,0,57,0,0,71,0,0,0,86,0,0,57,0,43,0,43,0,0,43,0,29,0,29,14,14,29,14],unison:"piano",envelopes:[{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.07,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:0},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.06,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:1},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.05,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.04,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.09,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:4},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.08,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:5},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.1,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:6},{target:"noteFilterFreq",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:.03,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:7},{target:"distortion",envelope:"none",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:.3}],isDrum:!1}},{name:"shaker",generalMidi:!1,isNoise:!0,settings:{type:"noise",volume:0,eqFilter:[{type:"high-pass",cutoffHz:4e3,linearGain:5.6569},{type:"peak",cutoffHz:4756.83,linearGain:.0884},{type:"low-pass",cutoffHz:11313.71,linearGain:8},{type:"peak",cutoffHz:2378.41,linearGain:.25}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:6,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:4e3,linearGain:5.6569},{type:"peak",cutoffHz:4756.83,linearGain:.0884},{type:"low-pass",cutoffHz:11313.71,linearGain:8},{type:"peak",cutoffHz:2378.41,linearGain:.25}],effects:["panning","transition type","detune","distortion","bitcrusher","chorus","echo","reverb"],transition:"interrupt",clicklessTransition:!1,detuneCents:30,distortion:43,aliases:!1,bitcrusherOctave:2.5,bitcrusherQuantization:43,pan:0,panDelay:10,chorus:43,echoSustain:29,echoDelayBeats:1,reverb:23,fadeInSeconds:.0263,fadeOutTicks:96,wave:"deep",unison:"none",envelopes:[{target:"detune",envelope:"tremolo2",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"bitcrusherQuantization",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"noteVolume",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"noteVolume",envelope:"flare",pitchEnvelopeStart:0,pitchEnvelopeEnd:12,inverse:!1,perEnvelopeSpeed:64,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!0}},{name:"distant sorrow",generalMidi:!1,settings:{type:"harmonics",volume:0,eqFilter:[{type:"high-pass",cutoffHz:707.11,linearGain:4},{type:"peak",cutoffHz:5656.85,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:707.11,linearGain:4},{type:"peak",cutoffHz:5656.85,linearGain:.5}],effects:["panning","transition type","detune","vibrato","note filter","echo","reverb"],transition:"interrupt",clicklessTransition:!1,detuneCents:0,vibrato:"custom",vibratoDepth:.2,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25}],noteSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25}],pan:0,panDelay:10,echoSustain:100,echoDelayBeats:1,reverb:74,fadeInSeconds:0,fadeOutTicks:24,harmonics:[86,71,57,43,43,29,57,0,14,0,29,29,29,29,29,43,43,43,43,43,57,57,57,0,57,57,0,0],unison:"none",envelopes:[{target:"noteVolume",envelope:"fall",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:10,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"noteFilterAllFreqs",envelope:"swell",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2.5,perEnvelopeLowerBound:.5,perEnvelopeUpperBound:2}],isDrum:!1}},{name:"metallic kick",generalMidi:!1,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:28,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.5}],effects:["panning"],pan:0,panDelay:0,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1←(2 3 4)",feedbackType:"1→2→3→4",feedbackAmplitude:15,operators:[{frequency:"8×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"256x",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"128x",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"256x",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorFrequency",envelope:"twang",inverse:!1,perEnvelopeSpeed:16,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:0},{target:"noteVolume",envelope:"twang",inverse:!1,perEnvelopeSpeed:3.5,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"feedbackAmplitude",envelope:"twang",inverse:!1,perEnvelopeSpeed:256,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorAmplitude",envelope:"twang",inverse:!1,perEnvelopeSpeed:256,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:1},{target:"operatorAmplitude",envelope:"twang",inverse:!1,perEnvelopeSpeed:256,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"operatorAmplitude",envelope:"twang",inverse:!1,perEnvelopeSpeed:256,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2}],isDrum:!1}},{name:"chimes",generalMidi:!1,settings:{type:"Picked String",volume:0,eqFilter:[{type:"high-pass",cutoffHz:594.6,linearGain:.5},{type:"peak",cutoffHz:5656.85,linearGain:.0884},{type:"peak",cutoffHz:8e3,linearGain:2.8284}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:594.6,linearGain:.5},{type:"peak",cutoffHz:5656.85,linearGain:.0884},{type:"peak",cutoffHz:8e3,linearGain:2.8284}],effects:["panning","chord type","detune","note filter","bitcrusher","chorus","echo","reverb"],chord:"strum",fastTwoNoteArp:!1,arpeggioSpeed:12,detuneCents:24,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],noteSubFilters0:[{type:"low-pass",cutoffHz:2378.41,linearGain:.5}],noteSubFilters1:[{type:"low-pass",cutoffHz:2378.41,linearGain:1}],bitcrusherOctave:4,bitcrusherQuantization:29,pan:0,panDelay:0,chorus:29,echoSustain:86,echoDelayBeats:.667,reverb:84,fadeInSeconds:0,fadeOutTicks:48,harmonics:[0,100,71,71,29,0,57,86,0,0,0,0,71,29,0,0,57,0,0,86,0,0,0,100,0,100,0,57],unison:"none",stringSustain:36,envelopes:[{target:"noteFilterAllFreqs",envelope:"twang",inverse:!1,perEnvelopeSpeed:2,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"bitcrusherQuantization",envelope:"swell",inverse:!1,perEnvelopeSpeed:4.5,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"bitcrusherQuantization",envelope:"note size",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"noteVolume",envelope:"note size",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"stringSustain",envelope:"random",inverse:!1,perEnvelopeSpeed:16,perEnvelopeLowerBound:.5,perEnvelopeUpperBound:1,steps:14,seed:2,waveform:0},{target:"detune",envelope:"pitch",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,pitchEnvelopeStart:0,pitchEnvelopeEnd:96}],isDrum:!1}},{name:"supersaw bass",generalMidi:!1,settings:{type:"supersaw",volume:0,eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:4756.83,linearGain:.5}],effects:["panning","note filter","distortion","chorus","reverb"],noteFilterType:!0,noteSimpleCut:9,noteSimplePeak:2,noteFilter:[{type:"low-pass",cutoffHz:7231.23,linearGain:1}],noteSubFilters1:[{type:"low-pass",cutoffHz:7231.23,linearGain:1}],distortion:14,aliases:!1,pan:0,panDelay:10,chorus:29,reverb:0,fadeInSeconds:.0263,fadeOutTicks:-3,pulseWidth:50,decimalOffset:0,dynamism:100,spread:67,shape:0,envelopes:[{target:"noteFilterAllFreqs",envelope:"swell",inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"ascension",generalMidi:!1,isNoise:!1,settings:{type:"spectrum",volume:0,eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.3536},{type:"high-pass",cutoffHz:420.45,linearGain:.25}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,eqSubFilters0:[{type:"low-pass",cutoffHz:4756.83,linearGain:.3536},{type:"high-pass",cutoffHz:420.45,linearGain:.25}],eqSubFilters1:[],effects:["panning","granular","chorus","reverb"],granular:7,grainSize:44,grainAmounts:9,grainRange:37,pan:0,panDelay:10,chorus:71,reverb:19,fadeInSeconds:0,fadeOutTicks:24,spectrum:[43,0,0,57,0,0,14,100,29,0,0,100,29,0,100,0,57,29,86,14,14,100,14,0,14,14,0,0,43,0],unison:"voiced",envelopes:[{target:"noteVolume",envelope:"swell",inverse:!1,perEnvelopeSpeed:.7,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1},{target:"panning",envelope:"lfo",inverse:!1,perEnvelopeSpeed:.3,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1,waveform:2,steps:6}],isDrum:!1}},{name:"liminal",generalMidi:!1,isNoise:!1,settings:{type:"supersaw",volume:0,eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:1.4142},{type:"high-pass",cutoffHz:840.9,linearGain:.25}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,eqSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:1.4142},{type:"high-pass",cutoffHz:840.9,linearGain:.25}],effects:["panning","detune","vibrato","note filter","granular","distortion","bitcrusher","chorus","reverb"],detuneCents:8,vibrato:"custom",vibratoDepth:.48,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,noteFilterType:!0,noteSimpleCut:6,noteSimplePeak:2,noteFilter:[{type:"low-pass",cutoffHz:2196.8,linearGain:1}],noteSubFilters1:[{type:"low-pass",cutoffHz:2196.8,linearGain:1}],granular:6,grainSize:49,grainAmounts:10,grainRange:40,distortion:57,aliases:!1,bitcrusherOctave:5,bitcrusherQuantization:0,pan:38,panDelay:10,chorus:29,reverb:48,fadeInSeconds:0,fadeOutTicks:72,pulseWidth:30,decimalOffset:0,dynamism:17,spread:83,shape:67,envelopes:[{target:"noteVolume",envelope:"twang",inverse:!1,perEnvelopeSpeed:17,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1},{target:"pulseWidth",envelope:"twang",inverse:!1,perEnvelopeSpeed:1.3333,perEnvelopeLowerBound:.1,perEnvelopeUpperBound:1,discrete:!1},{target:"distortion",envelope:"random",inverse:!1,perEnvelopeSpeed:1,perEnvelopeLowerBound:.2,perEnvelopeUpperBound:1,discrete:!0,steps:8,seed:2,waveform:2},{target:"panning",envelope:"lfo",inverse:!1,perEnvelopeSpeed:.3333,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1,waveform:2,steps:2},{target:"noteVolume",envelope:"swell",inverse:!1,perEnvelopeSpeed:18,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1},{target:"noteVolume",envelope:"note size",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1},{target:"granular",envelope:"note size",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1}],isDrum:!1}}])},{name:"Slarmoo's Box Chip Presets",presets:w([{name:"Slarmoo's Pulse",midiProgram:80,settings:{type:"PWM",volume:0,eqFilter:[],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[],effects:["panning","transition type","chord type","detune"],transition:"interrupt",clicklessTransition:!1,chord:"arpeggio",fastTwoNoteArp:!0,arpeggioSpeed:8,detuneCents:24,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-1,pulseWidth:50,decimalOffset:0,unison:"none",pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,envelopes:[{target:"detune",envelope:"pitch"}],isDrum:!1}},{name:"discovery square",midiProgram:80,settings:{type:"chip",volume:0,eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:8e3,linearGain:.3536}],effects:["panning","bitcrusher"],bitcrusherOctave:5.5,bitcrusherQuantization:57,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-3,wave:"square",unison:"octave",isUsingAdvancedLoopControls:!1,chipWaveLoopStart:0,chipWaveLoopEnd:2,chipWaveLoopMode:0,chipWavePlayBackwards:!1,chipWaveStartOffset:0,envelopes:[],isDrum:!1}},{name:"VRC6 Sawtooth alt",midiProgram:81,settings:{type:"custom chip",volume:0,eqFilter:[{type:"high-pass",cutoffHz:62.5,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:62.5,linearGain:.5}],effects:["panning","transition type","chord type","pitch shift","detune","vibrato","distortion"],transition:"interrupt",clicklessTransition:!1,chord:"arpeggio",fastTwoNoteArp:!0,arpeggioSpeed:12,pitchShiftSemitones:12,detuneCents:0,vibrato:"none",vibratoDepth:0,vibratoDelay:0,vibratoSpeed:10,vibratoType:0,distortion:0,aliases:!1,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-1,wave:"square",unison:"none",customChipWave:{0:-1,1:-1,2:-1,3:-1,4:-1,5:-1,6:-1,7:-1,8:-1,9:-5,10:-5,11:-5,12:-4,13:-4,14:-4,15:-3,16:-3,17:-3,18:-7,19:-7,20:-6,21:-6,22:-5,23:-5,24:-4,25:-4,26:-4,27:-7,28:-7,29:-6,30:-6,31:-5,32:-5,33:-4,34:-4,35:-4,36:-8,37:-8,38:-7,39:-7,40:-6,41:-6,42:-5,43:-5,44:-4,45:-4,46:21,47:20,48:18,49:17,50:16,51:14,52:13,53:12,54:11,55:7,56:6,57:6,58:5,59:5,60:5,61:4,62:4,63:4},customChipWaveIntegral:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0},envelopes:[],isDrum:!1}},{name:"pulse arps",midiProgram:80,settings:{type:"PWM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:16e3,linearGain:.125},{type:"high-pass",cutoffHz:840.9,linearGain:2}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:7,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:16e3,linearGain:.125},{type:"high-pass",cutoffHz:840.9,linearGain:2}],effects:["panning","transition type","chord type","detune","chorus","echo"],transition:"interrupt",clicklessTransition:!1,chord:"arpeggio",fastTwoNoteArp:!0,arpeggioSpeed:8,detuneCents:64,pan:58,panDelay:10,chorus:43,echoSustain:71,echoDelayBeats:.333,fadeInSeconds:0,fadeOutTicks:-1,pulseWidth:50,decimalOffset:0,unison:"none",envelopes:[{target:"detune",envelope:"pitch",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,pitchEnvelopeStart:0,pitchEnvelopeEnd:96},{target:"pulseWidth",envelope:"pitch",inverse:!0,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,pitchEnvelopeStart:24,pitchEnvelopeEnd:83},{target:"panning",envelope:"lfo",inverse:!1,perEnvelopeSpeed:1,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,waveform:0,steps:2},{target:"noteVolume",envelope:"twang",inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"chorus",envelope:"twang",inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}}])},{name:"Slarmoo's Box Instrumental Presets",presets:w([{name:"rusty flute",midiProgram:73,settings:{type:"FM",eqFilter:[{type:"peak",cutoffHz:13454.34,linearGain:2.8284}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"peak",cutoffHz:13454.34,linearGain:2.8284}],effects:["panning","transition type","detune","distortion","reverb"],transition:"normal",clicklessTransition:!1,detuneCents:-7,distortion:14,aliases:!1,pan:0,panDelay:10,reverb:100,fadeInSeconds:0,fadeOutTicks:96,algorithm:"1←2←3←4",feedbackType:"3→4",feedbackAmplitude:8,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"2×",amplitude:4,waveform:"sine",pulseWidth:5},{frequency:"20×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[],isDrum:!1}},{name:"bitcrushed piano",midiProgram:4,settings:{type:"chip",volume:0,eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2.8284},{type:"high-pass",cutoffHz:74.33,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,eqSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2.8284},{type:"high-pass",cutoffHz:74.33,linearGain:.5}],effects:["panning","transition type","detune","distortion","bitcrusher","reverb"],transition:"continue",clicklessTransition:!1,detuneCents:0,distortion:29,aliases:!0,bitcrusherOctave:4,bitcrusherQuantization:43,pan:0,panDelay:0,reverb:0,fadeInSeconds:0,fadeOutTicks:-3,wave:"triangle",unison:"none",isUsingAdvancedLoopControls:!0,chipWaveLoopStart:0,chipWaveLoopEnd:32,chipWaveLoopMode:0,chipWavePlayBackwards:!1,chipWaveStartOffset:0,envelopes:[{target:"bitcrusherQuantization",envelope:"note size",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:.6,perEnvelopeUpperBound:1,discrete:!1},{target:"noteVolume",envelope:"note size",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1}],isDrum:!1}},{name:"detuned piano",midiProgram:3,settings:{type:"Picked String",volume:0,eqFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2.8284}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.25},{type:"peak",cutoffHz:840.9,linearGain:2.8284}],effects:["panning","transition type","detune","vibrato","note filter","bitcrusher"],transition:"continue",clicklessTransition:!1,detuneCents:44,vibrato:"custom",vibratoDepth:.04,vibratoDelay:13,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"high-pass",cutoffHz:420.45,linearGain:1}],noteSubFilters0:[{type:"high-pass",cutoffHz:420.45,linearGain:1}],bitcrusherOctave:4,bitcrusherQuantization:14,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-3,harmonics:[86,86,71,71,57,57,43,29,14,29,29,29,29,29,29,29,29,43,43,43,43,43,29,14,14,0,0,0],unison:"custom",unisonVoices:2,unisonSpread:.26,unisonOffset:0,unisonExpression:1,unisonSign:1,stringSustain:79,envelopes:[{target:"detune",envelope:"random",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:1,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:49,waveform:1},{target:"noteVolume",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:1.6667,perEnvelopeLowerBound:.4,perEnvelopeUpperBound:1,steps:2,seed:2,waveform:0},{target:"unison",envelope:"random",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:1,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:20,waveform:1},{target:"noteFilterAllFreqs",envelope:"pitch",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!0,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:2,waveform:0}],isDrum:!1}},{name:"pan flute 2",midiProgram:75,isNoise:!1,settings:{type:"spectrum",volume:0,eqFilter:[{type:"peak",cutoffHz:2828.43,linearGain:2},{type:"high-pass",cutoffHz:594.6,linearGain:.3536},{type:"low-pass",cutoffHz:8e3,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"peak",cutoffHz:2828.43,linearGain:2},{type:"high-pass",cutoffHz:594.6,linearGain:.3536},{type:"low-pass",cutoffHz:8e3,linearGain:.5}],effects:["panning","transition type","note filter","bitcrusher","reverb"],transition:"continue",clicklessTransition:!1,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],noteSubFilters0:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],noteSubFilters1:[{type:"low-pass",cutoffHz:9513.66,linearGain:.5}],bitcrusherOctave:6,bitcrusherQuantization:57,pan:0,panDelay:10,reverb:16,fadeInSeconds:.0125,fadeOutTicks:-6,spectrum:[100,29,14,14,57,0,0,71,0,86,57,43,57,71,14,29,14,14,14,100,71,14,14,14,14,86,43,14,0,0],unison:"none",pitchEnvelopeStart0:0,pitchEnvelopeEnd0:96,envelopeInverse0:!1,pitchEnvelopeStart1:0,pitchEnvelopeEnd1:96,envelopeInverse1:!1,pitchEnvelopeStart2:0,pitchEnvelopeEnd2:96,envelopeInverse2:!1,envelopes:[{target:"noteFilterAllFreqs",envelope:"note size"},{target:"bitcrusherQuantization",envelope:"note size"},{target:"noteVolume",envelope:"note size"}],isDrum:!1}},{name:"trumpet 2",midiProgram:56,settings:{type:"FM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:3049.17,linearGain:1.4142}],eqFilterType:!0,eqSimpleCut:7,eqSimplePeak:3,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","detune","vibrato","note filter","distortion","chorus","reverb"],detuneCents:-64,vibrato:"custom",vibratoDepth:.68,vibratoDelay:17,vibratoSpeed:12,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.5},{type:"peak",cutoffHz:3363.59,linearGain:.1768},{type:"high-pass",cutoffHz:1e3,linearGain:.1768}],noteSubFilters0:[{type:"low-pass",cutoffHz:13454.34,linearGain:.5},{type:"peak",cutoffHz:3363.59,linearGain:.1768},{type:"high-pass",cutoffHz:1e3,linearGain:.1768}],distortion:29,aliases:!1,pan:0,panDelay:10,chorus:14,reverb:0,fadeInSeconds:.0263,fadeOutTicks:-3,algorithm:"1 2←(3 4)",feedbackType:"1⟲",feedbackAmplitude:9,operators:[{frequency:"0.75×",amplitude:14,waveform:"pulse width",pulseWidth:2},{frequency:"1×",amplitude:14,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:8,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"operatorAmplitude",envelope:"flare",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:8,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:3},{target:"feedbackAmplitude",envelope:"swell",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:32,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorFrequency",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:128,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:0},{target:"noteFilterFreq",envelope:"swell",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:2.5,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:2},{target:"noteVolume",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"detune",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!0,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"harp 2",midiProgram:46,settings:{type:"FM6op",volume:0,eqFilter:[{type:"low-pass",cutoffHz:13454.34,linearGain:.0884},{type:"peak",cutoffHz:1e3,linearGain:2.8284},{type:"high-pass",cutoffHz:62.5,linearGain:.25},{type:"high-pass",cutoffHz:148.65,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:13454.34,linearGain:.0884},{type:"peak",cutoffHz:1e3,linearGain:2.8284},{type:"high-pass",cutoffHz:62.5,linearGain:.25},{type:"high-pass",cutoffHz:148.65,linearGain:.5}],eqSubFilters1:[],effects:["panning","detune","note filter","echo","reverb"],detuneCents:-23,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:6727.17,linearGain:.0884},{type:"peak",cutoffHz:105.11,linearGain:2.8284}],noteSubFilters0:[{type:"low-pass",cutoffHz:6727.17,linearGain:.0884},{type:"peak",cutoffHz:105.11,linearGain:2.8284}],pan:0,panDelay:10,echoSustain:29,echoDelayBeats:1.083,reverb:74,fadeInSeconds:0,fadeOutTicks:-1,algorithm:"1←4 2←5 3←6",feedbackType:"1⟲",feedbackAmplitude:5,operators:[{frequency:"1×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:5,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"4×",amplitude:6,waveform:"sine",pulseWidth:5},{frequency:"6×",amplitude:12,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:2,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteVolume",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:4,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"operatorFrequency",envelope:"tremolo",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:8,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:1},{target:"detune",envelope:"decay",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:7,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1},{target:"noteFilterFreq",envelope:"tremolo2",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:1,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:0},{target:"operatorAmplitude",envelope:"twang",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:8,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,index:4},{target:"operatorAmplitude",envelope:"swell",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!0,perEnvelopeSpeed:8,perEnvelopeLowerBound:.4,perEnvelopeUpperBound:1,index:0},{target:"noteVolume",envelope:"punch",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"electric guitar 1",midiProgram:30,settings:{type:"FM",volume:0,eqFilter:[{type:"high-pass",cutoffHz:1189.21,linearGain:2},{type:"low-pass",cutoffHz:4e3,linearGain:1.4142},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,eqSubFilters0:[{type:"high-pass",cutoffHz:1189.21,linearGain:2},{type:"low-pass",cutoffHz:4e3,linearGain:1.4142},{type:"peak",cutoffHz:707.11,linearGain:.0884},{type:"peak",cutoffHz:420.45,linearGain:.0884}],effects:["panning","chord type","vibrato","note filter","distortion","reverb"],chord:"monophonic",fastTwoNoteArp:!1,arpeggioSpeed:12,monoChordTone:0,vibrato:"delayed",vibratoDepth:.3,vibratoDelay:18.5,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:1414.21,linearGain:4},{type:"high-pass",cutoffHz:594.6,linearGain:1}],noteSubFilters0:[{type:"low-pass",cutoffHz:1414.21,linearGain:4},{type:"high-pass",cutoffHz:594.6,linearGain:1}],distortion:100,aliases:!1,pan:0,panDelay:0,reverb:6,fadeInSeconds:0,fadeOutTicks:24,algorithm:"1 2 3 4",feedbackType:"1⟲",feedbackAmplitude:0,operators:[{frequency:"1×",amplitude:15,waveform:"sawtooth",pulseWidth:5},{frequency:"2×",amplitude:0,waveform:"sawtooth",pulseWidth:5},{frequency:"4×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"0.25×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"noteVolume",envelope:"punch",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1},{target:"vibratoDepth",envelope:"rise",inverse:!1,perEnvelopeSpeed:9,perEnvelopeLowerBound:1,perEnvelopeUpperBound:2,discrete:!1},{target:"noteVolume",envelope:"note size",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1},{target:"distortion",envelope:"note size",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1}],isDrum:!1}},{name:"electric guitar 2",midiProgram:30,settings:{type:"PWM",volume:0,eqFilter:[{type:"low-pass",cutoffHz:3363.59,linearGain:5.6569},{type:"high-pass",cutoffHz:1681.79,linearGain:.25},{type:"peak",cutoffHz:5656.85,linearGain:2}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,eqSubFilters0:[{type:"low-pass",cutoffHz:3363.59,linearGain:5.6569},{type:"high-pass",cutoffHz:1681.79,linearGain:.25},{type:"peak",cutoffHz:5656.85,linearGain:2}],effects:["panning","chord type","vibrato","note filter","distortion","bitcrusher","chorus","reverb"],chord:"monophonic",fastTwoNoteArp:!1,arpeggioSpeed:12,monoChordTone:0,vibrato:"custom",vibratoDepth:.68,vibratoDelay:22,vibratoSpeed:10,vibratoType:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:1e3,linearGain:2.8284}],noteSubFilters0:[{type:"low-pass",cutoffHz:1e3,linearGain:2.8284}],distortion:43,aliases:!1,bitcrusherOctave:6.5,bitcrusherQuantization:71,pan:0,panDelay:0,chorus:14,reverb:13,fadeInSeconds:0,fadeOutTicks:24,pulseWidth:50,decimalOffset:0,unison:"none",envelopes:[{target:"noteFilterAllFreqs",envelope:"rise",inverse:!1,perEnvelopeSpeed:.3333,perEnvelopeLowerBound:.8,perEnvelopeUpperBound:1,discrete:!1},{target:"pulseWidth",envelope:"twang",inverse:!0,perEnvelopeSpeed:2.25,perEnvelopeLowerBound:.5,perEnvelopeUpperBound:.9,discrete:!1},{target:"noteVolume",envelope:"note size",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1},{target:"bitcrusherQuantization",envelope:"note size",inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,discrete:!1}],isDrum:!1}}])},{name:"Slarmoo's Box Novelty Presets",presets:w([{name:"bitcrushed artifacts",generalMidi:!1,settings:{type:"Picked String",eqFilter:[{type:"low-pass",cutoffHz:9656.85,linearGain:.5}],eqFilterType:!0,eqSimpleCut:9,eqSimplePeak:1,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","distortion","bitcrusher","echo"],distortion:71,aliases:!1,bitcrusherOctave:2,bitcrusherQuantization:86,pan:0,panDelay:10,echoSustain:0,echoDelayBeats:1,fadeInSeconds:0,fadeOutTicks:-6,harmonics:[0,0,0,0,0,0,0,57,0,0,0,0,0,0,100,43,0,0,14,86,0,14,0,0,0,0,0,86],unison:"none",stringSustain:14,envelopes:[],isDrum:!1}},{name:"whistle 2",midiProgram:78,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:2110.37,linearGain:1.4142}],eqFilterType:!0,eqSimpleCut:6,eqSimplePeak:3,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters1:[],effects:["panning","transition type","pitch shift","note filter","distortion","echo","reverb"],transition:"normal",clicklessTransition:!1,pitchShiftSemitones:11,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:1414.21,linearGain:2},{type:"high-pass",cutoffHz:88.39,linearGain:2},{type:"peak",cutoffHz:1681.79,linearGain:4}],noteSubFilters0:[{type:"low-pass",cutoffHz:1414.21,linearGain:2},{type:"high-pass",cutoffHz:88.39,linearGain:2},{type:"peak",cutoffHz:1681.79,linearGain:4}],distortion:43,aliases:!1,pan:0,panDelay:10,echoSustain:57,echoDelayBeats:1.083,reverb:87,fadeInSeconds:.0575,fadeOutTicks:-1,harmonics:[57,0,0,0,0,0,0,0,0,86,57,0,0,0,0,0,0,0,86,0,0,0,57,29,0,29,100,0],unison:"none",envelopes:[{target:"pitchShift",envelope:"decay 1"}],isDrum:!1}},{name:"frog wuh",generalMidi:!1,settings:{type:"spectrum",eqFilter:[{type:"high-pass",cutoffHz:594.6,linearGain:.5},{type:"peak",cutoffHz:6727.17,linearGain:8},{type:"low-pass",cutoffHz:13454.34,linearGain:.125}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:594.6,linearGain:.5},{type:"peak",cutoffHz:6727.17,linearGain:8},{type:"low-pass",cutoffHz:13454.34,linearGain:.125}],eqSubFilters1:[],effects:["panning","pitch shift","note filter"],pitchShiftSemitones:0,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"low-pass",cutoffHz:1e3,linearGain:1}],noteSubFilters0:[{type:"low-pass",cutoffHz:1e3,linearGain:1}],pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:-3,spectrum:[100,29,14,29,0,14,0,71,0,43,14,71,0,0,71,14,100,0,71,0,43,86,43,0,43,0,0,43,29,29],envelopes:[{target:"pitchShift",envelope:"twang 1"},{target:"noteFilterAllFreqs",envelope:"twang 1"}],isDrum:!1}},{name:"stationary harmonics",generalMidi:!1,settings:{type:"harmonics",eqFilter:[{type:"low-pass",cutoffHz:4756.83,linearGain:.3536},{type:"high-pass",cutoffHz:353.55,linearGain:1},{type:"peak",cutoffHz:1189.21,linearGain:.5}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"low-pass",cutoffHz:4756.83,linearGain:.3536},{type:"high-pass",cutoffHz:353.55,linearGain:1},{type:"peak",cutoffHz:1189.21,linearGain:.5}],effects:["panning","transition type","chord type","vibrato"],transition:"continue",clicklessTransition:!1,chord:"simultaneous",fastTwoNoteArp:!1,arpeggioSpeed:12,vibrato:"shaky",vibratoDepth:.1,vibratoDelay:0,vibratoSpeed:10,vibratoType:1,pan:0,panDelay:10,fadeInSeconds:0,fadeOutTicks:12,harmonics:[100,0,57,29,14,57,29,29,14,14,29,43,14,14,14,0,14,29,29,14,0,0,14,0,0,29,14,14],unison:"stationary",envelopes:[],isDrum:!1}},{name:"dead souls",generalMidi:!1,settings:{type:"spectrum",volume:0,eqFilter:[{type:"low-pass",cutoffHz:8e3,linearGain:.1768},{type:"high-pass",cutoffHz:353.55,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:1.4142}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!0,eqSubFilters0:[{type:"low-pass",cutoffHz:8e3,linearGain:.1768},{type:"high-pass",cutoffHz:353.55,linearGain:.0884},{type:"peak",cutoffHz:707.11,linearGain:1.4142}],effects:["panning","transition type","chord type","pitch shift","detune","distortion","chorus","reverb"],transition:"interrupt",clicklessTransition:!1,chord:"arpeggio",fastTwoNoteArp:!1,arpeggioSpeed:12,pitchShiftSemitones:24,detuneCents:-200,distortion:100,aliases:!1,pan:0,panDelay:10,chorus:14,reverb:35,fadeInSeconds:0,fadeOutTicks:-1,spectrum:[100,71,43,43,29,29,29,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,14,14,0,0],unison:"none",envelopes:[{target:"pitchShift",envelope:"random",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:24,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1.2,steps:16,seed:37,waveform:0},{target:"noteVolume",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:2,waveform:0},{target:"detune",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!0,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:2,waveform:0},{target:"distortion",envelope:"note size",pitchEnvelopeStart:0,pitchEnvelopeEnd:96,inverse:!1,perEnvelopeSpeed:0,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1,steps:2,seed:2,waveform:0}],isDrum:!1}},{name:"flutter",generalMidi:!1,settings:{type:"FM",volume:0,eqFilter:[{type:"high-pass",cutoffHz:707.11,linearGain:1},{type:"peak",cutoffHz:6727.17,linearGain:2.8284}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:707.11,linearGain:1},{type:"peak",cutoffHz:6727.17,linearGain:2.8284}],effects:["panning","transition type","chorus","reverb","ring mod"],transition:"interrupt",clicklessTransition:!1,ringMod:100,ringModHz:100,ringModWaveformIndex:0,pan:0,panDelay:0,chorus:14,reverb:10,fadeInSeconds:0,fadeOutTicks:12,algorithm:"1←3 2←4",feedbackType:"1⟲",feedbackAmplitude:3,operators:[{frequency:"1×",amplitude:15,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:10,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5},{frequency:"1×",amplitude:0,waveform:"sine",pulseWidth:5}],envelopes:[{target:"ringModulationHz",envelope:"fall",inverse:!1,perEnvelopeSpeed:1.5,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1.9},{target:"noteVolume",envelope:"blip",inverse:!1,perEnvelopeSpeed:.25,perEnvelopeLowerBound:0,perEnvelopeUpperBound:1}],isDrum:!1}},{name:"vinyl",generalMidi:!1,settings:{type:"noise",volume:0,eqFilter:[{type:"high-pass",cutoffHz:1414.21,linearGain:.3536},{type:"low-pass",cutoffHz:1189.21,linearGain:.25}],eqFilterType:!1,eqSimpleCut:10,eqSimplePeak:0,envelopeSpeed:12,discreteEnvelope:!1,eqSubFilters0:[{type:"high-pass",cutoffHz:1414.21,linearGain:.3536},{type:"low-pass",cutoffHz:1189.21,linearGain:.25}],effects:["panning","transition type","note filter","distortion","bitcrusher","chorus","echo","reverb"],transition:"interrupt",clicklessTransition:!1,noteFilterType:!1,noteSimpleCut:10,noteSimplePeak:0,noteFilter:[{type:"high-pass",cutoffHz:250,linearGain:.5},{type:"low-pass",cutoffHz:8e3,linearGain:1}],noteSubFilters0:[{type:"high-pass",cutoffHz:250,linearGain:.5},{type:"low-pass",cutoffHz:8e3,linearGain:1}],distortion:14,aliases:!1,bitcrusherOctave:5.5,bitcrusherQuantization:14,pan:0,panDelay:10,chorus:29,echoSustain:14,echoDelayBeats:.083,reverb:32,fadeInSeconds:0,fadeOutTicks:24,wave:"crackling",unison:"none",envelopes:[],isDrum:!1}}])}]);class N{constructor(){this.i=1,this.o=[void 0],this.l=0,this.p=0,this.h=0}pushFront(e){this.h>=this.i&&this.u(),this.p=this.p-1&this.l,this.o[this.p]=e,this.h++}pushBack(e){this.h>=this.i&&this.u(),this.o[this.p+this.h&this.l]=e,this.h++}popFront(){if(this.h<=0)throw new Error("No elements left to pop.");const e=this.o[this.p];return this.o[this.p]=void 0,this.p=this.p+1&this.l,this.h--,e}popBack(){if(this.h<=0)throw new Error("No elements left to pop.");this.h--;const e=this.p+this.h&this.l,t=this.o[e];return this.o[e]=void 0,t}peakFront(){if(this.h<=0)throw new Error("No elements left to pop.");return this.o[this.p]}peakBack(){if(this.h<=0)throw new Error("No elements left to pop.");return this.o[this.p+this.h-1&this.l]}count(){return this.h}set(e,t){if(e<0||e>=this.h)throw new Error("Invalid index");this.o[this.p+e&this.l]=t}get(e){if(e<0||e>=this.h)throw new Error("Invalid index");return this.o[this.p+e&this.l]}remove(e){if(e<0||e>=this.h)throw new Error("Invalid index");if(e<=this.h>>1){for(;e>0;)this.set(e,this.get(e-1)),e--;this.popFront()}else{for(e++;e<this.h;)this.set(e-1,this.get(e)),e++;this.popBack()}}u(){if(this.i>=1073741824)throw new Error("Capacity too big.");this.i=this.i<<1;const e=this.o,t=new Array(this.i),n=0|this.h,i=0|this.p;for(let s=0;s<n;s++)t[s]=e[i+s&this.l];for(let e=n;e<this.i;e++)t[e]=void 0;this.p=0,this.o=t,this.l=this.i-1}}const B=new class{constructor(){this.activeEvents=[],this.listeners={},this.activeEvents=[],this.listeners={}}raise(e,t,n){if(null!=this.listeners[e]){this.activeEvents.push(e);for(let i=0;i<this.listeners[e].length;i++)this.listeners[e][i](t,n);this.activeEvents.pop()}}listen(e,t){null==this.listeners[e]&&(this.listeners[e]=[]),this.listeners[e].push(t)}unlisten(e,t){if(null==this.listeners[e])return;const n=this.listeners[e].indexOf(t);-1!=n&&this.listeners[e].splice(n,1)}unlistenAll(e){null!=this.listeners[e]&&(this.listeners[e]=[])}};class V{constructor(){this.a=[1],this.b=[1],this.order=0}linearGain0thOrder(e){this.b[0]=e,this.order=0}lowPass1stOrderButterworth(e){const t=1/Math.tan(.5*e),n=1+t;this.a[1]=(1-t)/n,this.b[1]=this.b[0]=1/n,this.order=1}lowPass1stOrderSimplified(e){const t=2*Math.sin(.5*e);this.a[1]=t-1,this.b[0]=t,this.b[1]=0,this.order=1}highPass1stOrderButterworth(e){const t=1/Math.tan(.5*e),n=1+t;this.a[1]=(1-t)/n,this.b[0]=t/n,this.b[1]=-t/n,this.order=1}highShelf1stOrder(e,t){const n=Math.tan(.5*e),i=Math.sqrt(t),s=(n*i-1)/(n*i+1);this.a[1]=s/1,this.b[0]=(1+s+t*(1-s))/2,this.b[1]=(1+s-t*(1-s))/2,this.order=1}allPass1stOrderInvertPhaseAbove(e){const t=(Math.sin(e)-1)/Math.cos(e);this.a[1]=t,this.b[0]=t,this.b[1]=1,this.order=1}allPass1stOrderFractionalDelay(e){const t=(1-e)/(1+e);this.a[1]=t,this.b[0]=t,this.b[1]=1,this.order=1}lowPass2ndOrderButterworth(e,t){const n=Math.sin(e)/(2*t),i=Math.cos(e),s=1+n;this.a[1]=-2*i/s,this.a[2]=(1-n)/s,this.b[2]=this.b[0]=(1-i)/(2*s),this.b[1]=(1-i)/s,this.order=2}lowPass2ndOrderSimplified(e,t){const n=2*Math.sin(e/2),i=1-1/(2*t),s=i+i/(1-n);this.a[1]=2*n+(n-1)*n*s-2,this.a[2]=(n-1)*(n-n*s-1),this.b[0]=n*n,this.b[1]=0,this.b[2]=0,this.order=2}highPass2ndOrderButterworth(e,t){const n=Math.sin(e)/(2*t),i=Math.cos(e),s=1+n;this.a[1]=-2*i/s,this.a[2]=(1-n)/s,this.b[2]=this.b[0]=(1+i)/(2*s),this.b[1]=-(1+i)/s,this.order=2}highShelf2ndOrder(e,t,n){const i=Math.sqrt(t),s=Math.cos(e),a=i+1,o=i-1,r=.5*Math.sin(e)*Math.sqrt(a/i*(1/n-1)+2),l=2*Math.sqrt(i)*r,p=a-o*s+l;this.a[1]=2*(o-a*s)/p,this.a[2]=(a-o*s-l)/p,this.b[0]=i*(a+o*s+l)/p,this.b[1]=-2*i*(o+a*s)/p,this.b[2]=i*(a+o*s-l)/p,this.order=2}peak2ndOrder(e,t,n){const i=Math.sqrt(t),s=n*e/(i>=1?i:1/i),a=Math.tan(.5*s),o=1+a/i;this.b[0]=(1+a*i)/o,this.b[1]=this.a[1]=-2*Math.cos(e)/o,this.b[2]=(1-a*i)/o,this.a[2]=(1-a/i)/o,this.order=2}}class ${constructor(){this.real=0,this.imag=0,this.denom=1}analyze(e,t){this.analyzeComplex(e,Math.cos(t),Math.sin(t))}analyzeComplex(e,t,n){const i=e.a,s=e.b,a=t,o=-n;let r=s[0]+s[1]*a,l=s[1]*o,p=1+i[1]*a,h=i[1]*o,u=a,c=o;for(let t=2;t<=e.order;t++){const e=u*o+c*a;u=u*a-c*o,c=e,r+=s[t]*u,l+=s[t]*c,p+=i[t]*u,h+=i[t]*c}this.denom=p*p+h*h,this.real=r*p+l*h,this.imag=l*p-r*h}magnitude(){return Math.sqrt(this.real*this.real+this.imag*this.imag)/this.denom}angle(){return Math.atan2(this.imag,this.real)}}class U{constructor(){this.a1=0,this.a2=0,this.b0=1,this.b1=0,this.b2=0,this.a1Delta=0,this.a2Delta=0,this.b0Delta=0,this.b1Delta=0,this.b2Delta=0,this.output1=0,this.output2=0,this.useMultiplicativeInputCoefficients=!1}resetOutput(){this.output1=0,this.output2=0}loadCoefficientsWithGradient(e,t,n,i){if(2!=e.order||2!=t.order)throw new Error;this.a1=e.a[1],this.a2=e.a[2],this.b0=e.b[0],this.b1=e.b[1],this.b2=e.b[2],this.a1Delta=(t.a[1]-e.a[1])*n,this.a2Delta=(t.a[2]-e.a[2])*n,i?(this.b0Delta=Math.pow(t.b[0]/e.b[0],n),this.b1Delta=Math.pow(t.b[1]/e.b[1],n),this.b2Delta=Math.pow(t.b[2]/e.b[2],n)):(this.b0Delta=(t.b[0]-e.b[0])*n,this.b1Delta=(t.b[1]-e.b[1])*n,this.b2Delta=(t.b[2]-e.b[2])*n),this.useMultiplicativeInputCoefficients=i}}function j(e){return 2*Math.atan(.5*e)}const Q=2654435761,_=2246822519,K=3266489917,J=668265263,Y=374761393;let Z;function X(e,t=0){const n="string"==typeof e?(Z??=new TextEncoder).encode(e):e,i=n;let s=t+Y&4294967295,a=0;if(i.length>=16){const e=[t+Q+_&4294967295,t+_&4294967295,t+0&4294967295,t-Q&4294967295],i=n,o=i.length-16;let r=0;for(a=0;(4294967280&a)<=o;a+=4){const t=a,n=i[t+0]+(i[t+1]<<8),s=i[t+2]+(i[t+3]<<8),o=n*_+(s*_<<16);let l=e[r]+o&4294967295;l=l<<13|l>>>19;const p=65535&l,h=l>>>16;e[r]=p*Q+(h*Q<<16)&4294967295,r=r+1&3}s=(e[0]<<1|e[0]>>>31)+(e[1]<<7|e[1]>>>25)+(e[2]<<12|e[2]>>>20)+(e[3]<<18|e[3]>>>14)&4294967295}s=s+n.length&4294967295;const o=n.length-4;for(;a<=o;a+=4){const e=a,t=i[e+0]+(i[e+1]<<8),n=i[e+2]+(i[e+3]<<8);s=s+(t*K+(n*K<<16))&4294967295,s=s<<17|s>>>15,s=(65535&s)*J+((s>>>16)*J<<16)&4294967295}for(;a<i.length;++a){s+=i[a]*Y,s=s<<11|s>>>21,s=(65535&s)*Q+((s>>>16)*Q<<16)&4294967295}return s^=s>>>15,s=((65535&s)*_&4294967295)+((s>>>16)*_<<16),s^=s>>>13,s=((65535&s)*K&4294967295)+((s>>>16)*K<<16),s^=s>>>16,s<0?s+4294967296:s}const ee=1e-24;function te(e,t,n){return n<=(t-=1)?n>=e?n:e:t}function ne(e,t,n){if(e<=n&&n<=t)return n;throw new Error(`Value ${n} not in range [${e}, ${t}]`)}function ie(e,t){let n=parseFloat(e);return Number.isNaN(n)&&(n=t),n}function se(e,t){let n=parseInt(e);return Number.isNaN(n)&&(n=t),n}function ae(e,t){e.push(pe[t>>>30&3]),e.push(pe[t>>>24&63]),e.push(pe[t>>>18&63]),e.push(pe[t>>>12&63]),e.push(pe[t>>>6&63]),e.push(pe[t>>>0&63])}function oe(e,t){let n=0;return n|=he[e.charCodeAt(t++)]<<30,n|=he[e.charCodeAt(t++)]<<24,n|=he[e.charCodeAt(t++)]<<18,n|=he[e.charCodeAt(t++)]<<12,n|=he[e.charCodeAt(t++)]<<6,n|=he[e.charCodeAt(t++)]<<0,n}function re(e,t,n,i,s,a){e.push(pe[t]),e.push(pe[Number(n>0)]);let o=Math.round(1e3*Math.abs(n)),r=Math.floor(o/63);e.push(pe[o%63],pe[r%63],pe[Math.floor(r/63)]),e.push(pe[Number(i>0)]);let l=Math.round(1e3*Math.abs(i)),p=Math.floor(l/63);e.push(pe[l%63],pe[p%63],pe[Math.floor(p/63)]),e.push(pe[Number(s>0)]);let h=Math.round(1e3*Math.abs(s));e.push(pe[h%63],pe[Math.floor(h/63)]),e.push(pe[Number(a>0)]);let u=Math.round(1e3*Math.abs(a));e.push(pe[u%63],pe[Math.floor(u/63)])}function le(e){let t=te(0,u.keys.length,e),n=0;return 12===e?(t=0,n=1):13===e?(t=6,n=-1):14===e?(t=0,n=-1):15===e&&(t=5,n=-1),[t,n]}const pe=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95],he=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0];class ue{constructor(e,t,n){this.m=[],this.v=0;for(let i=t;i<n;i++){const t=he[e.charCodeAt(i)];this.m.push(t>>5&1),this.m.push(t>>4&1),this.m.push(t>>3&1),this.m.push(t>>2&1),this.m.push(t>>1&1),this.m.push(1&t)}}read(e){let t=0;for(;e>0;)t<<=1,t+=this.m[this.v++],e--;return t}readLongTail(e,t){let n=e,i=t;for(;this.m[this.v++];)n+=1<<i,i++;for(;i>0;)i--,this.m[this.v++]&&(n+=1<<i);return n}readPartDuration(){return this.readLongTail(1,3)}readLegacyPartDuration(){return this.readLongTail(1,2)}readPinCount(){return this.readLongTail(1,0)}readPitchInterval(){return this.read(1)?-this.readLongTail(1,3):this.readLongTail(1,3)}}class ce{constructor(){this.g=0,this.m=[]}clear(){this.g=0}write(e,t){for(e--;e>=0;)this.m[this.g++]=t>>>e&1,e--}writeLongTail(e,t,n){if(n<e)throw new Error("value out of bounds");n-=e;let i=t;for(;n>=1<<i;)this.m[this.g++]=1,n-=1<<i,i++;for(this.m[this.g++]=0;i>0;)i--,this.m[this.g++]=n>>>i&1}writePartDuration(e){this.writeLongTail(1,3,e)}writePinCount(e){this.writeLongTail(1,0,e)}writePitchInterval(e){e<0?(this.write(1,1),this.writeLongTail(1,3,-e)):(this.write(1,0),this.writeLongTail(1,3,e))}concat(e){for(let t=0;t<e.g;t++)this.m[this.g++]=e.m[t]}encodeBase64(e){for(let t=0;t<this.g;t+=6){const n=this.m[t]<<5|this.m[t+1]<<4|this.m[t+2]<<3|this.m[t+3]<<2|this.m[t+4]<<1|this.m[t+5];e.push(pe[n])}return e}lengthBase64(){return Math.ceil(this.g/6)}}function fe(e,t,n){return{interval:e,time:t,size:n}}class de{constructor(e,t,n,i,s=!1){this.pitches=[e],this.pins=[fe(0,0,i),fe(0,n-t,s?0:i)],this.start=t,this.end=n,this.continuesLastPattern=!1}pickMainInterval(){let e=0,t=0;for(let n=1;n<this.pins.length;n++){const i=this.pins[n-1],s=this.pins[n];if(i.interval==s.interval){const n=s.time-i.time;e<n&&(e=n,t=i.interval)}}if(0==e){let e=0;for(let n=0;n<this.pins.length;n++){const i=this.pins[n];e<i.size&&(e=i.size,t=i.interval)}}return t}clone(){const e=new de(-1,this.start,this.end,3);e.pitches=this.pitches.concat(),e.pins=[];for(const t of this.pins)e.pins.push(fe(t.interval,t.time,t.size));return e.continuesLastPattern=this.continuesLastPattern,e}getEndPinIndex(e){let t;for(t=1;t<this.pins.length-1&&!(this.pins[t].time+this.start>e);t++);return t}}class me{constructor(){this.notes=[],this.instruments=[0]}cloneNotes(){const e=[];for(const t of this.notes)e.push(t.clone());return e}reset(){this.notes.length=0,this.instruments[0]=0,this.instruments.length=1}toJsonObject(e,t,n){const i=[];for(const s of this.notes){let a=t.instruments[this.instruments[0]],o=Math.max(0,u.modCount-s.pitches[0]-1),r=e.getVolumeCapForSetting(n,a.modulators[o],a.modFilterTypes[o]);const l=[];for(const t of s.pins){let i=n?Math.round(t.size):Math.round(100*t.size/r);l.push({tick:(t.time+s.start)*u.rhythms[e.rhythm].stepsPerBeat/u.partsPerBeat,pitchBend:t.interval,volume:i,forMod:n})}const p={pitches:s.pitches,points:l};0==s.start&&(p.continuesLastPattern=s.continuesLastPattern),i.push(p)}const s={notes:i};return e.patternInstruments&&(s.instruments=this.instruments.map((e=>e+1))),s}fromJsonObject(e,t,n,i,s,a,o="auto"){const r=o.toLowerCase();if(t.patternInstruments)if(Array.isArray(e.instruments)){const i=e.instruments,s=te(u.instrumentCountMin,t.getMaxInstrumentsPerPatternForChannel(n)+1,i.length);for(let e=0;e<s;e++)this.instruments[e]=te(0,n.instruments.length,(0|i[e])-1);this.instruments.length=s}else this.instruments[0]=te(0,n.instruments.length,(0|e.instrument)-1),this.instruments.length=1;if(e.notes&&e.notes.length>0){const o=Math.min(t.beatsPerBar*u.partsPerBeat*(a?u.modCount:1),e.notes.length>>>0);for(let l=0;l<e.notes.length&&!(l>=o);l++){const o=e.notes[l];if(!(o&&o.pitches&&o.pitches.length>=1&&o.points&&o.points.length>=2))continue;const p=new de(0,0,0,0);p.pitches=[],p.pins=[];for(let e=0;e<o.pitches.length;e++){const t=0|o.pitches[e];if(-1==p.pitches.indexOf(t)&&(p.pitches.push(t),p.pitches.length>=u.maxChordSize))break}if(p.pitches.length<1)continue;let h=0,c=n.instruments[this.instruments[0]],f=Math.max(0,u.modCount-p.pitches[0]-1);for(let e=0;e<o.points.length;e++){const n=o.points[e];if(null==n||null==n.tick)continue;const s=null==n.pitchBend?0:0|n.pitchBend,r=Math.round(+n.tick*u.partsPerBeat/i);let l,d=t.getVolumeCapForSetting(a,c.modulators[f],c.modFilterTypes[f]);l=null==n.volume?d:null==n.forMod?Math.max(0,Math.min(d,Math.round((0|n.volume)*d/100))):(0|n.forMod)>0?Math.round(0|n.volume):Math.max(0,Math.min(d,Math.round((0|n.volume)*d/100))),r>t.beatsPerBar*u.partsPerBeat||(0==p.pins.length&&(p.start=r,h=s),p.pins.push(fe(s-h,r-p.start,l)))}if(p.pins.length<2)continue;p.end=p.pins[p.pins.length-1].time+p.start;const d=s?u.drumCount-1:u.maxPitch;let m=d,v=0;for(let e=0;e<p.pitches.length;e++)p.pitches[e]+=h,(p.pitches[e]<0||p.pitches[e]>d)&&(p.pitches.splice(e,1),e--),p.pitches[e]<m&&(m=p.pitches[e]),p.pitches[e]>v&&(v=p.pitches[e]);if(!(p.pitches.length<1)){for(let e=0;e<p.pins.length;e++){const t=p.pins[e];t.interval+m<0&&(t.interval=-m),t.interval+v>d&&(t.interval=d-v),e>=2&&t.interval==p.pins[e-1].interval&&t.interval==p.pins[e-2].interval&&t.size==p.pins[e-1].size&&t.size==p.pins[e-2].size&&(p.pins.splice(e-1,1),e--)}if(0==p.start?p.continuesLastPattern=!0===o.continuesLastPattern:p.continuesLastPattern=!1,"ultrabox"!=r&&"slarmoosbox"!=r&&c.modulators[f]==u.modulators.dictionary.tempo.index)for(const e of p.pins){const t=30,n=1,i=e.size+t;e.size=i-n}this.notes.push(p)}}}}}class ve{constructor(e){this.frequency=4,this.amplitude=0,this.waveform=0,this.pulseWidth=.5,this.reset(e)}reset(e){this.frequency=4,this.amplitude=e<=1?u.operatorAmplitudeMax:0,this.waveform=0,this.pulseWidth=5}copy(e){this.frequency=e.frequency,this.amplitude=e.amplitude,this.waveform=e.waveform,this.pulseWidth=e.pulseWidth}}class ye{constructor(){this.name="",this.carrierCount=0,this.modulatedBy=[[],[],[],[],[],[]],this.associatedCarrier=[],this.fromPreset(1)}set(e,t){this.reset(),this.carrierCount=e;for(let n=0;n<this.modulatedBy.length;n++){this.modulatedBy[n]=t[n],n<e&&(this.associatedCarrier[n]=n+1),this.name+=n+1;for(let i=0;i<t[n].length;i++)this.name+=t[n][i],t[n][i]>e-1&&(this.associatedCarrier[t[n][i]-1]=n+1),this.name+=",";this.name+=n<e?"|":"."}}reset(){this.name="",this.carrierCount=1,this.modulatedBy=[[2,3,4,5,6],[],[],[],[],[]],this.associatedCarrier=[1,1,1,1,1,1]}copy(e){this.name=e.name,this.carrierCount=e.carrierCount,this.modulatedBy=e.modulatedBy,this.associatedCarrier=e.associatedCarrier}fromPreset(e){this.reset();let t=u.algorithms6Op[e];this.name=t.name,this.carrierCount=t.carrierCount;for(var n=0;n<t.modulatedBy.length;n++)this.modulatedBy[n]=Array.from(t.modulatedBy[n]),this.associatedCarrier[n]=t.associatedCarrier[n]}}class ge{constructor(){this.name="",this.indices=[[],[],[],[],[],[]],this.fromPreset(1)}set(e){this.reset();for(let t=0;t<this.indices.length;t++){this.indices[t]=e[t];for(let n=0;n<e[t].length;n++)this.name+=e[t][n],this.name+=",";this.name+="."}}reset(){this.reset,this.name="",this.indices=[[1],[],[],[],[],[]]}copy(e){this.name=e.name,this.indices=e.indices}fromPreset(e){this.reset();let t=u.feedbacks6Op[e];for(var n=0;n<t.indices.length;n++){this.indices[n]=Array.from(t.indices[n]);for(let e=0;e<t.indices[n].length;e++)this.name+=t.indices[n][e],this.name+=",";this.name+="."}}}class be{constructor(e){this.spectrum=[],this.hash=-1,this.reset(e)}reset(e){for(let t=0;t<u.spectrumControlPoints;t++)if(e)this.spectrum[t]=Math.round(u.spectrumMax*(1/Math.sqrt(1+t/3)));else{const e=0==t||7==t||11==t||14==t||16==t||18==t||21==t||23==t||t>=25;this.spectrum[t]=e?Math.max(0,Math.round(u.spectrumMax*(1-t/30))):0}this.markCustomWaveDirty()}markCustomWaveDirty(){const e=Ge.fittingPowerOfTwo(u.spectrumMax+2)-1;let t=0;for(const n of this.spectrum)t=t*e+n>>>0;this.hash=t}}class Se{constructor(){this.wave=null,this.S=-1}getCustomWave(e,t){if(this.S==e.hash)return this.wave;this.S=e.hash;const n=u.spectrumNoiseLength;null!=this.wave&&this.wave.length==n+1||(this.wave=new Float32Array(n+1));const i=this.wave;for(let e=0;e<n;e++)i[e]=0;const s=[0,1/7,Math.log2(5/4),3/7,Math.log2(1.5),5/7,6/7];function a(e){return t+Math.floor(e/u.spectrumControlPointsPerOctave)+s[(e+u.spectrumControlPointsPerOctave)%u.spectrumControlPointsPerOctave]}let o=1;for(let t=0;t<u.spectrumControlPoints+1;t++){const s=t<=0?0:e.spectrum[t-1],r=t>=u.spectrumControlPoints?e.spectrum[u.spectrumControlPoints-1]:e.spectrum[t],l=a(t-1);let p=a(t);t>=u.spectrumControlPoints&&(p=14+.25*(p-14)),0==s&&0==r||(o+=.02*y(i,n,l,p,s/u.spectrumMax,r/u.spectrumMax,-.5))}return e.spectrum[u.spectrumControlPoints-1]>0&&(o+=.02*y(i,n,14+.25*(a(u.spectrumControlPoints)-14),14,e.spectrum[u.spectrumControlPoints-1]/u.spectrumMax,0,-.5)),R(i,n),W(i,5/(Math.sqrt(n)*Math.pow(o,.75))),i[n]=i[0],i}}class we{constructor(){this.harmonics=[],this.hash=-1,this.reset()}reset(){for(let e=0;e<u.harmonicsControlPoints;e++)this.harmonics[e]=0;this.harmonics[0]=u.harmonicsMax,this.harmonics[3]=u.harmonicsMax,this.harmonics[6]=u.harmonicsMax,this.markCustomWaveDirty()}markCustomWaveDirty(){const e=Ge.fittingPowerOfTwo(u.harmonicsMax+2)-1;let t=0;for(const n of this.harmonics)t=t*e+n>>>0;this.hash=t}}class xe{constructor(){this.wave=null,this.S=-1}getCustomWave(e,t){if(this.S==e.hash&&this.M==t)return this.wave;this.S=e.hash,this.M=t;const n=7==t?u.harmonicsRenderedForPickedString:u.harmonicsRendered,i=u.harmonicsWavelength,s=v(0,null,null);null!=this.wave&&this.wave.length==i+1||(this.wave=new Float32Array(i+1));const a=this.wave;for(let e=0;e<i;e++)a[e]=0;let o=1;for(let t=0;t<n;t++){const r=t+1;let l=t<u.harmonicsControlPoints?e.harmonics[t]:e.harmonics[u.harmonicsControlPoints-1];t>=u.harmonicsControlPoints&&(l*=1-(t-u.harmonicsControlPoints)/(n-u.harmonicsControlPoints));const p=l/u.harmonicsMax;let h=Math.pow(2,l-u.harmonicsMax+1)*Math.sqrt(p);t<u.harmonicsControlPoints&&(o+=h),h*=Math.pow(r,-.25),h*=s[t+589],a[i-r]=h}R(a,i);const r=1/Math.pow(o,.7);for(let e=0;e<a.length;e++)a[e]*=r;return function(e){let t=0;for(let n=0;n<e.length;n++){const i=e[n];e[n]=t,t+=i}}(a),a[i]=a[0],a}}class Me{constructor(){this.delayLinePosition=0,this.ageInSamples=0,this.maxAgeInSamples=0,this.delay=0,this.parabolicEnvelopeAmplitude=0,this.parabolicEnvelopeSlope=0,this.parabolicEnvelopeCurve=0,this.rcbEnvelopeAmplitude=0,this.rcbEnvelopeAttackIndex=0,this.rcbEnvelopeReleaseIndex=0,this.rcbEnvelopeSustain=0}initializeParabolicEnvelope(e,t){this.parabolicEnvelopeAmplitude=0;const n=1/e,i=n*n;this.parabolicEnvelopeSlope=4*t*(n-i),this.parabolicEnvelopeCurve=-8*t*i}updateParabolicEnvelope(){this.parabolicEnvelopeAmplitude+=this.parabolicEnvelopeSlope,this.parabolicEnvelopeSlope+=this.parabolicEnvelopeCurve}initializeRCBEnvelope(e,t){this.rcbEnvelopeAttackIndex=Math.floor(e/6),this.rcbEnvelopeSustain=t,this.rcbEnvelopeReleaseIndex=Math.floor(5*e/6)}updateRCBEnvelope(){this.ageInSamples<this.rcbEnvelopeAttackIndex?this.rcbEnvelopeAmplitude=1+Math.cos(Math.PI+Math.PI*(this.ageInSamples/this.rcbEnvelopeAttackIndex)*(this.rcbEnvelopeSustain/2)):this.ageInSamples>this.rcbEnvelopeReleaseIndex&&(this.rcbEnvelopeAmplitude=1+Math.cos(Math.PI*((this.ageInSamples-this.rcbEnvelopeReleaseIndex)/this.rcbEnvelopeAttackIndex))*(this.rcbEnvelopeSustain/2))}addDelay(e){this.delay=e}}class Fe{constructor(){this.freq=0,this.gain=u.filterGainCenter,this.type=2}set(e,t){this.freq=e,this.gain=t}getHz(){return Fe.getHzFromSettingValue(this.freq)}static getHzFromSettingValue(e){return u.filterFreqReferenceHz*Math.pow(2,(e-u.filterFreqReferenceSetting)*u.filterFreqStep)}static getSettingValueFromHz(e){return Math.log2(e/u.filterFreqReferenceHz)/u.filterFreqStep+u.filterFreqReferenceSetting}static getRoundedSettingValueFromHz(e){return Math.max(0,Math.min(u.filterFreqRange-1,Math.round(Fe.getSettingValueFromHz(e))))}getLinearGain(e=1){const t=(this.gain-u.filterGainCenter)*u.filterGainStep,n=2==this.type?0:-.5,i=n+(t-n)*e;return Math.pow(2,i)}static getRoundedSettingValueFromLinearGain(e){return Math.max(0,Math.min(u.filterGainRange-1,Math.round(Math.log2(e)/u.filterGainStep+u.filterGainCenter)))}toCoefficients(e,t,n=1,i=1){const s=2*Math.PI*Math.max(u.filterFreqMinHz,Math.min(u.filterFreqMaxHz,n*this.getHz()))/t,a=this.getLinearGain(i);switch(this.type){case 0:e.lowPass2ndOrderButterworth(s,a);break;case 1:e.highPass2ndOrderButterworth(s,a);break;case 2:e.peak2ndOrder(s,a,1);break;default:throw new Error}}getVolumeCompensationMult(){const e=(this.freq-u.filterFreqReferenceSetting)*u.filterFreqStep,t=(this.gain-u.filterGainCenter)*u.filterGainStep;switch(this.type){case 0:const n=Math.pow(2,e)*u.filterFreqReferenceHz/8e3,i=(Math.sqrt(1+4*n)-1)/2,s=Math.log2(i);return Math.pow(.5,.2*Math.max(0,t+1)+Math.min(0,Math.max(-3,.595*s+.35*Math.min(0,t+1))));case 1:return Math.pow(.5,.125*Math.max(0,t+1)+Math.min(0,.3*(-e-Math.log2(u.filterFreqReferenceHz/125))+.2*Math.min(0,t+1)));case 2:const a=e+Math.log2(u.filterFreqReferenceHz/2e3),o=Math.pow(1/(1+Math.pow(a/3,2)),2);return Math.pow(.5,.125*Math.max(0,t)+.1*o*Math.min(0,t));default:throw new Error}}}class ke{constructor(){this.controlPoints=[],this.controlPointCount=0,this.reset()}reset(){this.controlPointCount=0}addPoint(e,t,n){let i;this.controlPoints.length<=this.controlPointCount?(i=new Fe,this.controlPoints[this.controlPointCount]=i):i=this.controlPoints[this.controlPointCount],this.controlPointCount++,i.type=e,i.set(t,n)}toJsonObject(){const e=[];for(let t=0;t<this.controlPointCount;t++){const n=this.controlPoints[t];e.push({type:u.filterTypeNames[n.type],cutoffHz:Math.round(100*n.getHz())/100,linearGain:Math.round(1e4*n.getLinearGain())/1e4})}return e}fromJsonObject(e){if(this.controlPoints.length=0,e)for(const t of e){const e=new Fe;e.type=u.filterTypeNames.indexOf(t.type),-1==e.type&&(e.type=2),null!=t.cutoffHz?e.freq=Fe.getRoundedSettingValueFromHz(t.cutoffHz):e.freq=0,null!=t.linearGain?e.gain=Fe.getRoundedSettingValueFromLinearGain(t.linearGain):e.gain=u.filterGainCenter,this.controlPoints.push(e)}this.controlPointCount=this.controlPoints.length}static filtersCanMorph(e,t){if(e.controlPointCount!=t.controlPointCount)return!1;for(let n=0;n<e.controlPointCount;n++)if(e.controlPoints[n].type!=t.controlPoints[n].type)return!1;return!0}static lerpFilters(e,t,n){let i=new ke;if(null==e)return e;if(null==t)return t;if(n=Math.max(0,Math.min(1,n)),this.filtersCanMorph(e,t)){for(let s=0;s<e.controlPointCount;s++)i.controlPoints[s]=new Fe,i.controlPoints[s].type=e.controlPoints[s].type,i.controlPoints[s].freq=e.controlPoints[s].freq+(t.controlPoints[s].freq-e.controlPoints[s].freq)*n,i.controlPoints[s].gain=e.controlPoints[s].gain+(t.controlPoints[s].gain-e.controlPoints[s].gain)*n;return i.controlPointCount=e.controlPointCount,i}return n>=1?t:e}convertLegacySettings(e,t,n){this.reset();const i=2*Math.asin(.475),s=t>1,a=0==t,o=10==e,r=5==n.type||6==n.type||10==n.type||1==n.type,l=48e3,p=8e3*Math.pow(2,.5*(e-10)),h=Math.min(i,2*Math.PI*p/l);if(0==n.type&&!s&&o);else if(a){const e=3.5,t=h*Math.pow(2,e),n=l*(t/(1+t/Math.PI))/(2*Math.PI),i=Fe.getRoundedSettingValueFromHz(n),s=Fe.getHzFromSettingValue(i),a=2*Math.PI*s/l,o=new V;o.lowPass1stOrderSimplified(h);const p=new $;p.analyze(o,a);const u=p.magnitude();let c=Math.log2(u);c=.82*(c+e)-e,r&&(c=Math.min(c,-1));const f=Math.pow(2,c),d=Fe.getRoundedSettingValueFromLinearGain(f);this.addPoint(0,i,d)}else{const e=.5/(1-.95*Math.sqrt(Math.max(0,t-1)/6)),n=.5/e,i=h+(h*(h/(2*Math.PI*8e3/l)*Math.pow(n,.9)+1)-h)*n;let a;a=r?l*Math.min(i,h*Math.pow(2,.25))/(2*Math.PI):l*i/(2*Math.PI);const o=Fe.getRoundedSettingValueFromHz(a);let p;if(r)p=e;else{const t=new V;t.lowPass2ndOrderSimplified(h,e);const n=new $;n.analyze(t,i),p=n.magnitude()}s||(p=Math.min(p,Math.sqrt(.5)));const u=Fe.getRoundedSettingValueFromLinearGain(p);this.addPoint(0,o,u)}this.controlPoints.length=this.controlPointCount}convertLegacySettingsForSynth(e,t,n=!1){this.reset();const i=2*Math.asin(.475),s=0==t&&n,a=48e3,o=8e3*Math.pow(2,.5*(e-10)),r=Math.min(i,2*Math.PI*o/a);if(s){const e=3.5,t=r*Math.pow(2,e),n=a*(t/(1+t/Math.PI))/(2*Math.PI),i=Fe.getRoundedSettingValueFromHz(n),s=Fe.getHzFromSettingValue(i),o=2*Math.PI*s/a,l=new V;l.lowPass1stOrderSimplified(r);const p=new $;p.analyze(l,o);const h=p.magnitude();let u=Math.log2(h);u=.82*(u+e)-e;const c=Math.pow(2,u),f=Fe.getRoundedSettingValueFromLinearGain(c);this.addPoint(0,i,f)}else{const e=.5/(1-.95*Math.sqrt(Math.max(0,t-1)/6)),n=.5/e,i=r+(r*(r/(2*Math.PI*8e3/a)*Math.pow(n,.9)+1)-r)*n;let s;s=a*i/(2*Math.PI);const o=Fe.getSettingValueFromHz(s);let l;const p=new V;p.lowPass2ndOrderSimplified(r,e);const h=new $;h.analyze(p,i),l=h.magnitude();const u=Fe.getRoundedSettingValueFromLinearGain(l);this.addPoint(0,o,u)}}}class Ie{constructor(e){this.isNoiseEnvelope=e,this.target=0,this.index=0,this.envelope=0,this.perEnvelopeSpeed=u.envelopes[this.envelope].speed,this.perEnvelopeLowerBound=0,this.perEnvelopeUpperBound=1,this.tempEnvelopeSpeed=null,this.tempEnvelopeLowerBound=null,this.tempEnvelopeUpperBound=null,this.steps=2,this.seed=2,this.waveform=0,this.discrete=!1,this.reset()}reset(){this.target=0,this.index=0,this.envelope=0,this.pitchEnvelopeStart=0,this.pitchEnvelopeEnd=this.isNoiseEnvelope?u.drumCount-1:u.maxPitch,this.inverse=!1,this.isNoiseEnvelope=!1,this.perEnvelopeSpeed=u.envelopes[this.envelope].speed,this.perEnvelopeLowerBound=0,this.perEnvelopeUpperBound=1,this.tempEnvelopeSpeed=null,this.tempEnvelopeLowerBound=null,this.tempEnvelopeUpperBound=null,this.steps=2,this.seed=2,this.waveform=0,this.discrete=!1}toJsonObject(){const e={target:u.instrumentAutomationTargets[this.target].name,envelope:u.newEnvelopes[this.envelope].name,inverse:this.inverse,perEnvelopeSpeed:this.perEnvelopeSpeed,perEnvelopeLowerBound:this.perEnvelopeLowerBound,perEnvelopeUpperBound:this.perEnvelopeUpperBound,discrete:this.discrete};return u.instrumentAutomationTargets[this.target].maxCount>1&&(e.index=this.index),"pitch"==u.newEnvelopes[this.envelope].name?(e.pitchEnvelopeStart=this.pitchEnvelopeStart,e.pitchEnvelopeEnd=this.pitchEnvelopeEnd):"random"==u.newEnvelopes[this.envelope].name?(e.steps=this.steps,e.seed=this.seed,e.waveform=this.waveform):"lfo"==u.newEnvelopes[this.envelope].name&&(e.waveform=this.waveform,e.steps=this.steps),e}fromJsonObject(e,t){this.reset();let n=u.instrumentAutomationTargets.dictionary[e.target];null==n&&(n=u.instrumentAutomationTargets.dictionary.noteVolume),this.target=n.index;let i=u.envelopes.dictionary.none,s=!1;"slarmoosbox"==t?"tremolo2"==e.envelope?(i=u.newEnvelopes[8],s=!0):"tremolo"==e.envelope?(i=u.newEnvelopes[8],s=!1):i=u.newEnvelopes.dictionary[e.envelope]:9==u.envelopes.dictionary[e.envelope].type?(i=u.newEnvelopes[8],s=!0):i=u.newEnvelopes[Math.max(u.envelopes.dictionary[e.envelope].type-1,0)].index>8?u.newEnvelopes[u.envelopes.dictionary[e.envelope].type-1]:u.newEnvelopes[u.envelopes.dictionary[e.envelope].type],null==i&&(9==u.envelopes.dictionary[e.envelope].type?(i=u.newEnvelopes[8],s=!0):i=u.newEnvelopes[Math.max(u.envelopes.dictionary[e.envelope].type-1,0)].index>8?u.newEnvelopes[u.envelopes.dictionary[e.envelope].type-1]:u.newEnvelopes[u.envelopes.dictionary[e.envelope].type]),null==i&&(i=u.envelopes.dictionary.none),this.envelope=i.index,null!=e.index?this.index=te(0,u.instrumentAutomationTargets[this.target].maxCount,0|e.index):this.index=0,null!=e.pitchEnvelopeStart?this.pitchEnvelopeStart=te(0,this.isNoiseEnvelope?u.drumCount:u.maxPitch+1,e.pitchEnvelopeStart):this.pitchEnvelopeStart=0,null!=e.pitchEnvelopeEnd?this.pitchEnvelopeEnd=te(0,this.isNoiseEnvelope?u.drumCount:u.maxPitch+1,e.pitchEnvelopeEnd):this.pitchEnvelopeEnd=this.isNoiseEnvelope?u.drumCount:u.maxPitch,this.inverse=Boolean(e.inverse),null!=e.perEnvelopeSpeed?this.perEnvelopeSpeed=e.perEnvelopeSpeed:this.perEnvelopeSpeed=u.envelopes.dictionary[e.envelope].speed,null!=e.perEnvelopeLowerBound?this.perEnvelopeLowerBound=te(u.perEnvelopeBoundMin,u.perEnvelopeBoundMax+1,e.perEnvelopeLowerBound):this.perEnvelopeLowerBound=0,null!=e.perEnvelopeUpperBound?this.perEnvelopeUpperBound=te(u.perEnvelopeBoundMin,u.perEnvelopeBoundMax+1,e.perEnvelopeUpperBound):this.perEnvelopeUpperBound=1,s&&(this.inverse?(this.perEnvelopeUpperBound=Math.floor(this.perEnvelopeUpperBound/2*10)/10,this.perEnvelopeLowerBound=Math.floor(this.perEnvelopeLowerBound/2*10)/10):(this.perEnvelopeUpperBound=Math.floor(10*(.5+(this.perEnvelopeUpperBound-this.perEnvelopeLowerBound)/2))/10,this.perEnvelopeLowerBound=.5)),null!=e.steps?this.steps=te(1,u.randomEnvelopeStepsMax+1,e.steps):this.steps=2,null!=e.seed?this.seed=te(1,u.randomEnvelopeSeedMax+1,e.seed):this.seed=2,null!=e.waveform?this.waveform=e.waveform:this.waveform=0,null!=e.discrete?this.discrete=e.discrete:this.discrete=!1}}class qe{constructor(){this.resetToDefault()}resetToDefault(){this.perToneEffects=!1,this.seededRandomization=!1,this.randomSeed=2,this.affectedBySongDetune=!0,this.affectedBySongEq=!0}toJsonObject(){return{perToneEffects:this.perToneEffects,seededRandomization:this.seededRandomization,randomSeed:this.randomSeed,affectedBySongDetune:this.affectedBySongDetune,affectedBySongEq:this.affectedBySongEq}}fromJsonObject(e){this.perToneEffects=e.perToneEffects,this.seededRandomization=e.seededRandomization,this.randomSeed=e.randomSeed,this.affectedBySongDetune=e.affectedBySongDetune,this.affectedBySongEq=e.affectedBySongEq}writeBitfieldChar(){let e=0;return e+=+this.perToneEffects,e<<=1,e+=+this.seededRandomization,e<<=1,e+=+this.affectedBySongDetune,e<<=1,e+=+this.affectedBySongEq,e}readBitfieldChar(e){this.affectedBySongEq=Boolean(1&e),e>>=1,this.affectedBySongDetune=Boolean(1&e),e>>=1,this.seededRandomization=Boolean(1&e),e>>=1,this.perToneEffects=Boolean(1&e)}}class Ee{constructor(e,t){if(this.type=0,this.preset=0,this.chipWave=2,this.isUsingAdvancedLoopControls=!1,this.chipWaveLoopStart=0,this.chipWaveLoopEnd=u.rawRawChipWaves[this.chipWave].samples.length-1,this.chipWaveLoopMode=0,this.chipWavePlayBackwards=!1,this.chipWaveStartOffset=0,this.chipNoise=1,this.advancedSettings=new qe,this.eqFilter=new ke,this.eqFilterType=!1,this.eqFilterSimpleCut=u.filterSimpleCutRange-1,this.eqFilterSimplePeak=0,this.noteFilter=new ke,this.noteFilterType=!1,this.noteFilterSimpleCut=u.filterSimpleCutRange-1,this.noteFilterSimplePeak=0,this.eqSubFilters=[],this.noteSubFilters=[],this.envelopes=[],this.fadeIn=0,this.fadeOut=u.fadeOutNeutral,this.envelopeCount=0,this.transition=u.transitions.dictionary.normal.index,this.pitchShift=0,this.detune=0,this.vibrato=0,this.interval=0,this.vibratoDepth=0,this.vibratoSpeed=10,this.vibratoDelay=0,this.vibratoType=0,this.envelopeSpeed=12,this.unison=0,this.unisonVoices=1,this.unisonSpread=0,this.unisonOffset=0,this.unisonExpression=1.4,this.unisonSign=1,this.effects=0,this.chord=1,this.volume=0,this.pan=u.panCenter,this.panDelay=0,this.arpeggioSpeed=12,this.monoChordTone=0,this.fastTwoNoteArp=!1,this.legacyTieOver=!1,this.clicklessTransition=!1,this.aliases=!1,this.pulseWidth=u.pulseWidthRange,this.decimalOffset=0,this.supersawDynamism=u.supersawDynamismMax,this.supersawSpread=Math.ceil(u.supersawSpreadMax/2),this.supersawShape=0,this.stringSustain=10,this.stringSustainType=1,this.distortion=0,this.bitcrusherFreq=0,this.bitcrusherQuantization=0,this.ringModulation=Math.floor(u.ringModRange/2),this.ringModulationHz=Math.floor(u.ringModHzRange/2),this.ringModWaveformIndex=0,this.ringModPulseWidth=0,this.ringModHzOffset=200,this.granular=4,this.grainSize=(u.grainSizeMax-u.grainSizeMin)/u.grainSizeStep,this.grainAmounts=u.grainAmountsMax,this.grainRange=40,this.chorus=0,this.reverb=0,this.echoSustain=0,this.echoDelay=0,this.algorithm=0,this.feedbackType=0,this.algorithm6Op=1,this.feedbackType6Op=1,this.customAlgorithm=new ye,this.customFeedbackType=new ge,this.feedbackAmplitude=0,this.customChipWave=new Float32Array(64),this.customChipWaveIntegral=new Float32Array(65),this.operators=[],this.harmonicsWave=new we,this.drumsetEnvelopes=[],this.drumsetSpectrumWaves=[],this.modChannels=[],this.modInstruments=[],this.modulators=[],this.modFilterTypes=[],this.modEnvelopeNumbers=[],this.invalidModulators=[],this.isNoiseInstrument=!1,t)for(let e=0;e<u.modCount;e++)this.modChannels.push(-2),this.modInstruments.push(0),this.modulators.push(u.modulators.dictionary.none.index);this.spectrumWave=new be(e);for(let e=0;e<u.operatorCount+2;e++)this.operators[e]=new ve(e);for(let e=0;e<u.drumCount;e++)this.drumsetEnvelopes[e]=u.envelopes.dictionary["twang 2"].index,this.drumsetSpectrumWaves[e]=new be(!0);for(let e=0;e<64;e++)this.customChipWave[e]=24-Math.floor(.75*e);let n=0;for(let e=0;e<this.customChipWave.length;e++)n+=this.customChipWave[e];const i=n/this.customChipWave.length;let s=0,a=0;for(let e=0;e<this.customChipWave.length;e++)s+=a,a=this.customChipWave[e]-i,this.customChipWaveIntegral[e]=s;this.customChipWaveIntegral[64]=0,this.isNoiseInstrument=e}setTypeAndReset(e,t,n){n&&(e=10),this.type=e,this.preset=e,this.volume=0,this.effects=4,this.chorus=u.chorusRange-1,this.reverb=0,this.echoSustain=Math.floor(.5*(u.echoSustainRange-1)),this.echoDelay=Math.floor(.5*(u.echoDelayRange-1)),this.eqFilter.reset(),this.eqFilterType=!1,this.eqFilterSimpleCut=u.filterSimpleCutRange-1,this.eqFilterSimplePeak=0;for(let e=0;e<u.filterMorphCount;e++)this.eqSubFilters[e]=null,this.noteSubFilters[e]=null;switch(this.noteFilter.reset(),this.noteFilterType=!1,this.noteFilterSimpleCut=u.filterSimpleCutRange-1,this.noteFilterSimplePeak=0,this.distortion=Math.floor(.75*(u.distortionRange-1)),this.bitcrusherFreq=Math.floor(.5*(u.bitcrusherFreqRange-1)),this.bitcrusherQuantization=Math.floor(.5*(u.bitcrusherQuantizationRange-1)),this.ringModulation=0,this.ringModulationHz=0,this.ringModWaveformIndex=0,this.ringModPulseWidth=0,this.ringModHzOffset=200,this.granular=4,this.grainSize=(u.grainSizeMax-u.grainSizeMin)/u.grainSizeStep,this.grainAmounts=u.grainAmountsMax,this.grainRange=40,this.pan=u.panCenter,this.panDelay=0,this.pitchShift=u.pitchShiftCenter,this.detune=u.detuneCenter,this.vibrato=0,this.unison=0,this.stringSustain=10,this.stringSustainType=u.enableAcousticSustain?1:0,this.clicklessTransition=!1,this.arpeggioSpeed=12,this.monoChordTone=1,this.envelopeSpeed=12,this.legacyTieOver=!1,this.aliases=!1,this.fadeIn=0,this.fadeOut=u.fadeOutNeutral,this.transition=u.transitions.dictionary.normal.index,this.envelopeCount=0,this.isNoiseInstrument=t,this.advancedSettings.resetToDefault(),e){case 0:this.chipWave=2,this.chord=u.chords.dictionary.arpeggio.index,this.isUsingAdvancedLoopControls=!1,this.chipWaveLoopStart=0,this.chipWaveLoopEnd=u.rawRawChipWaves[this.chipWave].samples.length-1,this.chipWaveLoopMode=0,this.chipWavePlayBackwards=!1,this.chipWaveStartOffset=0;break;case 9:this.chipWave=2,this.chord=u.chords.dictionary.arpeggio.index;for(let e=0;e<64;e++)this.customChipWave[e]=24-Math.floor(.75*e);let n=0;for(let e=0;e<this.customChipWave.length;e++)n+=this.customChipWave[e];const i=n/this.customChipWave.length;let s=0,a=0;for(let e=0;e<this.customChipWave.length;e++)s+=a,a=this.customChipWave[e]-i,this.customChipWaveIntegral[e]=s;this.customChipWaveIntegral[64]=0;break;case 1:this.chord=u.chords.dictionary["custom interval"].index,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0;for(let e=0;e<this.operators.length;e++)this.operators[e].reset(e);break;case 11:this.transition=1,this.vibrato=0,this.effects=1,this.chord=3,this.algorithm=0,this.feedbackType=0,this.algorithm6Op=1,this.feedbackType6Op=1,this.customAlgorithm.fromPreset(1),this.feedbackAmplitude=0;for(let e=0;e<this.operators.length;e++)this.operators[e].reset(e);break;case 2:this.chipNoise=1,this.chord=u.chords.dictionary.arpeggio.index;break;case 3:this.chord=u.chords.dictionary.simultaneous.index,this.spectrumWave.reset(t);break;case 4:this.chord=u.chords.dictionary.simultaneous.index;for(let e=0;e<u.drumCount;e++)this.drumsetEnvelopes[e]=u.envelopes.dictionary["twang 2"].index,null==this.drumsetSpectrumWaves[e]&&(this.drumsetSpectrumWaves[e]=new be(!0)),this.drumsetSpectrumWaves[e].reset(t);break;case 5:this.chord=u.chords.dictionary.simultaneous.index,this.harmonicsWave.reset();break;case 6:this.chord=u.chords.dictionary.arpeggio.index,this.pulseWidth=u.pulseWidthRange,this.decimalOffset=0;break;case 7:this.chord=u.chords.dictionary.strum.index,this.harmonicsWave.reset();break;case 10:this.transition=0,this.vibrato=0,this.interval=0,this.effects=0,this.chord=0,this.modChannels=[],this.modInstruments=[],this.modulators=[];for(let e=0;e<u.modCount;e++)this.modChannels.push(-2),this.modInstruments.push(0),this.modulators.push(u.modulators.dictionary.none.index),this.invalidModulators[e]=!1,this.modFilterTypes[e]=0,this.modEnvelopeNumbers[e]=0;break;case 8:this.chord=u.chords.dictionary.arpeggio.index,this.supersawDynamism=u.supersawDynamismMax,this.supersawSpread=Math.ceil(u.supersawSpreadMax/2),this.supersawShape=0,this.pulseWidth=u.pulseWidthRange-1,this.decimalOffset=0;break;default:throw new Error("Unrecognized instrument type: "+e)}this.chord!=u.chords.dictionary.simultaneous.index&&(this.effects=2048|this.effects)}convertLegacySettings(e,t){let n=e.filterCutoff,i=e.filterResonance,s=e.filterEnvelope,a=e.pulseEnvelope,o=e.operatorEnvelopes,r=e.feedbackEnvelope;null==n&&(n=0==this.type?6:10),null==i&&(i=0),null==s&&(s=u.envelopes.dictionary.none),null==a&&(a=u.envelopes.dictionary[6==this.type?"twang 2":"none"]),null==o&&(o=[u.envelopes.dictionary[1==this.type?"note size":"none"],u.envelopes.dictionary.none,u.envelopes.dictionary.none,u.envelopes.dictionary.none]),null==r&&(r=u.envelopes.dictionary.none);10==n&&4==s.type&&(s=u.envelopes.dictionary.none);const l=u.algorithms[this.algorithm].carrierCount;let p=!0,h=!0,c=1==s.type||1==a.type;if(1==this.type||11==this.type){c=c||1==r.type;for(let e=0;e<o.length;e++)e<l?1!=o[e].type?h=!1:p=!1:c=c||1==o[e].type}this.envelopeCount=0,1!=this.type&&11!=this.type||(h&&c?this.addEnvelope(u.instrumentAutomationTargets.dictionary.noteVolume.index,0,u.envelopes.dictionary["note size"].index,!1):p&&!c&&this.addEnvelope(u.instrumentAutomationTargets.dictionary.none.index,0,u.envelopes.dictionary["note size"].index,!1)),0==s.type?(this.noteFilter.reset(),this.noteFilterType=!1,this.eqFilter.convertLegacySettings(n,i,s),this.effects&=-33,(t||this.eqFilterType)&&(this.eqFilterType=!0,this.eqFilterSimpleCut=n,this.eqFilterSimplePeak=i)):(this.eqFilter.reset(),this.eqFilterType=!1,this.noteFilterType=!1,this.noteFilter.convertLegacySettings(n,i,s),this.effects|=32,this.addEnvelope(u.instrumentAutomationTargets.dictionary.noteFilterAllFreqs.index,0,s.index,!1),(t||this.noteFilterType)&&(this.noteFilterType=!0,this.noteFilterSimpleCut=n,this.noteFilterSimplePeak=i)),0!=a.type&&this.addEnvelope(u.instrumentAutomationTargets.dictionary.pulseWidth.index,0,a.index,!1);for(let e=0;e<o.length;e++)e<l&&h||0!=o[e].type&&this.addEnvelope(u.instrumentAutomationTargets.dictionary.operatorAmplitude.index,e,o[e].index,!1);0!=r.type&&this.addEnvelope(u.instrumentAutomationTargets.dictionary.feedbackAmplitude.index,0,r.index,!1)}toJsonObject(){const e={type:u.instrumentTypeNames[this.type],volume:this.volume,eqFilter:this.eqFilter.toJsonObject(),eqFilterType:this.eqFilterType,eqSimpleCut:this.eqFilterSimpleCut,eqSimplePeak:this.eqFilterSimplePeak,envelopeSpeed:this.envelopeSpeed,advancedSettings:this.advancedSettings.toJsonObject()};this.preset!=this.type&&(e.preset=this.preset);for(let t=0;t<u.filterMorphCount;t++)null!=this.eqSubFilters[t]&&(e["eqSubFilters"+t]=this.eqSubFilters[t].toJsonObject());const t=[];for(const e of u.effectOrder)this.effects&1<<e&&t.push(u.effectNames[e]);if(e.effects=t,x(this.effects)&&(e.transition=u.transitions[this.transition].name,e.clicklessTransition=this.clicklessTransition),M(this.effects)&&(e.chord=this.getChord().name,e.fastTwoNoteArp=this.fastTwoNoteArp,e.arpeggioSpeed=this.arpeggioSpeed,e.monoChordTone=this.monoChordTone),F(this.effects)&&(e.pitchShiftSemitones=this.pitchShift),k(this.effects)&&(e.detuneCents=Ge.detuneToCents(this.detune)),I(this.effects)&&(-1==this.vibrato&&(this.vibrato=5),5!=this.vibrato?e.vibrato=u.vibratos[this.vibrato].name:e.vibrato="custom",e.vibratoDepth=this.vibratoDepth,e.vibratoDelay=this.vibratoDelay,e.vibratoSpeed=this.vibratoSpeed,e.vibratoType=this.vibratoType),q(this.effects)){e.noteFilterType=this.noteFilterType,e.noteSimpleCut=this.noteFilterSimpleCut,e.noteSimplePeak=this.noteFilterSimplePeak,e.noteFilter=this.noteFilter.toJsonObject();for(let t=0;t<u.filterMorphCount;t++)null!=this.noteSubFilters[t]&&(e["noteSubFilters"+t]=this.noteSubFilters[t].toJsonObject())}if(O(this.effects)&&(e.granular=this.granular,e.grainSize=this.grainSize,e.grainAmounts=this.grainAmounts,e.grainRange=this.grainRange),H(this.effects)&&(e.ringMod=Math.round(100*this.ringModulation/(u.ringModRange-1)),e.ringModHz=Math.round(100*this.ringModulationHz/(u.ringModHzRange-1)),e.ringModWaveformIndex=this.ringModWaveformIndex,e.ringModPulseWidth=Math.round(100*this.ringModPulseWidth/(u.pulseWidthRange-1)),e.ringModHzOffset=Math.round(100*this.ringModHzOffset/u.rmHzOffsetMax)),E(this.effects)&&(e.distortion=Math.round(100*this.distortion/(u.distortionRange-1)),e.aliases=this.aliases),P(this.effects)&&(e.bitcrusherOctave=(u.bitcrusherFreqRange-1-this.bitcrusherFreq)*u.bitcrusherOctaveStep,e.bitcrusherQuantization=Math.round(100*this.bitcrusherQuantization/(u.bitcrusherQuantizationRange-1))),T(this.effects)&&(e.pan=Math.round(100*(this.pan-u.panCenter)/u.panCenter),e.panDelay=this.panDelay),D(this.effects)&&(e.chorus=Math.round(100*this.chorus/(u.chorusRange-1))),z(this.effects)&&(e.echoSustain=Math.round(100*this.echoSustain/(u.echoSustainRange-1)),e.echoDelayBeats=Math.round(1e3*(this.echoDelay+1)*u.echoDelayStepTicks/(u.ticksPerPart*u.partsPerBeat))/1e3),C(this.effects)&&(e.reverb=Math.round(100*this.reverb/(u.reverbRange-1))),4!=this.type&&(e.fadeInSeconds=Math.round(1e4*Ge.fadeInSettingToSeconds(this.fadeIn))/1e4,e.fadeOutTicks=Ge.fadeOutSettingToTicks(this.fadeOut)),5==this.type||7==this.type){e.harmonics=[];for(let t=0;t<u.harmonicsControlPoints;t++)e.harmonics[t]=Math.round(100*this.harmonicsWave.harmonics[t]/u.harmonicsMax)}if(2==this.type)e.wave=u.chipNoises[this.chipNoise].name,e.unison=this.unison==u.unisons.length?"custom":u.unisons[this.unison].name,this.unison==u.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign);else if(3==this.type){e.spectrum=[];for(let t=0;t<u.spectrumControlPoints;t++)e.spectrum[t]=Math.round(100*this.spectrumWave.spectrum[t]/u.spectrumMax);e.unison=this.unison==u.unisons.length?"custom":u.unisons[this.unison].name,this.unison==u.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign)}else if(4==this.type){e.drums=[],e.unison=this.unison==u.unisons.length?"custom":u.unisons[this.unison].name,this.unison==u.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign);for(let t=0;t<u.drumCount;t++){const n=[];for(let e=0;e<u.spectrumControlPoints;e++)n[e]=Math.round(100*this.drumsetSpectrumWaves[t].spectrum[e]/u.spectrumMax);e.drums[t]={filterEnvelope:this.getDrumsetEnvelope(t).name,spectrum:n}}}else if(0==this.type)e.wave=u.chipWaves[this.chipWave].name,e.unison=this.unison==u.unisons.length?"custom":u.unisons[this.unison].name,this.unison==u.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign),e.isUsingAdvancedLoopControls=this.isUsingAdvancedLoopControls,e.chipWaveLoopStart=this.chipWaveLoopStart,e.chipWaveLoopEnd=this.chipWaveLoopEnd,e.chipWaveLoopMode=this.chipWaveLoopMode,e.chipWavePlayBackwards=this.chipWavePlayBackwards,e.chipWaveStartOffset=this.chipWaveStartOffset;else if(6==this.type)e.pulseWidth=this.pulseWidth,e.decimalOffset=this.decimalOffset,e.unison=this.unison==u.unisons.length?"custom":u.unisons[this.unison].name,this.unison==u.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign);else if(8==this.type)e.pulseWidth=this.pulseWidth,e.decimalOffset=this.decimalOffset,e.dynamism=Math.round(100*this.supersawDynamism/u.supersawDynamismMax),e.spread=Math.round(100*this.supersawSpread/u.supersawSpreadMax),e.shape=Math.round(100*this.supersawShape/u.supersawShapeMax);else if(7==this.type)e.unison=this.unison==u.unisons.length?"custom":u.unisons[this.unison].name,this.unison==u.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign),e.stringSustain=Math.round(100*this.stringSustain/(u.stringSustainRange-1)),u.enableAcousticSustain&&(e.stringSustainType=u.sustainTypeNames[this.stringSustainType]);else if(5==this.type)e.unison=this.unison==u.unisons.length?"custom":u.unisons[this.unison].name,this.unison==u.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign);else if(1==this.type||11==this.type){const t=[];for(const e of this.operators)t.push({frequency:u.operatorFrequencies[e.frequency].name,amplitude:e.amplitude,waveform:u.operatorWaves[e.waveform].name,pulseWidth:e.pulseWidth});if(1==this.type)e.algorithm=u.algorithms[this.algorithm].name,e.feedbackType=u.feedbacks[this.feedbackType].name,e.feedbackAmplitude=this.feedbackAmplitude,e.operators=t;else{if(e.algorithm=u.algorithms6Op[this.algorithm6Op].name,e.feedbackType=u.feedbacks6Op[this.feedbackType6Op].name,e.feedbackAmplitude=this.feedbackAmplitude,0==this.algorithm6Op){const t={};t.mods=this.customAlgorithm.modulatedBy,t.carrierCount=this.customAlgorithm.carrierCount,e.customAlgorithm=t}if(0==this.feedbackType6Op){const t={};t.mods=this.customFeedbackType.indices,e.customFeedback=t}e.operators=t}}else if(9==this.type){e.wave=u.chipWaves[this.chipWave].name,e.unison=this.unison==u.unisons.length?"custom":u.unisons[this.unison].name,this.unison==u.unisons.length&&(e.unisonVoices=this.unisonVoices,e.unisonSpread=this.unisonSpread,e.unisonOffset=this.unisonOffset,e.unisonExpression=this.unisonExpression,e.unisonSign=this.unisonSign),e.customChipWave=new Float64Array(64),e.customChipWaveIntegral=new Float64Array(65);for(let t=0;t<this.customChipWave.length;t++)e.customChipWave[t]=this.customChipWave[t]}else{if(10!=this.type)throw new Error("Unrecognized instrument type");e.modChannels=[],e.modInstruments=[],e.modSettings=[],e.modFilterTypes=[],e.modEnvelopeNumbers=[];for(let t=0;t<u.modCount;t++)e.modChannels[t]=this.modChannels[t],e.modInstruments[t]=this.modInstruments[t],e.modSettings[t]=this.modulators[t],e.modFilterTypes[t]=this.modFilterTypes[t],e.modEnvelopeNumbers[t]=this.modEnvelopeNumbers[t]}const n=[];for(let e=0;e<this.envelopeCount;e++)n.push(this.envelopes[e].toJsonObject());return e.envelopes=n,e}fromJsonObject(e,t,n,i,s,a=0,o=u.jsonFormat){null==e&&(e={});const r=o.toLowerCase();let l=u.instrumentTypeNames.indexOf(e.type);if("synthbox"==r&&"FM"==e.type&&(l=u.instrumentTypeNames.indexOf("FM6op")),-1==l&&(l=n?10:t?2:0),this.setTypeAndReset(l,t,n),this.effects&=-5,null!=e.preset&&(this.preset=e.preset>>>0),null!=e.volume?this.volume="jummbox"==r||"midbox"==r||"synthbox"==r||"goldbox"==r||"paandorasbox"==r||"ultrabox"==r||"slarmoosbox"==r?te(-u.volumeRange/2,u.volumeRange/2+1,0|e.volume):Math.round(25*-te(0,8,Math.round(5-(0|e.volume)/20))/7):this.volume=0,this.envelopeSpeed=null!=e.envelopeSpeed?te(0,u.modulators.dictionary["envelope speed"].maxRawVol+1,0|e.envelopeSpeed):12,null!=e.advancedSettings?this.advancedSettings.fromJsonObject(e.advancedSettings):this.advancedSettings.resetToDefault(),Array.isArray(e.effects)){let t=0;for(let n=0;n<e.effects.length;n++)t|=1<<u.effectNames.indexOf(e.effects[n]);this.effects=32767&t}else{const t=["none","reverb","chorus","chorus & reverb"];this.effects=t.indexOf(e.effects),-1==this.effects&&(this.effects=2==this.type?0:1)}this.transition=u.transitions.dictionary.normal.index;const p=e.transition||e.envelope;if(null!=p){let t=u.transitions.dictionary[p];if(null==e.fadeInSeconds||null==e.fadeOutTicks){const e={binary:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},seamless:{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},sudden:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},hard:{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},smooth:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},soft:{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},slide:{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},"cross fade":{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},"hard fade":{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},"medium fade":{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},"soft fade":{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96}}[p];null!=e&&(t=u.transitions.dictionary[e.transition],this.fadeIn=Ge.secondsToFadeInSetting(e.fadeInSeconds),this.fadeOut=Ge.ticksToFadeOutSetting(e.fadeOutTicks))}null!=t&&(this.transition=t.index),this.transition!=u.transitions.dictionary.normal.index&&(this.effects=1024|this.effects)}null!=e.fadeInSeconds&&(this.fadeIn=Ge.secondsToFadeInSetting(+e.fadeInSeconds)),null!=e.fadeOutTicks&&(this.fadeOut=Ge.ticksToFadeOutSetting(+e.fadeOutTicks));{const t=e.chord,n={harmony:"simultaneous"},i=u.chords.dictionary[n[t]]||u.chords.dictionary[t];null!=i?this.chord=i.index:2==this.type?this.chord=u.chords.dictionary.arpeggio.index:7==this.type?this.chord=u.chords.dictionary.strum.index:0==this.type?this.chord=u.chords.dictionary.arpeggio.index:1==this.type||11==this.type?this.chord=u.chords.dictionary["custom interval"].index:this.chord=u.chords.dictionary.simultaneous.index}this.unison=u.unisons.dictionary.none.index;const h=e.unison||e.interval||e.chorus;if(null!=h){const e={union:"none",fifths:"fifth",octaves:"octave",error:"voiced"},t=u.unisons.dictionary[e[h]]||u.unisons.dictionary[h];null!=t&&(this.unison=t.index),"custom"==h&&(this.unison=u.unisons.length)}if(this.unisonVoices=null==e.unisonVoices?u.unisons[this.unison].voices:e.unisonVoices,this.unisonSpread=null==e.unisonSpread?u.unisons[this.unison].spread:e.unisonSpread,this.unisonOffset=null==e.unisonOffset?u.unisons[this.unison].offset:e.unisonOffset,this.unisonExpression=null==e.unisonExpression?u.unisons[this.unison].expression:e.unisonExpression,this.unisonSign=null==e.unisonSign?u.unisons[this.unison].sign:e.unisonSign,"custom harmony"==e.chorus&&(this.unison=u.unisons.dictionary.hum.index,this.chord=u.chords.dictionary["custom interval"].index),this.chord==u.chords.dictionary.simultaneous.index||Array.isArray(e.effects)||(this.effects=2048|this.effects),null!=e.pitchShiftSemitones&&(this.pitchShift=te(0,u.pitchShiftRange,Math.round(+e.pitchShiftSemitones))),null!=e.octoff){let t=e.octoff;this.effects=128|this.effects,this.pitchShift="+1 (octave)"==t||"+2 (2 octaves)"==t?24:"+1/2 (fifth)"==t||"+1 1/2 (octave and fifth)"==t?18:"-1 (octave)"==t||"-2 (2 octaves"==t?0:"-1/2 (fifth)"==t||"-1 1/2 (octave and fifth)"==t?6:12}null!=e.detuneCents&&(this.detune=te(u.detuneMin,u.detuneMax+1,Math.round(Ge.centsToDetune(+e.detuneCents)))),this.vibrato=u.vibratos.dictionary.none.index;const c=e.vibrato||e.effect;if(null!=c){const t={"vibrato light":"light","vibrato delayed":"delayed","vibrato heavy":"heavy"},n=u.vibratos.dictionary[t[h]]||u.vibratos.dictionary[c];null!=n?this.vibrato=n.index:"custom"==c&&(this.vibrato=u.vibratos.length),this.vibrato==u.vibratos.length?(this.vibratoDepth=e.vibratoDepth,this.vibratoSpeed=e.vibratoSpeed,this.vibratoDelay=e.vibratoDelay,this.vibratoType=e.vibratoType):(this.vibratoDepth=u.vibratos[this.vibrato].amplitude,this.vibratoDelay=u.vibratos[this.vibrato].delayTicks/2,this.vibratoSpeed=10,this.vibratoType=u.vibratos[this.vibrato].type),n!=u.vibratos.dictionary.none&&(this.effects=512|this.effects)}if(null!=e.pan?this.pan=te(0,u.panMax+1,Math.round(u.panCenter+(0|e.pan)*u.panCenter/100)):null!=e.ipan?this.pan=te(0,u.panMax+1,u.panCenter+-50*e.ipan):this.pan=u.panCenter,this.pan!=u.panCenter&&(this.effects=4|this.effects),null!=e.panDelay?this.panDelay=0|e.panDelay:this.panDelay=0,null!=e.detune?this.detune=te(u.detuneMin,u.detuneMax+1,0|e.detune):null==e.detuneCents&&(this.detune=u.detuneCenter),null!=e.ringMod&&(this.ringModulation=te(0,u.ringModRange,Math.round((u.ringModRange-1)*(0|e.ringMod)/100))),null!=e.ringModHz&&(this.ringModulationHz=te(0,u.ringModHzRange,Math.round((u.ringModHzRange-1)*(0|e.ringModHz)/100))),null!=e.ringModWaveformIndex&&(this.ringModWaveformIndex=te(0,u.operatorWaves.length,e.ringModWaveformIndex)),null!=e.ringModPulseWidth&&(this.ringModPulseWidth=te(0,u.pulseWidthRange,Math.round((u.pulseWidthRange-1)*(0|e.ringModPulseWidth)/100))),null!=e.ringModHzOffset&&(this.ringModHzOffset=te(0,u.rmHzOffsetMax,Math.round((u.rmHzOffsetMax-1)*(0|e.ringModHzOffset)/100))),null!=e.granular&&(this.granular=e.granular),null!=e.grainSize&&(this.grainSize=e.grainSize),null!=e.grainAmounts&&(this.grainAmounts=e.grainAmounts),null!=e.grainRange&&(this.grainRange=te(0,u.grainRangeMax/u.grainSizeStep+1,e.grainRange)),null!=e.distortion&&(this.distortion=te(0,u.distortionRange,Math.round((u.distortionRange-1)*(0|e.distortion)/100))),null!=e.bitcrusherOctave&&(this.bitcrusherFreq=u.bitcrusherFreqRange-1-+e.bitcrusherOctave/u.bitcrusherOctaveStep),null!=e.bitcrusherQuantization&&(this.bitcrusherQuantization=te(0,u.bitcrusherQuantizationRange,Math.round((u.bitcrusherQuantizationRange-1)*(0|e.bitcrusherQuantization)/100))),null!=e.echoSustain&&(this.echoSustain=te(0,u.echoSustainRange,Math.round((u.echoSustainRange-1)*(0|e.echoSustain)/100))),null!=e.echoDelayBeats&&(this.echoDelay=te(0,u.echoDelayRange,Math.round(+e.echoDelayBeats*(u.ticksPerPart*u.partsPerBeat)/u.echoDelayStepTicks-1))),isNaN(e.chorus)||(this.chorus=te(0,u.chorusRange,Math.round((u.chorusRange-1)*(0|e.chorus)/100))),null!=e.reverb?this.reverb=te(0,u.reverbRange,Math.round((u.reverbRange-1)*(0|e.reverb)/100)):this.reverb=a,null!=e.pulseWidth?this.pulseWidth=te(1,u.pulseWidthRange+1,Math.round(e.pulseWidth)):this.pulseWidth=u.pulseWidthRange,null!=e.decimalOffset?this.decimalOffset=te(0,100,Math.round(e.decimalOffset)):this.decimalOffset=0,null!=e.dynamism?this.supersawDynamism=te(0,u.supersawDynamismMax+1,Math.round(u.supersawDynamismMax*(0|e.dynamism)/100)):this.supersawDynamism=u.supersawDynamismMax,null!=e.spread?this.supersawSpread=te(0,u.supersawSpreadMax+1,Math.round(u.supersawSpreadMax*(0|e.spread)/100)):this.supersawSpread=Math.ceil(u.supersawSpreadMax/2),null!=e.shape?this.supersawShape=te(0,u.supersawShapeMax+1,Math.round(u.supersawShapeMax*(0|e.shape)/100)):this.supersawShape=0,null!=e.harmonics){for(let t=0;t<u.harmonicsControlPoints;t++)this.harmonicsWave.harmonics[t]=Math.max(0,Math.min(u.harmonicsMax,Math.round(u.harmonicsMax*+e.harmonics[t]/100)));this.harmonicsWave.markCustomWaveDirty()}else this.harmonicsWave.reset();if(null!=e.spectrum)for(let t=0;t<u.spectrumControlPoints;t++)this.spectrumWave.spectrum[t]=Math.max(0,Math.min(u.spectrumMax,Math.round(u.spectrumMax*+e.spectrum[t]/100))),this.spectrumWave.markCustomWaveDirty();else this.spectrumWave.reset(t);null!=e.stringSustain?this.stringSustain=te(0,u.stringSustainRange,Math.round((u.stringSustainRange-1)*(0|e.stringSustain)/100)):this.stringSustain=10,this.stringSustainType=u.enableAcousticSustain?u.sustainTypeNames.indexOf(e.stringSustainType):0,-1==this.stringSustainType&&(this.stringSustainType=0),2==this.type&&(this.chipNoise=u.chipNoises.findIndex((t=>t.name==e.wave)),"pink noise"==e.wave&&(this.chipNoise=u.chipNoises.findIndex((e=>"pink"==e.name))),"brownian noise"==e.wave&&(this.chipNoise=u.chipNoises.findIndex((e=>"brownian"==e.name))),-1==this.chipNoise&&(this.chipNoise=1));const f={custom:"note size",steady:"none","pluck 1":"twang 1","pluck 2":"twang 2","pluck 3":"twang 3"},d=e=>null!=f[e]?u.envelopes.dictionary[f[e]]:u.envelopes.dictionary[e];if(4==this.type&&null!=e.drums)for(let t=0;t<u.drumCount;t++){const n=e.drums[t];if(null!=n){if(this.drumsetEnvelopes[t]=u.envelopes.dictionary["twang 2"].index,null!=n.filterEnvelope){const e=d(n.filterEnvelope);null!=e&&(this.drumsetEnvelopes[t]=e.index)}if(null!=n.spectrum)for(let e=0;e<u.spectrumControlPoints;e++)this.drumsetSpectrumWaves[t].spectrum[e]=Math.max(0,Math.min(u.spectrumMax,Math.round(u.spectrumMax*+n.spectrum[e]/100)));this.drumsetSpectrumWaves[t].markCustomWaveDirty()}}if(0==this.type){const t={triangle:1,square:2,"pulse wide":3,"pulse narrow":4,sawtooth:5,"double saw":6,"double pulse":7,spiky:8,plateau:0},n={"10% pulse":22,"sunsoft bass":23,"loud pulse":24,sax:25,guitar:26,"atari bass":28,"atari pulse":29,"1% pulse":30,"curved sawtooth":31,viola:32,brass:33,"acoustic bass":34,lyre:35,"ramp pulse":36,piccolo:37,squaretooth:38,flatline:39,"pnryshk a (u5)":40,"pnryshk b (riff)":41},i={"shrill lute":42,"shrill bass":44,"nes pulse":45,"saw bass":46,euphonium:47,"shrill pulse":48,"r-sawtooth":49,recorder:50,"narrow saw":51,"deep square":52,"ring pulse":53,"double sine":54,contrabass:55,"double bass":56},s={"semi-square":63,"deep square":64,squaretal:40,"saw wide":65,"saw narrow ":66,"deep sawtooth":67,sawtal:68,pulse:69,"triple pulse":70,"high pulse":71,"deep pulse":72},a={test1:56,"pokey 4bit lfsr":57,"pokey 5step bass":58,"isolated spiky":59,"unnamed 1":60,"unnamed 2":61,"guitar string":75,intense:76,"buzz wave":77,"pokey square":57,"pokey bass":58,"banana wave":83,"test 1":84,"test 2":84,"real snare":85,"earthbound o. guitar":86},o={kick:87,snare:88,piano1:89,WOW:90,overdrive:91,trumpet:92,saxophone:93,orchestrahit:94,"detached violin":95,synth:96,sonic3snare:97,"come on":98,choir:99,overdriveguitar:100,flute:101,"legato violin":102,"tremolo violin":103,"amen break":104,"pizzicato violin":105,"tim allen grunt":106,tuba:107,loopingcymbal:108,standardkick:109,standardsnare:110,closedhihat:111,foothihat:112,openhihat:113,crashcymbal:114,pianoC4:115,"liver pad":116,marimba:117,susdotwav:118,wackyboxtts:119};this.chipWave=-1;const r=e.wave;for(const e of[t,n,i,s,a,o])if(-1==this.chipWave&&null!=e[r]&&null!=u.chipWaves[e[r]]){this.chipWave=e[r];break}if(-1==this.chipWave){const e=u.chipWaves.findIndex((e=>e.name==r));-1!=e&&(this.chipWave=e)}-1==this.chipWave&&(this.chipWave=1)}if(1==this.type||11==this.type){if(1==this.type)this.algorithm=u.algorithms.findIndex((t=>t.name==e.algorithm)),-1==this.algorithm&&(this.algorithm=0),this.feedbackType=u.feedbacks.findIndex((t=>t.name==e.feedbackType)),-1==this.feedbackType&&(this.feedbackType=0);else{if(this.algorithm6Op=u.algorithms6Op.findIndex((t=>t.name==e.algorithm)),-1==this.algorithm6Op&&(this.algorithm6Op=1),0==this.algorithm6Op?this.customAlgorithm.set(e.customAlgorithm.carrierCount,e.customAlgorithm.mods):this.customAlgorithm.fromPreset(this.algorithm6Op),this.feedbackType6Op=u.feedbacks6Op.findIndex((t=>t.name==e.feedbackType)),-1==this.feedbackType6Op){let t=w([{name:"2⟲ 3⟲",indices:[[],[2],[3],[],[],[]]},{name:"3⟲ 4⟲",indices:[[],[],[3],[4],[],[]]},{name:"4⟲ 5⟲",indices:[[],[],[],[4],[5],[]]},{name:"5⟲ 6⟲",indices:[[],[],[],[],[5],[6]]},{name:"1⟲ 6⟲",indices:[[1],[],[],[],[],[6]]},{name:"1⟲ 3⟲",indices:[[1],[],[3],[],[],[]]},{name:"1⟲ 4⟲",indices:[[1],[],[],[4],[],[]]},{name:"1⟲ 5⟲",indices:[[1],[],[],[],[5],[]]},{name:"4⟲ 6⟲",indices:[[],[],[],[4],[],[6]]},{name:"2⟲ 6⟲",indices:[[],[2],[],[],[],[6]]},{name:"3⟲ 6⟲",indices:[[],[],[3],[],[],[6]]},{name:"4⟲ 5⟲ 6⟲",indices:[[],[],[],[4],[5],[6]]},{name:"1⟲ 3⟲ 6⟲",indices:[[1],[],[3],[],[],[6]]},{name:"2→5",indices:[[],[],[],[],[2],[]]},{name:"2→6",indices:[[],[],[],[],[],[2]]},{name:"3→5",indices:[[],[],[],[],[3],[]]},{name:"3→6",indices:[[],[],[],[],[],[3]]},{name:"4→6",indices:[[],[],[],[],[],[4]]},{name:"5→6",indices:[[],[],[],[],[],[5]]},{name:"1→3→4",indices:[[],[],[1],[],[3],[]]},{name:"2→5→6",indices:[[],[],[],[],[2],[5]]},{name:"2→4→6",indices:[[],[],[],[2],[],[4]]},{name:"4→5→6",indices:[[],[],[],[],[4],[5]]},{name:"3→4→5→6",indices:[[],[],[],[3],[4],[5]]},{name:"2→3→4→5→6",indices:[[],[1],[2],[3],[4],[5]]},{name:"1→2→3→4→5→6",indices:[[],[1],[2],[3],[4],[5]]}]),n=t[t.findIndex((t=>t.name==e.feedbackType))].indices;null!=n?(this.feedbackType6Op=0,this.customFeedbackType.set(n)):this.feedbackType6Op=1}0==this.feedbackType6Op&&null!=e.customFeedback?this.customFeedbackType.set(e.customFeedback.mods):this.customFeedbackType.fromPreset(this.feedbackType6Op)}null!=e.feedbackAmplitude?this.feedbackAmplitude=te(0,u.operatorAmplitudeMax+1,0|e.feedbackAmplitude):this.feedbackAmplitude=0;for(let t=0;t<u.operatorCount+(11==this.type?2:0);t++){const n=this.operators[t];let i;if(null!=e.operators&&(i=e.operators[t]),null==i&&(i={}),n.frequency=u.operatorFrequencies.findIndex((e=>e.name==i.frequency)),-1==n.frequency&&(n.frequency=0),null!=i.amplitude?n.amplitude=te(0,u.operatorAmplitudeMax+1,0|i.amplitude):n.amplitude=0,null!=i.waveform){if("goldbox"==r&&t>3){n.waveform=0;continue}n.waveform=u.operatorWaves.findIndex((e=>e.name==i.waveform)),-1==n.waveform&&("square"==i.waveform?(n.waveform=u.operatorWaves.dictionary["pulse width"].index,n.pulseWidth=5):"rounded"==i.waveform?n.waveform=u.operatorWaves.dictionary["quasi-sine"].index:n.waveform=0)}else n.waveform=0;null!=i.pulseWidth?n.pulseWidth=0|i.pulseWidth:n.pulseWidth=5}}else if(9==this.type){if(e.customChipWave){for(let t=0;t<64;t++)this.customChipWave[t]=e.customChipWave[t];let t=0;for(let e=0;e<this.customChipWave.length;e++)t+=this.customChipWave[e];const n=t/this.customChipWave.length;let i=0,s=0;for(let e=0;e<this.customChipWave.length;e++)i+=s,s=this.customChipWave[e]-n,this.customChipWaveIntegral[e]=i;this.customChipWaveIntegral[64]=0}}else if(10==this.type&&null!=e.modChannels)for(let t=0;t<u.modCount;t++)this.modChannels[t]=e.modChannels[t],this.modInstruments[t]=e.modInstruments[t],this.modulators[t]=e.modSettings[t],null!=e.modFilterTypes&&(this.modFilterTypes[t]=e.modFilterTypes[t]),null!=e.modEnvelopeNumbers&&(this.modEnvelopeNumbers[t]=e.modEnvelopeNumbers[t]);if(10!=this.type){this.chord==u.chords.dictionary.arpeggio.index&&null!=e.arpeggioSpeed?this.arpeggioSpeed=e.arpeggioSpeed:this.arpeggioSpeed=i?9:12,this.chord==u.chords.dictionary.monophonic.index&&null!=e.monoChordTone&&(this.monoChordTone=e.monoChordTone),null!=e.fastTwoNoteArp?this.fastTwoNoteArp=e.fastTwoNoteArp:this.fastTwoNoteArp=s,null!=e.clicklessTransition?this.clicklessTransition=e.clicklessTransition:this.clicklessTransition=!1,null!=e.aliases?this.aliases=e.aliases:"modbox"==r?(this.effects=8|this.effects,this.aliases=!0,this.distortion=0):this.aliases=!1,null!=e.noteFilterType&&(this.noteFilterType=e.noteFilterType),null!=e.noteSimpleCut&&(this.noteFilterSimpleCut=e.noteSimpleCut),null!=e.noteSimplePeak&&(this.noteFilterSimplePeak=e.noteSimplePeak),null!=e.noteFilter?this.noteFilter.fromJsonObject(e.noteFilter):this.noteFilter.reset();for(let t=0;t<u.filterMorphCount;t++)Array.isArray(e["noteSubFilters"+t])&&(this.noteSubFilters[t]=new ke,this.noteSubFilters[t].fromJsonObject(e["noteSubFilters"+t]));if(null!=e.eqFilterType&&(this.eqFilterType=e.eqFilterType),null!=e.eqSimpleCut&&(this.eqFilterSimpleCut=e.eqSimpleCut),null!=e.eqSimplePeak&&(this.eqFilterSimplePeak=e.eqSimplePeak),Array.isArray(e.eqFilter))this.eqFilter.fromJsonObject(e.eqFilter);else{this.eqFilter.reset();const t={},n=8e3,i=11,s=8;if(null!=e.filterCutoffHz?t.filterCutoff=te(0,i,Math.round(i-1+2*Math.log((0|e.filterCutoffHz)/n)/Math.LN2)):t.filterCutoff=0==this.type?6:10,null!=e.filterResonance?t.filterResonance=te(0,s,Math.round((s-1)*(0|e.filterResonance)/100)):t.filterResonance=0,t.filterEnvelope=d(e.filterEnvelope),t.pulseEnvelope=d(e.pulseEnvelope),t.feedbackEnvelope=d(e.feedbackEnvelope),Array.isArray(e.operators)){t.operatorEnvelopes=[];for(let n=0;n<u.operatorCount+(11==this.type?2:0);n++){let i;null!=e.operators[n]&&(i=d(e.operators[n].envelope)),t.operatorEnvelopes[n]=null!=i?i:u.envelopes.dictionary.none}}if(null!=e.filter){const n=[10,6,3,0,8,5,2],i=["none","none","none","none","decay 1","decay 2","decay 3"],s=["none","bright","medium","soft","decay bright","decay medium","decay soft"],a={"sustain sharp":1,"sustain medium":2,"sustain soft":3,"decay sharp":4};let o=null!=a[e.filter]?a[e.filter]:s.indexOf(e.filter);-1==o&&(o=0),t.filterCutoff=n[o],t.filterEnvelope=d(i[o]),t.filterResonance=0}this.convertLegacySettings(t,!0)}for(let t=0;t<u.filterMorphCount;t++)Array.isArray(e["eqSubFilters"+t])&&(this.eqSubFilters[t]=new ke,this.eqSubFilters[t].fromJsonObject(e["eqSubFilters"+t]));if(Array.isArray(e.envelopes)){const t=e.envelopes;for(let n=0;n<t.length&&!(this.envelopeCount>=u.maxEnvelopeCount);n++){const i=new Ie(this.isNoiseInstrument);let s,a,o,l;i.fromJsonObject(t[n],r),s=null!=e.pitchEnvelopeStart&&null!=e.pitchEnvelopeStart?e.pitchEnvelopeStart:null!=e["pitchEnvelopeStart"+n]&&null!=e["pitchEnvelopeStart"+n]?e["pitchEnvelopeStart"+n]:i.pitchEnvelopeStart,a=null!=e.pitchEnvelopeEnd&&null!=e.pitchEnvelopeEnd?e.pitchEnvelopeEnd:null!=e["pitchEnvelopeEnd"+n]&&null!=e["pitchEnvelopeEnd"+n]?e["pitchEnvelopeEnd"+n]:i.pitchEnvelopeEnd,o=null!=e["envelopeInverse"+n]&&null!=e["envelopeInverse"+n]?e["envelopeInverse"+n]:null!=e.pitchEnvelopeInverse&&null!=e.pitchEnvelopeInverse&&"pitch"==u.envelopes[i.envelope].name?e.pitchEnvelopeInverse:i.inverse,l=null!=e.discreteEnvelope?e.discreteEnvelope:i.discrete,this.addEnvelope(i.target,i.index,i.envelope,!0,s,a,o,i.perEnvelopeSpeed,i.perEnvelopeLowerBound,i.perEnvelopeUpperBound,i.steps,i.seed,i.waveform,l)}}}0===l&&(null!=e.isUsingAdvancedLoopControls?(this.isUsingAdvancedLoopControls=e.isUsingAdvancedLoopControls,this.chipWaveLoopStart=e.chipWaveLoopStart,this.chipWaveLoopEnd=e.chipWaveLoopEnd,this.chipWaveLoopMode=e.chipWaveLoopMode,this.chipWavePlayBackwards=e.chipWavePlayBackwards,this.chipWaveStartOffset=e.chipWaveStartOffset):(this.isUsingAdvancedLoopControls=!1,this.chipWaveLoopStart=0,this.chipWaveLoopEnd=u.rawRawChipWaves[this.chipWave].samples.length-1,this.chipWaveLoopMode=0,this.chipWavePlayBackwards=!1,this.chipWaveStartOffset=0))}getLargestControlPointCount(e){let t;if(e){t=this.noteFilter.controlPointCount;for(let e=0;e<u.filterMorphCount;e++)null!=this.noteSubFilters[e]&&this.noteSubFilters[e].controlPointCount>t&&(t=this.noteSubFilters[e].controlPointCount)}else{t=this.eqFilter.controlPointCount;for(let e=0;e<u.filterMorphCount;e++)null!=this.eqSubFilters[e]&&this.eqSubFilters[e].controlPointCount>t&&(t=this.eqSubFilters[e].controlPointCount)}return t}static frequencyFromPitch(e){return 440*Math.pow(2,(e-69)/12)}addEnvelope(e,t,n,i,s=0,a=-1,o=!1,r=-1,l=0,p=1,h=2,c=2,f=0,d=!1){a=-1!=a?a:this.isNoiseInstrument?u.drumCount-1:u.maxPitch,r=-1!=r?r:i?1:u.envelopes[n].speed;let m=!1;if(this.supportsEnvelopeTarget(e,t)||(m=!0),this.envelopeCount>=u.maxEnvelopeCount)throw new Error;for(;this.envelopes.length<=this.envelopeCount;)this.envelopes[this.envelopes.length]=new Ie(this.isNoiseInstrument);const v=this.envelopes[this.envelopeCount];v.target=m?u.instrumentAutomationTargets.dictionary.none.index:e,v.index=m?0:t,v.envelope=i?n:te(0,u.newEnvelopes.length,u.envelopes[n].type),v.pitchEnvelopeStart=s,v.pitchEnvelopeEnd=a,v.inverse=o,v.perEnvelopeSpeed=r,v.perEnvelopeLowerBound=l,v.perEnvelopeUpperBound=p,v.steps=h,v.seed=c,v.waveform=f,v.discrete=d,this.envelopeCount++}supportsEnvelopeTarget(e,t){const n=u.instrumentAutomationTargets[e];if(null==n.computeIndex&&"none"!=n.name)return!1;if(t>=n.maxCount)return!1;if(null!=n.compatibleInstruments&&-1==n.compatibleInstruments.indexOf(this.type))return!1;if(null!=n.effect&&0==(this.effects&1<<n.effect))return!1;if(n.isFilter){let e=this.noteFilter.controlPointCount;if(this.noteFilterType&&(e=1),t>=e)return!1}return"operatorFrequency"!=n.name&&"operatorAmplitude"!=n.name||!(t>=4+(11==this.type?2:0))}clearInvalidEnvelopeTargets(){for(let e=0;e<this.envelopeCount;e++){const t=this.envelopes[e].target,n=this.envelopes[e].index;this.supportsEnvelopeTarget(t,n)||(this.envelopes[e].target=u.instrumentAutomationTargets.dictionary.none.index,this.envelopes[e].index=0)}}getTransition(){return x(this.effects)?u.transitions[this.transition]:10==this.type?u.transitions.dictionary.interrupt:u.transitions.dictionary.normal}getFadeInSeconds(){return 4==this.type?0:Ge.fadeInSettingToSeconds(this.fadeIn)}getFadeOutTicks(){return 4==this.type?u.drumsetFadeOutTicks:Ge.fadeOutSettingToTicks(this.fadeOut)}getChord(){return M(this.effects)?u.chords[this.chord]:u.chords.dictionary.simultaneous}getDrumsetEnvelope(e){if(4!=this.type)throw new Error("Can't getDrumsetEnvelope() for non-drumset.");return u.envelopes[this.drumsetEnvelopes[e]]}}class Pe{constructor(){this.octave=0,this.instruments=[],this.patterns=[],this.bars=[],this.muted=!1,this.name=""}}class Te{constructor(e){this.scaleCustom=[],this.channels=[],this.limitDecay=4,this.limitRise=4e3,this.compressionThreshold=1,this.limitThreshold=1,this.compressionRatio=1,this.limitRatio=1,this.masterGain=1,this.inVolumeCap=0,this.outVolumeCap=0,this.eqFilter=new ke,this.eqFilterType=!1,this.eqFilterSimpleCut=u.filterSimpleCutRange-1,this.eqFilterSimplePeak=0,this.eqSubFilters=[],this.getNewNoteVolume=(e,t,n,i)=>{if(e&&null!=t&&null!=n&&null!=i){i=u.modCount-i-1;const e=this.channels[t].instruments[n];let s=u.modulators[e.modulators[i]].newNoteVol,a=e.modulators[i],o=u.modulators.dictionary.tempo.index;if(a==o&&(s=this.tempo-u.modulators[o].convertRealFactor),!u.modulators[a].forSong&&e.modInstruments[i]<this.channels[e.modChannels[i]].instruments.length){let t=u.modulators.dictionary.chorus.index,n=u.modulators.dictionary.reverb.index,o=u.modulators.dictionary.pan.index,r=u.modulators.dictionary["pan delay"].index,l=u.modulators.dictionary.distortion.index,p=u.modulators.dictionary.detune.index,h=u.modulators.dictionary["vibrato depth"].index,c=u.modulators.dictionary["vibrato speed"].index,f=u.modulators.dictionary["vibrato delay"].index,d=u.modulators.dictionary["arp speed"].index,m=u.modulators.dictionary["bit crush"].index,v=u.modulators.dictionary["freq crush"].index,y=u.modulators.dictionary.echo.index,g=u.modulators.dictionary["echo delay"].index,b=u.modulators.dictionary["pitch shift"].index,S=u.modulators.dictionary["ring modulation"].index,w=u.modulators.dictionary["ring mod hertz"].index,x=u.modulators.dictionary.granular.index,M=u.modulators.dictionary["grain freq"].index,F=u.modulators.dictionary["grain size"].index,k=u.modulators.dictionary["grain range"].index,I=u.modulators.dictionary["envelope speed"].index,q=u.modulators.dictionary["individual envelope speed"].index,E=u.modulators.dictionary["individual envelope lower bound"].index,P=u.modulators.dictionary["individual envelope upper bound"].index,T=e.modInstruments[i];switch(a){case t:s=this.channels[e.modChannels[i]].instruments[T].chorus-u.modulators[t].convertRealFactor;break;case n:s=this.channels[e.modChannels[i]].instruments[T].reverb-u.modulators[n].convertRealFactor;break;case o:s=this.channels[e.modChannels[i]].instruments[T].pan-u.modulators[o].convertRealFactor;break;case r:s=this.channels[e.modChannels[i]].instruments[T].panDelay-u.modulators[r].convertRealFactor;break;case l:s=this.channels[e.modChannels[i]].instruments[T].distortion-u.modulators[l].convertRealFactor;break;case p:s=this.channels[e.modChannels[i]].instruments[T].detune;break;case h:s=Math.round(25*this.channels[e.modChannels[i]].instruments[T].vibratoDepth-u.modulators[h].convertRealFactor);break;case c:s=this.channels[e.modChannels[i]].instruments[T].vibratoSpeed-u.modulators[c].convertRealFactor;break;case f:s=this.channels[e.modChannels[i]].instruments[T].vibratoDelay-u.modulators[f].convertRealFactor;break;case d:s=this.channels[e.modChannels[i]].instruments[T].arpeggioSpeed-u.modulators[d].convertRealFactor;break;case m:s=this.channels[e.modChannels[i]].instruments[T].bitcrusherQuantization-u.modulators[m].convertRealFactor;break;case v:s=this.channels[e.modChannels[i]].instruments[T].bitcrusherFreq-u.modulators[v].convertRealFactor;break;case y:s=this.channels[e.modChannels[i]].instruments[T].echoSustain-u.modulators[y].convertRealFactor;break;case g:s=this.channels[e.modChannels[i]].instruments[T].echoDelay-u.modulators[g].convertRealFactor;break;case b:s=this.channels[e.modChannels[i]].instruments[T].pitchShift;break;case S:s=this.channels[e.modChannels[i]].instruments[T].ringModulation-u.modulators[S].convertRealFactor;break;case w:s=this.channels[e.modChannels[i]].instruments[T].ringModulationHz-u.modulators[w].convertRealFactor;break;case x:s=this.channels[e.modChannels[i]].instruments[T].granular-u.modulators[x].convertRealFactor;break;case M:s=this.channels[e.modChannels[i]].instruments[T].grainAmounts-u.modulators[M].convertRealFactor;break;case F:s=this.channels[e.modChannels[i]].instruments[T].grainSize-u.modulators[F].convertRealFactor;break;case k:s=this.channels[e.modChannels[i]].instruments[T].grainRange-u.modulators[k].convertRealFactor;break;case I:s=this.channels[e.modChannels[i]].instruments[T].envelopeSpeed-u.modulators[I].convertRealFactor;break;case q:s=u.perEnvelopeSpeedToIndices[this.channels[e.modChannels[i]].instruments[T].envelopes[e.modEnvelopeNumbers[i]].perEnvelopeSpeed]-u.modulators[q].convertRealFactor;break;case E:s=this.channels[e.modChannels[i]].instruments[T].envelopes[e.modEnvelopeNumbers[i]].perEnvelopeLowerBound-u.modulators[E].convertRealFactor;break;case P:s=this.channels[e.modChannels[i]].instruments[T].envelopes[e.modEnvelopeNumbers[i]].perEnvelopeUpperBound-u.modulators[P].convertRealFactor}}return null!=s?s:u.noteSizeMax}return u.noteSizeMax},this.getVolumeCap=(e,t,n,i)=>{if(e&&null!=t&&null!=n&&null!=i){i=u.modCount-i-1;let e=this.channels[t].instruments[n],s=u.modulators[e.modulators[i]],a=s.maxRawVol;return null!=a?("eq filter"!=s.name&&"note filter"!=s.name&&"song eq"!=s.name||(a=u.filterMorphCount-1,e.modFilterTypes[i]>0&&e.modFilterTypes[i]%2?a=u.filterFreqRange:e.modFilterTypes[i]>0&&(a=u.filterGainRange)),a):u.noteSizeMax}return u.noteSizeMax},this.getVolumeCapForSetting=(e,t,n)=>{if(e){let e=u.modulators[t].maxRawVol;return null!=e?(null==n||"eq filter"!=u.modulators[t].name&&"note filter"!=u.modulators[t].name&&"song eq"!=u.modulators[t].name||(e=u.filterMorphCount-1,n>0&&n%2?e=u.filterFreqRange:n>0&&(e=u.filterGainRange)),e):u.noteSizeMax}return u.noteSizeMax},null!=e?this.fromBase64String(e):this.initToDefault(!0)}getChannelCount(){return this.pitchChannelCount+this.noiseChannelCount+this.modChannelCount}getMaxInstrumentsPerChannel(){return Math.max(this.layeredInstruments?u.layeredInstrumentCountMax:u.instrumentCountMin,this.patternInstruments?u.patternInstrumentCountMax:u.instrumentCountMin)}getMaxInstrumentsPerPattern(e){return this.getMaxInstrumentsPerPatternForChannel(this.channels[e])}getMaxInstrumentsPerPatternForChannel(e){return this.layeredInstruments?Math.min(u.layeredInstrumentCountMax,e.instruments.length):1}getChannelIsNoise(e){return e>=this.pitchChannelCount&&e<this.pitchChannelCount+this.noiseChannelCount}getChannelIsMod(e){return e>=this.pitchChannelCount+this.noiseChannelCount}initToDefault(e=!0){this.scale=0,this.scaleCustom=[!0,!1,!0,!0,!1,!1,!1,!0,!0,!1,!0,!0],this.key=0,this.octave=0,this.loopStart=0,this.loopLength=4,this.tempo=150,this.reverb=0,this.beatsPerBar=8,this.barCount=16,this.patternsPerChannel=8,this.rhythm=1,this.layeredInstruments=!1,this.patternInstruments=!1,this.eqFilter.reset();for(let e=0;e<u.filterMorphCount-1;e++)this.eqSubFilters[e]=null;if(this.title="Untitled",document.title=this.title+" - "+G.versionDisplayName,e){this.pitchChannelCount=3,this.noiseChannelCount=1,this.modChannelCount=1;for(let e=0;e<this.getChannelCount();e++){const t=e>=this.pitchChannelCount&&e<this.pitchChannelCount+this.noiseChannelCount,n=e>=this.pitchChannelCount+this.noiseChannelCount;this.channels.length<=e&&(this.channels[e]=new Pe);const i=this.channels[e];i.octave=Math.max(3-e,0);for(let e=0;e<this.patternsPerChannel;e++)i.patterns.length<=e?i.patterns[e]=new me:i.patterns[e].reset();i.patterns.length=this.patternsPerChannel;for(let e=0;e<u.instrumentCountMin;e++)i.instruments.length<=e&&(i.instruments[e]=new Ee(t,n)),i.instruments[e].setTypeAndReset(n?10:t?2:0,t,n);i.instruments.length=u.instrumentCountMin;for(let e=0;e<this.barCount;e++)i.bars[e]=e<4?1:0;i.bars.length=this.barCount}this.channels.length=this.getChannelCount()}}toBase64String(){let e,t=[];t.push(Te.k),t.push(pe[Te.I]),t.push(78);var n=encodeURIComponent(this.title);t.push(pe[n.length>>6],pe[63&n.length]);for(let e=0;e<n.length;e++)t.push(n.charCodeAt(e));if(t.push(110,pe[this.pitchChannelCount],pe[this.noiseChannelCount],pe[this.modChannelCount]),t.push(115,pe[this.scale]),this.scale==u.scales.dictionary.Custom.index)for(var i=1;i<u.pitchesPerOctave;i++)t.push(pe[this.scaleCustom[i]?1:0]);if(t.push(107,pe[this.key],pe[this.octave-u.octaveMin]),t.push(108,pe[this.loopStart>>6],pe[63&this.loopStart]),t.push(101,pe[this.loopLength-1>>6],pe[this.loopLength-1&63]),t.push(116,pe[this.tempo>>6],pe[63&this.tempo]),t.push(97,pe[this.beatsPerBar-1]),t.push(103,pe[this.barCount-1>>6],pe[this.barCount-1&63]),t.push(106,pe[this.patternsPerChannel-1>>6],pe[this.patternsPerChannel-1&63]),t.push(114,pe[this.rhythm]),t.push(79),1!=this.compressionRatio||1!=this.limitRatio||4e3!=this.limitRise||4!=this.limitDecay||1!=this.limitThreshold||1!=this.compressionThreshold||1!=this.masterGain?(t.push(pe[Math.round(this.compressionRatio<1?10*this.compressionRatio:10+60*(this.compressionRatio-1))]),t.push(pe[Math.round(this.limitRatio<1?10*this.limitRatio:9+this.limitRatio)]),t.push(pe[this.limitDecay]),t.push(pe[Math.round((this.limitRise-2e3)/250)]),t.push(pe[Math.round(20*this.compressionThreshold)]),t.push(pe[Math.round(20*this.limitThreshold)]),t.push(pe[Math.round(50*this.masterGain)>>6],pe[63&Math.round(50*this.masterGain)])):t.push(pe[63]),t.push(99),null==this.eqFilter)t.push(pe[0]),console.log("Null EQ filter settings detected in toBase64String for song");else{t.push(pe[this.eqFilter.controlPointCount]);for(let e=0;e<this.eqFilter.controlPointCount;e++){const n=this.eqFilter.controlPoints[e];t.push(pe[n.type],pe[Math.round(n.freq)],pe[Math.round(n.gain)])}}let s=0;for(let e=0;e<u.filterMorphCount-1;e++)s|=+(null!=this.eqSubFilters[e+1])<<e;t.push(pe[s>>6],pe[63&s]);for(let e=0;e<u.filterMorphCount-1;e++)if(s&1<<e){t.push(pe[this.eqSubFilters[e+1].controlPointCount]);for(let n=0;n<this.eqSubFilters[e+1].controlPointCount;n++){const i=this.eqSubFilters[e+1].controlPoints[n];t.push(pe[i.type],pe[Math.round(i.freq)],pe[Math.round(i.gain)])}}t.push(85);for(let e=0;e<this.getChannelCount();e++){var a=encodeURIComponent(this.channels[e].name);t.push(pe[a.length>>6],pe[63&a.length]);for(let e=0;e<a.length;e++)t.push(a.charCodeAt(e))}if(t.push(105,pe[this.layeredInstruments<<1|this.patternInstruments]),this.layeredInstruments||this.patternInstruments)for(let e=0;e<this.getChannelCount();e++)t.push(pe[this.channels[e].instruments.length-u.instrumentCountMin]);t.push(111);for(let e=0;e<this.pitchChannelCount;e++)t.push(pe[this.channels[e].octave]);for(let e=0;e<this.getChannelCount();e++)for(let n=0;n<this.channels[e].instruments.length;n++){const i=this.channels[e].instruments[n];if(t.push(84,pe[i.type]),t.push(118,pe[i.volume+u.volumeRange/2>>6],pe[i.volume+u.volumeRange/2&63]),t.push(117,pe[i.preset>>6],pe[63&i.preset]),t.push(109,pe[i.advancedSettings.writeBitfieldChar()],pe[i.advancedSettings.randomSeed]),t.push(102),t.push(pe[+i.eqFilterType]),i.eqFilterType)t.push(pe[i.eqFilterSimpleCut]),t.push(pe[i.eqFilterSimplePeak]);else{if(null==i.eqFilter)t.push(pe[0]),console.log("Null EQ filter settings detected in toBase64String for channelIndex "+e+", instrumentIndex "+n);else{t.push(pe[i.eqFilter.controlPointCount]);for(let e=0;e<i.eqFilter.controlPointCount;e++){const n=i.eqFilter.controlPoints[e];t.push(pe[n.type],pe[Math.round(n.freq)],pe[Math.round(n.gain)])}}let s=0;for(let e=0;e<u.filterMorphCount-1;e++)s|=+(null!=i.eqSubFilters[e+1])<<e;t.push(pe[s>>6],pe[63&s]);for(let e=0;e<u.filterMorphCount-1;e++)if(s&1<<e){t.push(pe[i.eqSubFilters[e+1].controlPointCount]);for(let n=0;n<i.eqSubFilters[e+1].controlPointCount;n++){const s=i.eqSubFilters[e+1].controlPoints[n];t.push(pe[s.type],pe[Math.round(s.freq)],pe[Math.round(s.gain)])}}}if(t.push(113,pe[i.effects>>12&63],pe[i.effects>>6&63],pe[63&i.effects]),q(i.effects))if(t.push(pe[+i.noteFilterType]),i.noteFilterType)t.push(pe[i.noteFilterSimpleCut]),t.push(pe[i.noteFilterSimplePeak]);else{if(null==i.noteFilter)t.push(pe[0]),console.log("Null note filter settings detected in toBase64String for channelIndex "+e+", instrumentIndex "+n);else{t.push(pe[i.noteFilter.controlPointCount]);for(let e=0;e<i.noteFilter.controlPointCount;e++){const n=i.noteFilter.controlPoints[e];t.push(pe[n.type],pe[Math.round(n.freq)],pe[Math.round(n.gain)])}}let s=0;for(let e=0;e<u.filterMorphCount-1;e++)s|=+(null!=i.noteSubFilters[e+1])<<e;t.push(pe[s>>6],pe[63&s]);for(let e=0;e<u.filterMorphCount-1;e++)if(s&1<<e){t.push(pe[i.noteSubFilters[e+1].controlPointCount]);for(let n=0;n<i.noteSubFilters[e+1].controlPointCount;n++){const s=i.noteSubFilters[e+1].controlPoints[n];t.push(pe[s.type],pe[Math.round(s.freq)],pe[Math.round(s.gain)])}}}if(x(i.effects)&&t.push(pe[i.transition]),M(i.effects)&&(t.push(pe[i.chord]),i.chord==u.chords.dictionary.arpeggio.index&&(t.push(pe[i.arpeggioSpeed]),t.push(pe[+i.fastTwoNoteArp])),i.chord==u.chords.dictionary.monophonic.index&&t.push(pe[i.monoChordTone])),F(i.effects)&&t.push(pe[i.pitchShift]),k(i.effects)&&t.push(pe[i.detune-u.detuneMin>>6],pe[i.detune-u.detuneMin&63]),I(i.effects)&&(t.push(pe[i.vibrato]),i.vibrato==u.vibratos.length&&(t.push(pe[Math.round(25*i.vibratoDepth)]),t.push(pe[i.vibratoSpeed]),t.push(pe[Math.round(i.vibratoDelay)]),t.push(pe[i.vibratoType]))),E(i.effects)&&(t.push(pe[i.distortion]),t.push(pe[+i.aliases])),P(i.effects)&&t.push(pe[i.bitcrusherFreq],pe[i.bitcrusherQuantization]),T(i.effects)&&(t.push(pe[i.pan>>6],pe[63&i.pan]),t.push(pe[i.panDelay])),D(i.effects)&&t.push(pe[i.chorus]),z(i.effects)&&t.push(pe[i.echoSustain],pe[i.echoDelay]),C(i.effects)&&t.push(pe[i.reverb]),O(i.effects)&&(t.push(pe[i.granular]),t.push(pe[i.grainSize]),t.push(pe[i.grainAmounts]),t.push(pe[i.grainRange])),H(i.effects)&&(t.push(pe[i.ringModulation]),t.push(pe[i.ringModulationHz]),t.push(pe[i.ringModWaveformIndex]),t.push(pe[i.ringModPulseWidth]),t.push(pe[i.ringModHzOffset-u.rmHzOffsetMin>>6],pe[i.ringModHzOffset-u.rmHzOffsetMin&63])),4!=i.type&&(t.push(100,pe[i.fadeIn],pe[i.fadeOut]),t.push(pe[+i.clicklessTransition])),5==i.type||7==i.type){t.push(72);const e=new ce;for(let t=0;t<u.harmonicsControlPoints;t++)e.write(u.harmonicsControlPointBits,i.harmonicsWave.harmonics[t]);e.encodeBase64(t)}if(0==i.type){i.chipWave>186?(t.push(119,pe[i.chipWave-186]),t.push(pe[3])):i.chipWave>124?(t.push(119,pe[i.chipWave-124]),t.push(pe[2])):i.chipWave>62?(t.push(119,pe[i.chipWave-62]),t.push(pe[1])):(t.push(119,pe[i.chipWave]),t.push(pe[0])),t.push(104,pe[i.unison]),i.unison==u.unisons.length&&re(t,i.unisonVoices,i.unisonSpread,i.unisonOffset,i.unisonExpression,i.unisonSign),t.push(121);const e=te(0,32,i.chipWaveLoopMode)<<1|(i.isUsingAdvancedLoopControls?1:0);t.push(pe[e]);const n=te(0,32,0)<<1|(i.chipWavePlayBackwards?1:0);t.push(pe[n]),ae(t,i.chipWaveLoopStart),ae(t,i.chipWaveLoopEnd),ae(t,i.chipWaveStartOffset)}else if(1==i.type||11==i.type){if(1==i.type)t.push(65,pe[i.algorithm]),t.push(70,pe[i.feedbackType]);else{if(t.push(65,pe[i.algorithm6Op]),0==i.algorithm6Op){t.push(67,pe[i.customAlgorithm.carrierCount]),t.push(113);for(let e=0;e<i.customAlgorithm.modulatedBy.length;e++){for(let n=0;n<i.customAlgorithm.modulatedBy[e].length;n++)t.push(pe[i.customAlgorithm.modulatedBy[e][n]]);t.push(82)}t.push(113)}if(t.push(70,pe[i.feedbackType6Op]),0==i.feedbackType6Op){t.push(113);for(let e=0;e<i.customFeedbackType.indices.length;e++){for(let n=0;n<i.customFeedbackType.indices[e].length;n++)t.push(pe[i.customFeedbackType.indices[e][n]]);t.push(82)}t.push(113)}}t.push(66,pe[i.feedbackAmplitude]),t.push(81);for(let e=0;e<(11==i.type?6:u.operatorCount);e++)t.push(pe[i.operators[e].frequency]);t.push(80);for(let e=0;e<(11==i.type?6:u.operatorCount);e++)t.push(pe[i.operators[e].amplitude]);t.push(82);for(let e=0;e<(11==i.type?6:u.operatorCount);e++)t.push(pe[i.operators[e].waveform]),2==i.operators[e].waveform&&t.push(pe[i.operators[e].pulseWidth])}else if(9==i.type){i.chipWave>186?(t.push(119,pe[i.chipWave-186]),t.push(pe[3])):i.chipWave>124?(t.push(119,pe[i.chipWave-124]),t.push(pe[2])):i.chipWave>62?(t.push(119,pe[i.chipWave-62]),t.push(pe[1])):(t.push(119,pe[i.chipWave]),t.push(pe[0])),t.push(104,pe[i.unison]),i.unison==u.unisons.length&&re(t,i.unisonVoices,i.unisonSpread,i.unisonOffset,i.unisonExpression,i.unisonSign),t.push(77);for(let e=0;e<64;e++)t.push(pe[i.customChipWave[e]+24])}else if(2==i.type)t.push(119,pe[i.chipNoise]),t.push(104,pe[i.unison]),i.unison==u.unisons.length&&re(t,i.unisonVoices,i.unisonSpread,i.unisonOffset,i.unisonExpression,i.unisonSign);else if(3==i.type){t.push(83);const e=new ce;for(let t=0;t<u.spectrumControlPoints;t++)e.write(u.spectrumControlPointBits,i.spectrumWave.spectrum[t]);e.encodeBase64(t),t.push(104,pe[i.unison]),i.unison==u.unisons.length&&re(t,i.unisonVoices,i.unisonSpread,i.unisonOffset,i.unisonExpression,i.unisonSign)}else if(4==i.type){t.push(122);for(let e=0;e<u.drumCount;e++)t.push(pe[i.drumsetEnvelopes[e]]);t.push(83);const e=new ce;for(let t=0;t<u.drumCount;t++)for(let n=0;n<u.spectrumControlPoints;n++)e.write(u.spectrumControlPointBits,i.drumsetSpectrumWaves[t].spectrum[n]);e.encodeBase64(t),t.push(104,pe[i.unison]),i.unison==u.unisons.length&&re(t,i.unisonVoices,i.unisonSpread,i.unisonOffset,i.unisonExpression,i.unisonSign)}else if(5==i.type)t.push(104,pe[i.unison]),i.unison==u.unisons.length&&re(t,i.unisonVoices,i.unisonSpread,i.unisonOffset,i.unisonExpression,i.unisonSign);else if(6==i.type)t.push(87,pe[i.pulseWidth]),t.push(pe[i.decimalOffset>>6],pe[63&i.decimalOffset]),t.push(104,pe[i.unison]),i.unison==u.unisons.length&&re(t,i.unisonVoices,i.unisonSpread,i.unisonOffset,i.unisonExpression,i.unisonSign);else if(8==i.type)t.push(120,pe[i.supersawDynamism],pe[i.supersawSpread],pe[i.supersawShape]),t.push(87,pe[i.pulseWidth]),t.push(pe[i.decimalOffset>>6],pe[63&i.decimalOffset]);else if(7==i.type){if(u.stringSustainRange>32)throw new Error("Not enough bits to represent sustain value and type in same base64 character.");t.push(104,pe[i.unison]),i.unison==u.unisons.length&&re(t,i.unisonVoices,i.unisonSpread,i.unisonOffset,i.unisonExpression,i.unisonSign),t.push(73,pe[i.stringSustain|i.stringSustainType<<5])}else if(10!=i.type)throw new Error("Unknown instrument type.");t.push(69,pe[i.envelopeCount]),t.push(pe[i.envelopeSpeed]);for(let e=0;e<i.envelopeCount;e++){t.push(pe[i.envelopes[e].target]),u.instrumentAutomationTargets[i.envelopes[e].target].maxCount>1&&t.push(pe[i.envelopes[e].index]),t.push(pe[i.envelopes[e].envelope]),"pitch"==u.newEnvelopes[i.envelopes[e].envelope].name?i.isNoiseInstrument?(t.push(pe[i.envelopes[e].pitchEnvelopeStart]),t.push(pe[i.envelopes[e].pitchEnvelopeEnd])):(t.push(pe[i.envelopes[e].pitchEnvelopeStart>>6],pe[63&i.envelopes[e].pitchEnvelopeStart]),t.push(pe[i.envelopes[e].pitchEnvelopeEnd>>6],pe[63&i.envelopes[e].pitchEnvelopeEnd])):"random"==u.newEnvelopes[i.envelopes[e].envelope].name?(t.push(pe[i.envelopes[e].steps]),t.push(pe[i.envelopes[e].seed]),t.push(pe[i.envelopes[e].waveform])):"lfo"==u.newEnvelopes[i.envelopes[e].envelope].name&&(t.push(pe[i.envelopes[e].waveform]),5!=i.envelopes[e].waveform&&6!=i.envelopes[e].waveform||t.push(pe[i.envelopes[e].steps]));let n=+i.envelopes[e].discrete;n<<=1,n+=+i.envelopes[e].inverse,t.push(pe[n]?pe[n]:pe[0]),"pitch"!=u.newEnvelopes[i.envelopes[e].envelope].name&&"note size"!=u.newEnvelopes[i.envelopes[e].envelope].name&&"punch"!=u.newEnvelopes[i.envelopes[e].envelope].name&&"none"!=u.newEnvelopes[i.envelopes[e].envelope].name&&t.push(pe[u.perEnvelopeSpeedToIndices[i.envelopes[e].perEnvelopeSpeed]]),t.push(pe[10*i.envelopes[e].perEnvelopeLowerBound]),t.push(pe[10*i.envelopes[e].perEnvelopeUpperBound])}}t.push(98),e=new ce;let o=0;for(;1<<o<this.patternsPerChannel+1;)o++;for(let t=0;t<this.getChannelCount();t++)for(let n=0;n<this.barCount;n++)e.write(o,this.channels[t].bars[n]);e.encodeBase64(t),t.push(112),e=new ce;const r=new ce,l=Te.getNeededBits(u.noteSizeMax);for(let t=0;t<this.getChannelCount();t++){const n=this.channels[t],i=this.getMaxInstrumentsPerPattern(t),s=this.getChannelIsNoise(t),a=this.getChannelIsMod(t),o=Te.getNeededBits(i-u.instrumentCountMin),p=Te.getNeededBits(n.instruments.length-1);if(a){const i=Te.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let s=0;s<n.instruments.length;s++){let n=this.channels[t].instruments[s];for(let t=0;t<u.modCount;t++){const s=n.modChannels[t],a=n.modInstruments[t],o=n.modulators[t],r=n.modFilterTypes[t],l=n.modEnvelopeNumbers[t];let p=u.modulators[o].forSong?2:0;o==u.modulators.dictionary.none.index&&(p=3),e.write(2,p),0!=p&&1!=p||(e.write(8,s),e.write(i,a)),3!=p&&e.write(6,o),"eq filter"!=u.modulators[n.modulators[t]].name&&"note filter"!=u.modulators[n.modulators[t]].name&&"song eq"!=u.modulators[n.modulators[t]].name||e.write(6,r),"individual envelope speed"!=u.modulators[n.modulators[t]].name&&"reset envelope"!=u.modulators[n.modulators[t]].name&&"individual envelope lower bound"!=u.modulators[n.modulators[t]].name&&"individual envelope upper bound"!=u.modulators[n.modulators[t]].name||e.write(6,l)}}}const h=s||a?0:n.octave*u.pitchesPerOctave;let c=s?4:h;const f=a?[0,1,2,3,4,5]:s?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],d=[];for(let e=0;e<f.length;e++)f[e]+=h;for(const t of n.patterns){if(this.patternInstruments){const n=ne(u.instrumentCountMin,i,t.instruments.length);e.write(o,n-u.instrumentCountMin);for(let i=0;i<n;i++)e.write(p,t.instruments[i])}if(t.notes.length>0){e.write(1,1);let n=0;for(const i of t.notes){i.start<n&&a&&(e.write(2,0),e.write(1,1),e.writePartDuration(n-i.start)),i.start>n&&(e.write(2,0),a&&e.write(1,0),e.writePartDuration(i.start-n)),r.clear(),1==i.pitches.length?r.write(1,0):(r.write(1,1),r.write(3,i.pitches.length-2)),r.writePinCount(i.pins.length-1),a?r.write(9,i.pins[0].size):r.write(l,i.pins[0].size);let t=0,s=i.pitches[0],o=s;const p=[];for(let e=1;e<i.pins.length;e++){const n=i.pins[e],h=s+n.interval;o!=h?(r.write(1,1),p.push(h),o=h):r.write(1,0),r.writePartDuration(n.time-t),t=n.time,a?r.write(9,n.size):r.write(l,n.size)}const h=String.fromCharCode.apply(null,r.encodeBase64([])),u=d.indexOf(h);-1==u?(e.write(2,1),e.concat(r)):(e.write(1,1),e.writeLongTail(0,0,u),d.splice(u,1)),d.unshift(h),d.length>10&&d.pop();const m=i.pitches.concat(p);for(let t=0;t<m.length;t++){const n=m[t],s=f.indexOf(n);if(-1==s){let t=0,i=c;if(i<n)for(;i!=n;)i++,-1==f.indexOf(i)&&t++;else for(;i!=n;)i--,-1==f.indexOf(i)&&t--;e.write(1,0),e.writePitchInterval(t)}else e.write(1,1),e.write(4,s),f.splice(s,1);f.unshift(n),f.length>16&&f.pop(),c=t==i.pitches.length-1?i.pitches[0]:n}0==i.start&&e.write(1,i.continuesLastPattern?1:0),n=i.end}n<this.beatsPerBar*u.partsPerBeat+ +a&&(e.write(2,0),a&&e.write(1,0),e.writePartDuration(this.beatsPerBar*u.partsPerBeat+ +a-n))}else e.write(1,0)}}let p=e.lengthBase64(),h=[];for(;p>0;)h.unshift(pe[63&p]),p>>=6;t.push(pe[h.length]),Array.prototype.push.apply(t,h),e.encodeBase64(t);const c=64e3;let f="";if(null!=G.customSamples&&G.customSamples.length>0&&(f="|"+G.customSamples.join("|")),t.length<c)return String.fromCharCode.apply(null,t)+f;{let e="";for(let n=0;n<t.length;n+=c)e+=String.fromCharCode.apply(null,t.slice(n,n+c));return e+f}}static q(e){return 0==e?e=1:1==e&&(e=0),u.envelopes[te(0,u.envelopes.length,e)]}fromBase64String(e,t="auto"){let n="url type";if(null==e||""==e)return Te.P(),void this.initToDefault(!0);let i=0;for(;e.charCodeAt(i)<=32;)i++;if(35==e.charCodeAt(i)&&i++,123==e.charCodeAt(i))return void this.fromJsonObject(JSON.parse(0==i?e:e.substring(i)),t);const o=e.charCodeAt(i);let l=!1,p=!1,c=!1,f=!1,d=!1;106==o?(p=!0,i++):103==o?(c=!0,i++):117==o?(f=!0,i++):100==o?(p=!0,i++):97==o?(f=!0,i++):115==o?(d=!0,i++):l=!0;const m=he[e.charCodeAt(i++)];if(l&&(-1==m||m>Te.T||m<Te.H))return;if(p&&(-1==m||m>Te.O||m<Te.L))return;if(c&&(-1==m||m>Te.W||m<Te.R))return;if(f&&(-1==m||m>Te.N||m<Te.V))return;if(d&&(-1==m||m>Te.I||m<Te.$))return;const v=m<2,y=m<3,g=m<4,b=m<5,S=m<6,L=m<7,W=m<8,A=m<9;this.initToDefault(l&&A||p&&b||g&&c);const R=l&&A||p&&b;let N=!1;if(d||f||c){var B=(e=e.replaceAll("%7C","|")).split("|");if(e=B.shift(),null==G.customSamples||G.customSamples.join(", ")!=B.join(", ")){n="customSamples",Te.U();let e=!1,t=!1,i=!1;const o=[],l=[];s.statusTable={},s.urlTable={},s.totalSamples=0,s.samplesLoaded=0,r.dispatchEvent(new a(s.totalSamples,s.samplesLoaded));for(const n of B)if("legacysamples"===n.toLowerCase())e||(e=!0,o.push(n),h(0));else if("nintariboxsamples"===n.toLowerCase())t||(t=!0,o.push(n),h(1));else if("mariopaintboxsamples"===n.toLowerCase())i||(i=!0,o.push(n),h(2));else{const e=y;if(!Te.j(n,o,l,s,e))continue}if(o.length>0&&(G.customSamples=o),l.length>0){const e=w(l);G.presetCategories[G.presetCategories.length]={name:"Custom Sample Presets",presets:e,index:G.presetCategories.length}}}}if(y&&l){for(const e of this.channels)e.instruments[0].transition=u.transitions.dictionary.interrupt.index,e.instruments[0].effects|=1024;this.channels[3].instruments[0].chipNoise=0}let V=null;if(l&&A||p&&b||g&&c){n="legacy settings",V=[];for(let e=V.length;e<this.getChannelCount();e++){V[e]=[];for(let t=0;t<u.instrumentCountMin;t++)V[e][t]={}}}let $,U=0,j=0,Q=-1,_=!1,K=!1;for(;i<e.length;)switch($=e.charCodeAt(i++)){case 78:n="Song Title";var J=(he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)];this.title=decodeURIComponent(e.substring(i,i+J)),document.title=this.title+" - "+G.versionDisplayName,i+=J;break;case 110:n="Channel Count",this.pitchChannelCount=he[e.charCodeAt(i++)],this.noiseChannelCount=he[e.charCodeAt(i++)],this.modChannelCount=l||p&&v?0:he[e.charCodeAt(i++)],this.pitchChannelCount=ne(u.pitchChannelCountMin,u.pitchChannelCountMax,this.pitchChannelCount),this.noiseChannelCount=ne(u.noiseChannelCountMin,u.noiseChannelCountMax,this.noiseChannelCount),this.modChannelCount=ne(u.modChannelCountMin,u.modChannelCountMax,this.modChannelCount);for(let e=this.channels.length;e<this.getChannelCount();e++)this.channels[e]=new Pe;if(this.channels.length=this.getChannelCount(),l&&A||p&&b||g&&c)for(let e=V.length;e<this.getChannelCount();e++){V[e]=[];for(let t=0;t<u.instrumentCountMin;t++)V[e][t]={}}break;case 115:if(n="Scale",this.scale=te(0,u.scales.length,he[e.charCodeAt(i++)]),this.scale==u.scales.dictionary.Custom.index)for(var Y=1;Y<u.pitchesPerOctave;Y++)this.scaleCustom[Y]=1==he[e.charCodeAt(i++)];l&&(this.scale=0);break;case 107:if(n="Key",L&&l)this.key=te(0,u.keys.length,11-he[e.charCodeAt(i++)]),this.octave=0;else if(l||p)this.key=te(0,u.keys.length,he[e.charCodeAt(i++)]),this.octave=0;else if(c||y&&f){const t=he[e.charCodeAt(i++)],[n,s]=le(t);this.key=n,this.octave=s}else this.key=te(0,u.keys.length,he[e.charCodeAt(i++)]),this.octave=te(u.octaveMin,u.octaveMax+1,he[e.charCodeAt(i++)]+u.octaveMin);break;case 108:n="Loop Start",this.loopStart=b&&l?he[e.charCodeAt(i++)]:(he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)];break;case 101:n="Loop End",this.loopLength=b&&l?he[e.charCodeAt(i++)]:(he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)]+1;break;case 116:n="Tempo",this.tempo=g&&l?[95,120,151,190][he[e.charCodeAt(i++)]]:L&&l?[88,95,103,111,120,130,140,151,163,176,190,206,222,240,259][he[e.charCodeAt(i++)]]:he[e.charCodeAt(i++)]<<6|he[e.charCodeAt(i++)],this.tempo=te(u.tempoMin,u.tempoMax+1,this.tempo);break;case 109:if(n="Song Reverb (legacy)",A&&l)U=12*he[e.charCodeAt(i++)],U=te(0,u.reverbRange,U);else if(p&&b||g&&c)U=he[e.charCodeAt(i++)],U=te(0,u.reverbRange,U);else if(d&&!S){n="Advanced Instrument Settings";const t=this.channels[j].instruments[Q].advancedSettings;t.readBitfieldChar(he[e.charCodeAt(i++)]),t.randomSeed=he[e.charCodeAt(i++)]}break;case 97:n="Beats per bar (Time Signature)",this.beatsPerBar=y&&l?[6,7,8,9,10][he[e.charCodeAt(i++)]]:he[e.charCodeAt(i++)]+1,this.beatsPerBar=Math.max(u.beatsPerBarMin,Math.min(u.beatsPerBarMax,this.beatsPerBar));break;case 103:{n="Song Length";const t=(he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)]+1;this.barCount=ne(u.barCountMin,u.barCountMax,t);for(let e=0;e<this.getChannelCount();e++){for(let t=this.channels[e].bars.length;t<this.barCount;t++)this.channels[e].bars[t]=t<4?1:0;this.channels[e].bars.length=this.barCount}}break;case 106:{let t;n="Patterns (amount)",t=W&&l?he[e.charCodeAt(i++)]+1:(he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)]+1,this.patternsPerChannel=ne(1,u.barCountMax,t);const s=this.getChannelCount();for(let e=0;e<s;e++){const t=this.channels[e].patterns;for(let e=t.length;e<this.patternsPerChannel;e++)t[e]=new me;t.length=this.patternsPerChannel}}break;case 105:if(n="Instrument Amount",A&&l||p&&b||g&&c){const t=ne(u.instrumentCountMin,u.patternInstrumentCountMax,he[e.charCodeAt(i++)]+u.instrumentCountMin);this.layeredInstruments=!1,this.patternInstruments=t>1;for(let e=0;e<this.getChannelCount();e++){const n=e>=this.pitchChannelCount&&e<this.pitchChannelCount+this.noiseChannelCount,i=e>=this.pitchChannelCount+this.noiseChannelCount;for(let s=this.channels[e].instruments.length;s<t;s++)this.channels[e].instruments[s]=new Ee(n,i);if(this.channels[e].instruments.length=t,S&&l)for(let s=0;s<t;s++)this.channels[e].instruments[s].setTypeAndReset(n?2:0,n,i);for(let n=V[e].length;n<t;n++)V[e][n]={}}}else{const t=he[e.charCodeAt(i++)];this.layeredInstruments=0!=(2&t),this.patternInstruments=0!=(1&t);for(let t=0;t<this.getChannelCount();t++){let n=1;(this.layeredInstruments||this.patternInstruments)&&(n=ne(u.instrumentCountMin,this.getMaxInstrumentsPerChannel(),he[e.charCodeAt(i++)]+u.instrumentCountMin));const s=this.channels[t],a=this.getChannelIsNoise(t),o=this.getChannelIsMod(t);for(let e=s.instruments.length;e<n;e++)s.instruments[e]=new Ee(a,o);s.instruments.length=n}}break;case 114:if(n="Rhythm",f||d)if(d&&g||f&&b){const t=[1,1,0,1,2,3,4,5];this.rhythm=te(0,u.rhythms.length,t[he[e.charCodeAt(i++)]])}else this.rhythm=te(0,u.rhythms.length,he[e.charCodeAt(i++)]);else{let t=he[e.charCodeAt(i++)];this.rhythm=te(0,u.rhythms.length,t),(p&&y||l)&&(this.rhythm!=u.rhythms.dictionary["÷3 (triplets)"].index&&this.rhythm!=u.rhythms.dictionary["÷6"].index||(_=!0),this.rhythm>=u.rhythms.dictionary["÷6"].index&&(K=!0))}break;case 111:if(n="Channel Octave",y&&l){const t=he[e.charCodeAt(i++)];this.channels[t].octave=te(0,u.pitchOctaves,he[e.charCodeAt(i++)]+1),t>=this.pitchChannelCount&&(this.channels[t].octave=0)}else if(A&&l||p&&b||g&&c)for(let t=0;t<this.getChannelCount();t++)this.channels[t].octave=te(0,u.pitchOctaves,he[e.charCodeAt(i++)]+1),t>=this.pitchChannelCount&&(this.channels[t].octave=0);else{for(let t=0;t<this.pitchChannelCount;t++)this.channels[t].octave=te(0,u.pitchOctaves,he[e.charCodeAt(i++)]);for(let e=this.pitchChannelCount;e<this.getChannelCount();e++)this.channels[e].octave=0}break;case 84:{n="Instrument (start parsing)",Q++,Q>=this.channels[j].instruments.length&&(j++,Q=0),ne(0,this.channels.length-1,j);const t=this.channels[j].instruments[Q];let s=ne(0,11,he[e.charCodeAt(i++)]);p&&b||g&&c?7!=s&&8!=s||(s+=2):(p&&S||c&&!g||f&&b)&&(8!=s&&9!=s&&10!=s||(s+=1)),t.setTypeAndReset(s,j>=this.pitchChannelCount&&j<this.pitchChannelCount+this.noiseChannelCount,j>=this.pitchChannelCount+this.noiseChannelCount),!(L&&l||v&&p)||0!=s&&9!=s&&6!=s||(t.aliases=!0,t.distortion=0,t.effects|=8),_&&(t.arpeggioSpeed=9),K&&(t.fastTwoNoteArp=!0),L&&l&&t.chord!=u.chords.dictionary.simultaneous.index&&(t.effects|=2048)}break;case 117:{n="Instrument Preset";const t=he[e.charCodeAt(i++)]<<6|he[e.charCodeAt(i++)];this.channels[j].instruments[Q].preset=t,p&&b||g&&c?7==this.channels[j].instruments[Q].preset&&(this.channels[j].instruments[Q].preset=9,this.channels[j].instruments[Q].type=9):(p&&S||f&&b)&&(8==this.channels[j].instruments[Q].preset&&(this.channels[j].instruments[Q].preset=9,this.channels[j].instruments[Q].type=9),10==this.channels[j].instruments[Q].preset&&(this.channels[j].instruments[Q].preset=11,this.channels[j].instruments[Q].type=11)),l&&t==G.nameToPresetValue("grand piano 1")&&(this.channels[j].instruments[Q].preset=G.nameToPresetValue("grand piano 3"))}break;case 119:if(n="Chipwave / Noise",y&&l){const t=[1,2,3,4,5,6,7,8,0],n=he[e.charCodeAt(i++)],s=this.channels[n].instruments[0];s.chipWave=te(0,u.chipWaves.length,0|t[he[e.charCodeAt(i++)]]),s.convertLegacySettings(V[n][0],R)}else if(S&&l){const t=[1,2,3,4,5,6,7,8,0];for(let n=0;n<this.getChannelCount();n++)for(const s of this.channels[n].instruments)n>=this.pitchChannelCount?s.chipNoise=te(0,u.chipNoises.length,he[e.charCodeAt(i++)]):s.chipWave=te(0,u.chipWaves.length,0|t[he[e.charCodeAt(i++)]])}else if(L&&l){const t=[1,2,3,4,5,6,7,8,0];j>=this.pitchChannelCount?this.channels[j].instruments[Q].chipNoise=te(0,u.chipNoises.length,he[e.charCodeAt(i++)]):this.channels[j].instruments[Q].chipWave=te(0,u.chipWaves.length,0|t[he[e.charCodeAt(i++)]])}else if(2==this.channels[j].instruments[Q].type)this.channels[j].instruments[Q].chipNoise=te(0,u.chipNoises.length,he[e.charCodeAt(i++)]);else if(d||f){const t=he[e.charCodeAt(i++)],n=he[e.charCodeAt(i++)];this.channels[j].instruments[Q].chipWave=te(0,u.chipWaves.length,3==n?t+186:2==n?t+124:1==n?t+62:t)}else this.channels[j].instruments[Q].chipWave=te(0,u.chipWaves.length,he[e.charCodeAt(i++)]);break;case 102:if(n="EQ Filter",A&&l||b&&p||g&&c)if(L&&l){const t=[10,6,3,0,8,5,2],n=["none","none","none","none","decay 1","decay 2","decay 3"];if(y&&l){const s=he[e.charCodeAt(i++)],a=this.channels[s].instruments[0],o=V[s][0],r=[1,3,4,5][te(0,t.length,he[e.charCodeAt(i++)])];o.filterCutoff=t[r],o.filterResonance=0,o.filterEnvelope=u.envelopes.dictionary[n[r]],a.convertLegacySettings(o,R)}else if(S&&l)for(let s=0;s<this.getChannelCount();s++)for(let a=0;a<this.channels[s].instruments.length;a++){const o=this.channels[s].instruments[a],r=V[s][a],l=te(0,t.length,he[e.charCodeAt(i++)]+1);s<this.pitchChannelCount?(r.filterCutoff=t[l],r.filterResonance=0,r.filterEnvelope=u.envelopes.dictionary[n[l]]):(r.filterCutoff=10,r.filterResonance=0,r.filterEnvelope=u.envelopes.dictionary.none),o.convertLegacySettings(r,R)}else{const s=te(0,t.length,he[e.charCodeAt(i++)]),a=this.channels[j].instruments[Q],o=V[j][Q];o.filterCutoff=t[s],o.filterResonance=0,o.filterEnvelope=u.envelopes.dictionary[n[s]],a.convertLegacySettings(o,R)}}else{const t=11,n=this.channels[j].instruments[Q],s=V[j][Q];s.filterCutoff=te(0,t,he[e.charCodeAt(i++)]),n.convertLegacySettings(s,R)}else{const t=this.channels[j].instruments[Q];let n=he[e.charCodeAt(i++)];if(l||0==n){t.eqFilterType=!1,(p||c||f||d)&&(n=he[e.charCodeAt(i++)]);const s=n;t.eqFilter.controlPointCount=te(0,u.filterMaxPoints+1,s);for(let e=t.eqFilter.controlPoints.length;e<t.eqFilter.controlPointCount;e++)t.eqFilter.controlPoints[e]=new Fe;for(let n=0;n<t.eqFilter.controlPointCount;n++){const s=t.eqFilter.controlPoints[n];s.type=te(0,3,he[e.charCodeAt(i++)]),s.freq=te(0,u.filterFreqRange,he[e.charCodeAt(i++)]),s.gain=te(0,u.filterGainRange,he[e.charCodeAt(i++)])}for(let e=t.eqFilter.controlPointCount;e<s;e++)i+=3;if(t.eqSubFilters[0]=t.eqFilter,p&&!b||c&&!g||f||d){let n=he[e.charCodeAt(i++)]<<6|he[e.charCodeAt(i++)];for(let s=0;s<u.filterMorphCount-1;s++)if(n&1<<s){const n=he[e.charCodeAt(i++)];null==t.eqSubFilters[s+1]&&(t.eqSubFilters[s+1]=new ke),t.eqSubFilters[s+1].controlPointCount=te(0,u.filterMaxPoints+1,n);for(let e=t.eqSubFilters[s+1].controlPoints.length;e<t.eqSubFilters[s+1].controlPointCount;e++)t.eqSubFilters[s+1].controlPoints[e]=new Fe;for(let n=0;n<t.eqSubFilters[s+1].controlPointCount;n++){const a=t.eqSubFilters[s+1].controlPoints[n];a.type=te(0,3,he[e.charCodeAt(i++)]),a.freq=te(0,u.filterFreqRange,he[e.charCodeAt(i++)]),a.gain=te(0,u.filterGainRange,he[e.charCodeAt(i++)])}for(let e=t.eqSubFilters[s+1].controlPointCount;e<n;e++)i+=3}}}else t.eqFilterType=!0,t.eqFilterSimpleCut=te(0,u.filterSimpleCutRange,he[e.charCodeAt(i++)]),t.eqFilterSimplePeak=te(0,u.filterSimplePeakRange,he[e.charCodeAt(i++)])}break;case 121:if(d||f)if(n="Chipwave loop controls (custom samples)",y&&f){const t=oe(e,i);i+=6;const n=e.slice(i,i+t);i+=t;const s=JSON.parse(atob(n));for(const e of s){const t=e.channel,n=e.instrument,i=e.info,s=this.channels[t].instruments[n];s.isUsingAdvancedLoopControls=i.isUsingAdvancedLoopControls,s.chipWaveLoopStart=i.chipWaveLoopStart,s.chipWaveLoopEnd=i.chipWaveLoopEnd,s.chipWaveLoopMode=i.chipWaveLoopMode,s.chipWavePlayBackwards=i.chipWavePlayBackwards,s.chipWaveStartOffset=i.chipWaveStartOffset}}else{const t=he[e.charCodeAt(i++)],n=Boolean(1&t),s=t>>1,a=he[e.charCodeAt(i++)],o=Boolean(1&a),r=oe(e,i);i+=6;const l=oe(e,i);i+=6;const p=oe(e,i);i+=6;const h=this.channels[j].instruments[Q];h.isUsingAdvancedLoopControls=n,h.chipWaveLoopStart=r,h.chipWaveLoopEnd=l,h.chipWaveLoopMode=s,h.chipWavePlayBackwards=o,h.chipWaveStartOffset=p}else if(c&&!g&&S)n="Legacy Samples (Goldbox)","legacysamples"!=document.URL.substring(document.URL.length-13).toLowerCase()&&(N||(N=!0,u.willReloadForCustomSamples=!0,G.customSamples=["legacySamples"],h(0))),this.channels[j].instruments[Q].chipWave=te(0,u.chipWaves.length,he[e.charCodeAt(i++)]+125);else if(A&&l||p&&b||g&&c){n="Filter Resonance (legacy)";const t=8,s=this.channels[j].instruments[Q],a=V[j][Q];a.filterResonance=te(0,t,he[e.charCodeAt(i++)]),s.convertLegacySettings(a,R)}break;case 122:{n="Drumset Envelopes";const t=this.channels[j].instruments[Q],s=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11];if(A&&l||b&&p||g&&c)if(4==t.type)for(let n=0;n<u.drumCount;n++){let a=he[e.charCodeAt(i++)];(v&&c||!c&&!f&&!d)&&(a=s[a]),t.drumsetEnvelopes[n]=Te.q(a).index}else{const n=V[j][Q];let a=he[e.charCodeAt(i++)];(v&&c||!c&&!f&&!d)&&(a=s[a]),n.filterEnvelope=Te.q(a),t.convertLegacySettings(n,R)}else for(let n=0;n<u.drumCount;n++){let a=he[e.charCodeAt(i++)];(v&&c||!c&&!f&&!d)&&(a=s[a]),!d&&a>=2&&a++,t.drumsetEnvelopes[n]=te(0,u.envelopes.length,a)}}break;case 87:{n="Pulse Width";const t=this.channels[j].instruments[Q];if(t.pulseWidth=te(0,u.pulseWidthRange+ +p+1,he[e.charCodeAt(i++)]),l&&(t.pulseWidth=Math.round(Math.pow(.5,(7-t.pulseWidth)*u.pulseWidthStepPower)*u.pulseWidthRange)),A&&l||b&&p||g&&c){const n=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11],s=V[j][Q];let a=he[e.charCodeAt(i++)];(v&&c||!c&&!f&&!d)&&(a=n[a]),s.pulseEnvelope=Te.q(a),t.convertLegacySettings(s,R)}n="Decimal Offset",(f&&!g||d)&&(t.decimalOffset=te(0,100,(he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)]))}break;case 73:{n="Sustain (Picked String)";const t=this.channels[j].instruments[Q],s=he[e.charCodeAt(i++)];t.stringSustain=te(0,u.stringSustainRange,31&s),t.stringSustainType=u.enableAcousticSustain?te(0,2,s>>5):0}break;case 100:if(n="Fade",A&&l||p&&b||g&&c){n="Transition + Fade (legacy)";const t=[{transition:"interrupt",fadeInSeconds:0,fadeOutTicks:-1},{transition:"normal",fadeInSeconds:0,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3},{transition:"normal",fadeInSeconds:.04,fadeOutTicks:6},{transition:"normal",fadeInSeconds:0,fadeOutTicks:48},{transition:"normal",fadeInSeconds:.0125,fadeOutTicks:72},{transition:"normal",fadeInSeconds:.06,fadeOutTicks:96},{transition:"slide in pattern",fadeInSeconds:.025,fadeOutTicks:-3}];if(y&&l){const n=he[e.charCodeAt(i++)],s=t[te(0,t.length,he[e.charCodeAt(i++)])],a=this.channels[n].instruments[0];a.fadeIn=Ge.secondsToFadeInSetting(s.fadeInSeconds),a.fadeOut=Ge.ticksToFadeOutSetting(s.fadeOutTicks),a.transition=u.transitions.dictionary[s.transition].index,a.transition!=u.transitions.dictionary.normal.index&&(a.effects|=1024)}else if(S&&l)for(let n=0;n<this.getChannelCount();n++)for(const s of this.channels[n].instruments){const n=t[te(0,t.length,he[e.charCodeAt(i++)])];s.fadeIn=Ge.secondsToFadeInSetting(n.fadeInSeconds),s.fadeOut=Ge.ticksToFadeOutSetting(n.fadeOutTicks),s.transition=u.transitions.dictionary[n.transition].index,s.transition!=u.transitions.dictionary.normal.index&&(s.effects|=1024)}else if(g&&!c&&!f&&!d||l){const n=t[te(0,t.length,he[e.charCodeAt(i++)])],s=this.channels[j].instruments[Q];s.fadeIn=Ge.secondsToFadeInSetting(n.fadeInSeconds),s.fadeOut=Ge.ticksToFadeOutSetting(n.fadeOutTicks),s.transition=u.transitions.dictionary[n.transition].index,s.transition!=u.transitions.dictionary.normal.index&&(s.effects|=1024)}else{const n=t[te(0,t.length,he[e.charCodeAt(i++)])],s=this.channels[j].instruments[Q];s.fadeIn=Ge.secondsToFadeInSetting(n.fadeInSeconds),s.fadeOut=Ge.ticksToFadeOutSetting(n.fadeOutTicks),s.transition=u.transitions.dictionary[n.transition].index,he[e.charCodeAt(i++)]>0&&(s.legacyTieOver=!0),s.clicklessTransition=!!he[e.charCodeAt(i++)],(s.transition!=u.transitions.dictionary.normal.index||s.clicklessTransition)&&(s.effects|=1024)}}else{const t=this.channels[j].instruments[Q];t.fadeIn=te(0,u.fadeInRange,he[e.charCodeAt(i++)]),t.fadeOut=te(0,u.fadeOutTicks.length,he[e.charCodeAt(i++)]),(p||c||f||d)&&(t.clicklessTransition=!!he[e.charCodeAt(i++)])}break;case 99:if(A&&l||p&&b||g&&c)if(n="Vibrato (legacy)",L&&l)if(y&&l){const t=[0,3,2,0],n=["none","none","none","tremolo2"],s=he[e.charCodeAt(i++)],a=te(0,t.length,he[e.charCodeAt(i++)]),o=this.channels[s].instruments[0],r=V[s][0];o.vibrato=t[a],null!=r.filterEnvelope&&0!=r.filterEnvelope.type||(r.filterEnvelope=u.envelopes.dictionary[n[a]],o.convertLegacySettings(r,R)),o.vibrato!=u.vibratos.dictionary.none.index&&(o.effects|=512)}else if(S&&l){const t=[0,1,2,3,0,0],n=["none","none","none","none","tremolo5","tremolo2"];for(let s=0;s<this.getChannelCount();s++)for(let a=0;a<this.channels[s].instruments.length;a++){const o=te(0,t.length,he[e.charCodeAt(i++)]),r=this.channels[s].instruments[a],l=V[s][a];r.vibrato=t[o],null!=l.filterEnvelope&&0!=l.filterEnvelope.type||(l.filterEnvelope=u.envelopes.dictionary[n[o]],r.convertLegacySettings(l,R)),r.vibrato!=u.vibratos.dictionary.none.index&&(r.effects|=512),(0!=U||p&&b||g&&c)&&!this.getChannelIsNoise(s)&&(r.effects|=1,r.reverb=U)}}else{const t=[0,1,2,3,0,0],n=["none","none","none","none","tremolo5","tremolo2"],s=te(0,t.length,he[e.charCodeAt(i++)]),a=this.channels[j].instruments[Q],o=V[j][Q];a.vibrato=t[s],null!=o.filterEnvelope&&0!=o.filterEnvelope.type||(o.filterEnvelope=u.envelopes.dictionary[n[s]],a.convertLegacySettings(o,R)),a.vibrato!=u.vibratos.dictionary.none.index&&(a.effects|=512),(0!=U||p&&b||g&&c)&&(a.effects|=1,a.reverb=U)}else{const t=this.channels[j].instruments[Q],n=te(0,u.vibratos.length+1,he[e.charCodeAt(i++)]);t.vibrato=n,t.vibrato!=u.vibratos.dictionary.none.index&&(t.effects|=512),n==u.vibratos.length?(t.vibratoDepth=te(0,u.modulators.dictionary["vibrato depth"].maxRawVol+1,he[e.charCodeAt(i++)])/50,t.vibratoSpeed=te(0,u.modulators.dictionary["vibrato speed"].maxRawVol+1,he[e.charCodeAt(i++)]),t.vibratoDelay=te(0,u.modulators.dictionary["vibrato delay"].maxRawVol+1,he[e.charCodeAt(i++)])/2,t.vibratoType=te(0,u.vibratoTypes.length,he[e.charCodeAt(i++)]),t.effects|=512):(t.vibratoDepth=u.vibratos[t.vibrato].amplitude,t.vibratoSpeed=10,t.vibratoDelay=u.vibratos[t.vibrato].delayTicks/2,t.vibratoType=u.vibratos[t.vibrato].type)}else if(n="Song EQ",d&&!g){const t=he[e.charCodeAt(i++)];this.eqFilter.controlPointCount=te(0,u.filterMaxPoints+1,t);for(let e=this.eqFilter.controlPoints.length;e<this.eqFilter.controlPointCount;e++)this.eqFilter.controlPoints[e]=new Fe;for(let t=0;t<this.eqFilter.controlPointCount;t++){const n=this.eqFilter.controlPoints[t];n.type=te(0,3,he[e.charCodeAt(i++)]),n.freq=te(0,u.filterFreqRange,he[e.charCodeAt(i++)]),n.gain=te(0,u.filterGainRange,he[e.charCodeAt(i++)])}for(let e=this.eqFilter.controlPointCount;e<t;e++)i+=3;this.eqSubFilters[0]=this.eqFilter;let n=he[e.charCodeAt(i++)]<<6|he[e.charCodeAt(i++)];for(let t=0;t<u.filterMorphCount-1;t++)if(n&1<<t){const n=he[e.charCodeAt(i++)];null==this.eqSubFilters[t+1]&&(this.eqSubFilters[t+1]=new ke),this.eqSubFilters[t+1].controlPointCount=te(0,u.filterMaxPoints+1,n);for(let e=this.eqSubFilters[t+1].controlPoints.length;e<this.eqSubFilters[t+1].controlPointCount;e++)this.eqSubFilters[t+1].controlPoints[e]=new Fe;for(let n=0;n<this.eqSubFilters[t+1].controlPointCount;n++){const s=this.eqSubFilters[t+1].controlPoints[n];s.type=te(0,3,he[e.charCodeAt(i++)]),s.freq=te(0,u.filterFreqRange,he[e.charCodeAt(i++)]),s.gain=te(0,u.filterGainRange,he[e.charCodeAt(i++)])}for(let e=this.eqSubFilters[t+1].controlPointCount;e<n;e++)i+=3}}break;case 71:if(n="Arp Speed (legacy)",p&&b||g&&c){const t=this.channels[j].instruments[Q];t.arpeggioSpeed=te(0,u.modulators.dictionary["arp speed"].maxRawVol+1,he[e.charCodeAt(i++)]),t.fastTwoNoteArp=!!he[e.charCodeAt(i++)]}break;case 104:if(n="Unison",y&&l){const t=he[e.charCodeAt(i++)],n=this.channels[t].instruments[0];n.unison=te(0,u.unisons.length,he[e.charCodeAt(i++)]),n.unisonVoices=u.unisons[n.unison].voices,n.unisonSpread=u.unisons[n.unison].spread,n.unisonOffset=u.unisons[n.unison].offset,n.unisonExpression=u.unisons[n.unison].expression,n.unisonSign=u.unisons[n.unison].sign}else if(S&&l)for(let t=0;t<this.getChannelCount();t++)for(const n of this.channels[t].instruments){const t=he[e.charCodeAt(i++)];let s=te(0,u.unisons.length,t);8==t&&(s=2,n.chord=3),n.unison=s,n.unisonVoices=u.unisons[n.unison].voices,n.unisonSpread=u.unisons[n.unison].spread,n.unisonOffset=u.unisons[n.unison].offset,n.unisonExpression=u.unisons[n.unison].expression,n.unisonSign=u.unisons[n.unison].sign}else if(L&&l){const t=he[e.charCodeAt(i++)];let n=te(0,u.unisons.length,t);const s=this.channels[j].instruments[Q];8==t&&(n=2,s.chord=3),s.unison=n,s.unisonVoices=u.unisons[s.unison].voices,s.unisonSpread=u.unisons[s.unison].spread,s.unisonOffset=u.unisons[s.unison].offset,s.unisonExpression=u.unisons[s.unison].expression,s.unisonSign=u.unisons[s.unison].sign}else{const t=this.channels[j].instruments[Q];t.unison=te(0,u.unisons.length+1,he[e.charCodeAt(i++)]);const n=b||!d?27:u.unisons.length;if((f&&!b||d)&&t.unison==n){t.unison=u.unisons.length,t.unisonVoices=he[e.charCodeAt(i++)];const n=he[e.charCodeAt(i++)],s=he[e.charCodeAt(i++)]+63*(he[e.charCodeAt(i++)]+63*he[e.charCodeAt(i++)]),a=he[e.charCodeAt(i++)],o=he[e.charCodeAt(i++)]+63*(he[e.charCodeAt(i++)]+63*he[e.charCodeAt(i++)]),r=he[e.charCodeAt(i++)],l=he[e.charCodeAt(i++)]+63*he[e.charCodeAt(i++)],p=he[e.charCodeAt(i++)],h=he[e.charCodeAt(i++)]+63*he[e.charCodeAt(i++)];t.unisonSpread=s/1e3,0==n&&(t.unisonSpread*=-1),t.unisonOffset=o/1e3,0==a&&(t.unisonOffset*=-1),t.unisonExpression=l/1e3,0==r&&(t.unisonExpression*=-1),t.unisonSign=h/1e3,0==p&&(t.unisonSign*=-1)}else t.unisonVoices=u.unisons[t.unison].voices,t.unisonSpread=u.unisons[t.unison].spread,t.unisonOffset=u.unisons[t.unison].offset,t.unisonExpression=u.unisons[t.unison].expression,t.unisonSign=u.unisons[t.unison].sign}break;case 67:if(n="Chord Type (legacy)",A&&l||p&&b||g&&c){const t=this.channels[j].instruments[Q];t.chord=te(0,u.chords.length,he[e.charCodeAt(i++)]),t.chord!=u.chords.dictionary.simultaneous.index&&(t.effects|=2048)}break;case 113:{n="Effects";const t=this.channels[j].instruments[Q];if(A&&l||p&&b||g&&c){t.effects=32767&he[e.charCodeAt(i++)],0!=U||p&&b||g&&c?C(t.effects)&&(t.reverb=U):t.effects&=-2,t.effects|=4,t.vibrato!=u.vibratos.dictionary.none.index&&(t.effects|=512),t.detune!=u.detuneCenter&&(t.effects|=256),t.aliases?t.effects|=8:t.effects&=-9;const n=V[j][Q];t.convertLegacySettings(n,R)}else{if(t.effects=d&&!b?he[e.charCodeAt(i++)]<<12|he[e.charCodeAt(i++)]<<6|he[e.charCodeAt(i++)]:he[e.charCodeAt(i++)]<<6|he[e.charCodeAt(i++)],q(t.effects)){let n=he[e.charCodeAt(i++)];if(l||0==n){t.noteFilterType=!1,(p||c||f||d)&&(n=he[e.charCodeAt(i++)]),t.noteFilter.controlPointCount=te(0,u.filterMaxPoints+1,n);for(let e=t.noteFilter.controlPoints.length;e<t.noteFilter.controlPointCount;e++)t.noteFilter.controlPoints[e]=new Fe;for(let n=0;n<t.noteFilter.controlPointCount;n++){const s=t.noteFilter.controlPoints[n];s.type=te(0,3,he[e.charCodeAt(i++)]),s.freq=te(0,u.filterFreqRange,he[e.charCodeAt(i++)]),s.gain=te(0,u.filterGainRange,he[e.charCodeAt(i++)])}for(let e=t.noteFilter.controlPointCount;e<n;e++)i+=3;if(t.noteSubFilters[0]=t.noteFilter,p&&!b||c||f||d){let n=he[e.charCodeAt(i++)]<<6|he[e.charCodeAt(i++)];for(let s=0;s<u.filterMorphCount-1;s++)if(n&1<<s){const n=he[e.charCodeAt(i++)];null==t.noteSubFilters[s+1]&&(t.noteSubFilters[s+1]=new ke),t.noteSubFilters[s+1].controlPointCount=te(0,u.filterMaxPoints+1,n);for(let e=t.noteSubFilters[s+1].controlPoints.length;e<t.noteSubFilters[s+1].controlPointCount;e++)t.noteSubFilters[s+1].controlPoints[e]=new Fe;for(let n=0;n<t.noteSubFilters[s+1].controlPointCount;n++){const a=t.noteSubFilters[s+1].controlPoints[n];a.type=te(0,3,he[e.charCodeAt(i++)]),a.freq=te(0,u.filterFreqRange,he[e.charCodeAt(i++)]),a.gain=te(0,u.filterGainRange,he[e.charCodeAt(i++)])}for(let e=t.noteSubFilters[s+1].controlPointCount;e<n;e++)i+=3}}}else t.noteFilterType=!0,t.noteFilter.reset(),t.noteFilterSimpleCut=te(0,u.filterSimpleCutRange,he[e.charCodeAt(i++)]),t.noteFilterSimplePeak=te(0,u.filterSimplePeakRange,he[e.charCodeAt(i++)])}x(t.effects)&&(t.transition=te(0,u.transitions.length,he[e.charCodeAt(i++)])),M(t.effects)&&(t.chord=te(0,u.chords.length,he[e.charCodeAt(i++)]),t.chord==u.chords.dictionary.arpeggio.index&&(p||c||f||d)&&(t.arpeggioSpeed=he[e.charCodeAt(i++)],t.fastTwoNoteArp=!!he[e.charCodeAt(i++)]),t.chord==u.chords.dictionary.monophonic.index&&d&&!b&&(t.monoChordTone=he[e.charCodeAt(i++)])),F(t.effects)&&(t.pitchShift=te(0,u.pitchShiftRange,he[e.charCodeAt(i++)])),k(t.effects)&&(l?(t.detune=te(u.detuneMin,u.detuneMax+1,he[e.charCodeAt(i++)]),t.detune=Math.round((t.detune-9)*(Math.abs(t.detune-9)+1)/2+u.detuneCenter)):t.detune=te(u.detuneMin,u.detuneMax+1,(he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)])),I(t.effects)&&(t.vibrato=te(0,u.vibratos.length+1,he[e.charCodeAt(i++)]),t.vibrato==u.vibratos.length&&(p||c||f||d)?(t.vibratoDepth=te(0,u.modulators.dictionary["vibrato depth"].maxRawVol+1,he[e.charCodeAt(i++)])/25,t.vibratoSpeed=te(0,u.modulators.dictionary["vibrato speed"].maxRawVol+1,he[e.charCodeAt(i++)]),t.vibratoDelay=te(0,u.modulators.dictionary["vibrato delay"].maxRawVol+1,he[e.charCodeAt(i++)]),t.vibratoType=te(0,u.vibratoTypes.length,he[e.charCodeAt(i++)])):(t.vibratoDepth=u.vibratos[t.vibrato].amplitude,t.vibratoSpeed=10,t.vibratoDelay=u.vibratos[t.vibrato].delayTicks/2,t.vibratoType=u.vibratos[t.vibrato].type)),E(t.effects)&&(t.distortion=te(0,u.distortionRange,he[e.charCodeAt(i++)]),(p&&!b||c||f||d)&&(t.aliases=!!he[e.charCodeAt(i++)])),P(t.effects)&&(t.bitcrusherFreq=te(0,u.bitcrusherFreqRange,he[e.charCodeAt(i++)]),t.bitcrusherQuantization=te(0,u.bitcrusherQuantizationRange,he[e.charCodeAt(i++)])),T(t.effects)&&(t.pan=te(0,u.panMax+1,l?Math.round(he[e.charCodeAt(i++)]*(u.panMax/8)):(he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)]),(p&&!v||c||f||d)&&(t.panDelay=he[e.charCodeAt(i++)])),D(t.effects)&&(t.chorus=l?2*te(0,u.chorusRange/2+1,he[e.charCodeAt(i++)]):te(0,u.chorusRange,he[e.charCodeAt(i++)])),z(t.effects)&&(t.echoSustain=te(0,u.echoSustainRange,he[e.charCodeAt(i++)]),t.echoDelay=te(0,u.echoDelayRange,he[e.charCodeAt(i++)])),C(t.effects)&&(t.reverb=te(0,u.reverbRange,l?Math.round(he[e.charCodeAt(i++)]*u.reverbRange/3):he[e.charCodeAt(i++)])),O(t.effects)&&(t.granular=he[e.charCodeAt(i++)],t.grainSize=he[e.charCodeAt(i++)],t.grainAmounts=he[e.charCodeAt(i++)],t.grainRange=he[e.charCodeAt(i++)]),H(t.effects)&&(t.ringModulation=te(0,u.ringModRange,he[e.charCodeAt(i++)]),t.ringModulationHz=te(0,u.ringModHzRange,he[e.charCodeAt(i++)]),t.ringModWaveformIndex=te(0,u.operatorWaves.length,he[e.charCodeAt(i++)]),t.ringModPulseWidth=te(0,u.pulseWidthRange,he[e.charCodeAt(i++)]),t.ringModHzOffset=te(u.rmHzOffsetMin,u.rmHzOffsetMax+1,(he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)]))}t.effects&=32767}break;case 118:if(n="Instrument Volume",y&&l){const t=he[e.charCodeAt(i++)];this.channels[t].instruments[0].volume=Math.round(te(-u.volumeRange/2,1,5*-he[e.charCodeAt(i++)]))}else if(S&&l)for(let t=0;t<this.getChannelCount();t++)for(const n of this.channels[t].instruments)n.volume=Math.round(te(-u.volumeRange/2,1,5*-he[e.charCodeAt(i++)]));else if(L&&l){this.channels[j].instruments[Q].volume=Math.round(te(-u.volumeRange/2,1,5*-he[e.charCodeAt(i++)]))}else if(l){this.channels[j].instruments[Q].volume=Math.round(te(-u.volumeRange/2,1,25*-he[e.charCodeAt(i++)]/7))}else{this.channels[j].instruments[Q].volume=Math.round(te(-u.volumeRange/2,u.volumeRange/2+1,(he[e.charCodeAt(i++)]<<6|he[e.charCodeAt(i++)])-u.volumeRange/2))}break;case 76:if(n="Panning (legacy)",A&&l){this.channels[j].instruments[Q].pan=te(0,u.panMax+1,he[e.charCodeAt(i++)]*(u.panMax/8))}else if(p&&b||g&&c){const t=this.channels[j].instruments[Q];t.pan=te(0,u.panMax+1,(he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)]),(p&&!y||c||f||d)&&(t.panDelay=he[e.charCodeAt(i++)])}break;case 68:{n="Detune (legacy)";const t=this.channels[j].instruments[Q];(p&&b||g&&c)&&(t.detune=te(u.detuneMin,u.detuneMax+1,4*((he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)])),t.effects|=256)}break;case 77:{n="Custom Chip";let t=this.channels[j].instruments[Q];for(let n=0;n<64;n++)t.customChipWave[n]=te(-24,25,he[e.charCodeAt(i++)]-24);let s=0;for(let e=0;e<t.customChipWave.length;e++)s+=t.customChipWave[e];const a=s/t.customChipWave.length;let o=0,r=0;for(let e=0;e<t.customChipWave.length;e++)o+=r,r=t.customChipWave[e]-a,t.customChipWaveIntegral[e]=o;t.customChipWaveIntegral[64]=0}break;case 79:{n="Limiter";let t=he[e.charCodeAt(i++)];63==t?this.restoreLimiterDefaults():(this.compressionRatio=t<10?t/10:1+(t-10)/60,t=he[e.charCodeAt(i++)],this.limitRatio=t<10?t/10:t-9,this.limitDecay=he[e.charCodeAt(i++)],this.limitRise=250*he[e.charCodeAt(i++)]+2e3,this.compressionThreshold=he[e.charCodeAt(i++)]/20,this.limitThreshold=he[e.charCodeAt(i++)]/20,this.masterGain=((he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)])/50)}break;case 85:n="Channel Names";for(let t=0;t<this.getChannelCount();t++){var Z;Z=!g||c||f||d?(he[e.charCodeAt(i++)]<<6)+he[e.charCodeAt(i++)]:he[e.charCodeAt(i++)],this.channels[t].name=decodeURIComponent(e.substring(i,i+Z)),i+=Z}break;case 65:{n="FM Algorithm";const t=this.channels[j].instruments[Q];if(1==t.type)t.algorithm=te(0,u.algorithms.length,he[e.charCodeAt(i++)]);else if(t.algorithm6Op=te(0,u.algorithms6Op.length,he[e.charCodeAt(i++)]),t.customAlgorithm.fromPreset(t.algorithm6Op),67==e.charCodeAt(i)){let n=te(1,u.operatorCount+2+1,he[e.charCodeAt(i+1)]);i++;let s=[];if(113==e.charCodeAt(i+1)){i++;let a=0;for(i++;113!=e.charCodeAt(i);){s[a]=[];let t=0;for(;82!=e.charCodeAt(i);)s[a][t]=te(1,u.operatorCount+3,he[e.charCodeAt(i)]),t++,i++;a++,i++}t.customAlgorithm.set(n,s),i++}}if(A&&l||b&&p||g&&c){const e=V[j][Q];t.convertLegacySettings(e,R)}}break;case 120:if(n="Supersaw",c&&!g&&S){const t=he[e.charCodeAt(i++)];t+62>85&&"legacysamples"!=document.URL.substring(document.URL.length-13).toLowerCase()&&(N||(N=!0,u.willReloadForCustomSamples=!0,G.customSamples=["legacySamples"],h(0))),this.channels[j].instruments[Q].chipWave=t+62>78?te(0,u.chipWaves.length,t+63):t+62>67?te(0,u.chipWaves.length,t+61):t+62==67?40:te(0,u.chipWaves.length,t+62)}else{const t=this.channels[j].instruments[Q];t.supersawDynamism=te(0,u.supersawDynamismMax+1,he[e.charCodeAt(i++)]),t.supersawSpread=te(0,u.supersawSpreadMax+1,he[e.charCodeAt(i++)]),t.supersawShape=te(0,u.supersawShapeMax+1,he[e.charCodeAt(i++)])}break;case 70:{n="FM Feedback";const t=this.channels[j].instruments[Q];if(1==t.type)t.feedbackType=te(0,u.feedbacks.length,he[e.charCodeAt(i++)]);else{t.feedbackType6Op=te(0,u.feedbacks6Op.length,he[e.charCodeAt(i++)]),t.customFeedbackType.fromPreset(t.feedbackType6Op);let n=[];if(113==e.charCodeAt(i)){let s=0;for(i++;113!=e.charCodeAt(i);){n[s]=[];let t=0;for(;82!=e.charCodeAt(i);)n[s][t]=te(1,u.operatorCount+2,he[e.charCodeAt(i)]),t++,i++;s++,i++}t.customFeedbackType.set(n),i++}}}break;case 66:n="FM Feedback amount",this.channels[j].instruments[Q].feedbackAmplitude=te(0,u.operatorAmplitudeMax+1,he[e.charCodeAt(i++)]);break;case 86:if(n="Feedback Envelope (legacy)",A&&l||b&&p||g&&c){const t=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11],n=this.channels[j].instruments[Q],s=V[j][Q];let a=he[e.charCodeAt(i++)];(v&&c||!c&&!f&&!d)&&(a=t[a]),s.feedbackEnvelope=Te.q(he[a]),n.convertLegacySettings(s,R)}break;case 81:{n="FM Operator Frequencies";const t=this.channels[j].instruments[Q];if(y&&c){const n=[4,5,6,7,8,10,12,13,14,15,16,18,20,22,24,2,1,9,17,19,21,23,0,3];for(let s=0;s<(11==t.type?6:u.operatorCount);s++)t.operators[s].frequency=n[te(0,n.length,he[e.charCodeAt(i++)])]}else if(c||f||d)for(let n=0;n<(11==t.type?6:u.operatorCount);n++)t.operators[n].frequency=te(0,u.operatorFrequencies.length,he[e.charCodeAt(i++)]);else{const n=[4,5,6,7,8,10,12,13,14,15,16,18,20,23,27,2,1,9,17,19,21,23,0,3];for(let s=0;s<(11==t.type?6:u.operatorCount);s++)t.operators[s].frequency=n[te(0,n.length,he[e.charCodeAt(i++)])]}}break;case 80:{n="FM Operator Amounts";const t=this.channels[j].instruments[Q];for(let n=0;n<(11==t.type?6:u.operatorCount);n++)t.operators[n].amplitude=te(0,u.operatorAmplitudeMax+1,he[e.charCodeAt(i++)])}break;case 69:{const t=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,27,28,29,32,33,34,31,11],s=[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18,19,20,21,23,24,25,58,59,60],a=[0,1,2,3,4,5,6,7,8,8,9,10,11,12,13,14],o=this.channels[j].instruments[Q];if(A&&l||b&&p||g&&c){n="Envelopes (legacy)";const a=V[j][Q];a.operatorEnvelopes=[];for(let n=0;n<(11==o.type?6:u.operatorCount);n++){let o=he[e.charCodeAt(i++)];(v&&c||l)&&(o=t[o]),p&&(o=s[o]),a.operatorEnvelopes[n]=Te.q(o)}o.convertLegacySettings(a,R)}else{const r=te(0,u.maxEnvelopeCount+1,he[e.charCodeAt(i++)]);let h=!1;(p&&!S||f&&!b||d)&&(n="Envelope Speed",o.envelopeSpeed=te(0,u.modulators.dictionary["envelope speed"].maxRawVol+1,he[e.charCodeAt(i++)]),d&&!b||(h=!!he[e.charCodeAt(i++)])),n="Envelopes "+(d&&!y?"(advanced)":"(simple)");for(let n=0;n<r;n++){const r=te(0,u.instrumentAutomationTargets.length,he[e.charCodeAt(i++)]);let f=0;const m=u.instrumentAutomationTargets[r].maxCount;m>1&&(f=te(0,m,he[e.charCodeAt(i++)]));let S=he[e.charCodeAt(i++)];(v&&c||l)&&(S=t[S]),p&&(S=s[S]),!d&&S>=2&&S++;let w=!1,x=1;!d||y?(w=!0,x=u.envelopes[S].speed,S=u.envelopes[S].type):g&&S>=3&&S++;let M=!1;(d&&!y&&g||w)&&(9==S&&(M=!0),S=a[S]);const F=te(0,d&&!y||w?u.newEnvelopes.length:u.envelopes.length,S);let k=0,I=u.maxPitch,q=!1;x=d&&!y?u.newEnvelopes[F].speed:x;let E=0,P=1,T=2,D=2,z=0;if(d&&!g&&("lfo"==u.newEnvelopes[F].name?(z=te(0,7,he[e.charCodeAt(i++)]),5!=z&&6!=z||(T=te(1,u.randomEnvelopeStepsMax+1,he[e.charCodeAt(i++)]))):"random"==u.newEnvelopes[F].name&&(T=te(1,u.randomEnvelopeStepsMax+1,he[e.charCodeAt(i++)]),D=te(1,u.randomEnvelopeSeedMax+1,he[e.charCodeAt(i++)]),z=te(0,4,he[e.charCodeAt(i++)]))),d&&!y){if("pitch"==u.newEnvelopes[F].name)if(o.isNoiseInstrument)k=te(0,u.drumCount,he[e.charCodeAt(i++)]),I=te(0,u.drumCount,he[e.charCodeAt(i++)]);else{let t=he[e.charCodeAt(i++)];k=te(0,u.maxPitch+1,64*t+he[e.charCodeAt(i++)]),t=he[e.charCodeAt(i++)],I=te(0,u.maxPitch+1,64*t+he[e.charCodeAt(i++)])}let t=he[e.charCodeAt(i++)];d&&!b&&(h=t>>1==1),q=1==(1&t),"pitch"!=u.newEnvelopes[F].name&&"note size"!=u.newEnvelopes[F].name&&"punch"!=u.newEnvelopes[F].name&&"none"!=u.newEnvelopes[F].name&&(x=u.perEnvelopeSpeedIndices[he[e.charCodeAt(i++)]]),E=he[e.charCodeAt(i++)]/10,P=he[e.charCodeAt(i++)]/10}if(d&&!g||M&&(z=0,q?(P=Math.floor(P/2*10)/10,E=Math.floor(E/2*10)/10):(P=Math.floor(10*(.5+(P-E)/2))/10,E=.5)),o.addEnvelope(r,f,F,!0,k,I,q,x,E,P,T,D,z,h),d&&y&&!v){let t=he[e.charCodeAt(i++)];o.envelopes[n].pitchEnvelopeStart=64*t+he[e.charCodeAt(i++)],t=he[e.charCodeAt(i++)],o.envelopes[n].pitchEnvelopeEnd=64*t+he[e.charCodeAt(i++)],o.envelopes[n].inverse=1==he[e.charCodeAt(i++)]}}let m=0,w=u.maxPitch,x=!1;if(d&&v){let t=he[e.charCodeAt(i++)];m=64*t+he[e.charCodeAt(i++)],t=he[e.charCodeAt(i++)],w=64*t+he[e.charCodeAt(i++)],x=1===he[e.charCodeAt(i++)];for(let e=0;e<r;e++)o.envelopes[e].pitchEnvelopeStart=m,o.envelopes[e].pitchEnvelopeEnd=w,o.envelopes[e].inverse="pitch"==u.envelopes[o.envelopes[e].envelope].name&&x}}}break;case 82:{n="FM Operator Waveforms";const t=this.channels[j].instruments[Q];if(y&&c)for(let n=0;n<u.operatorCount;n++){const s=[0,1,3,2,2,2,4,5],a=te(0,s.length,he[e.charCodeAt(i++)]);3==a?t.operators[n].pulseWidth=5:4==a?t.operators[n].pulseWidth=4:5==a&&(t.operators[n].pulseWidth=6),t.operators[n].waveform=s[a]}else for(let n=0;n<(11==t.type?6:u.operatorCount);n++){if(p){const s=[0,1,3,2,4,5];t.operators[n].waveform=s[te(0,u.operatorWaves.length,he[e.charCodeAt(i++)])]}else t.operators[n].waveform=te(0,u.operatorWaves.length,he[e.charCodeAt(i++)]);2==t.operators[n].waveform&&(t.operators[n].pulseWidth=te(0,u.pwmOperatorWaves.length,he[e.charCodeAt(i++)]))}}break;case 83:{n="Spectrum";const t=this.channels[j].instruments[Q];if(3==t.type){const n=Math.ceil(u.spectrumControlPoints*u.spectrumControlPointBits/6),s=new ue(e,i,i+n);for(let e=0;e<u.spectrumControlPoints;e++)t.spectrumWave.spectrum[e]=s.read(u.spectrumControlPointBits);t.spectrumWave.markCustomWaveDirty(),i+=n}else{if(4!=t.type)throw new Error("Unhandled instrument type for spectrum song tag code.");{const n=Math.ceil(u.drumCount*u.spectrumControlPoints*u.spectrumControlPointBits/6),s=new ue(e,i,i+n);for(let e=0;e<u.drumCount;e++){for(let n=0;n<u.spectrumControlPoints;n++)t.drumsetSpectrumWaves[e].spectrum[n]=s.read(u.spectrumControlPointBits);t.drumsetSpectrumWaves[e].markCustomWaveDirty()}i+=n}}}break;case 72:{n="Harmonics";const t=this.channels[j].instruments[Q],s=Math.ceil(u.harmonicsControlPoints*u.harmonicsControlPointBits/6),a=new ue(e,i,i+s);for(let e=0;e<u.harmonicsControlPoints;e++)t.harmonicsWave.harmonics[e]=a.read(u.harmonicsControlPointBits);t.harmonicsWave.markCustomWaveDirty(),i+=s}break;case 88:if(n="Aliases + Distortion",p&&b||c&&g){const t=this.channels[j].instruments[Q];t.aliases=!!he[e.charCodeAt(i++)],t.aliases&&(t.distortion=0,t.effects|=8)}else if(n="Decimal Offset",f||d){this.channels[j].instruments[Q].decimalOffset=te(0,51,he[e.charCodeAt(i++)])}break;case 98:{let t;if(n="Bars",y&&l){const n=he[e.charCodeAt(i++)],s=he[e.charCodeAt(i++)];t=Math.ceil(.5*s);const a=new ue(e,i,i+t);for(let e=0;e<s;e++)this.channels[n].bars[e]=a.read(3)+1}else if(b&&l){let n=0;for(;1<<n<this.patternsPerChannel;)n++;t=Math.ceil(this.getChannelCount()*this.barCount*n/6);const s=new ue(e,i,i+t);for(let e=0;e<this.getChannelCount();e++)for(let t=0;t<this.barCount;t++)this.channels[e].bars[t]=s.read(n)+1}else{let n=0;for(;1<<n<this.patternsPerChannel+1;)n++;t=Math.ceil(this.getChannelCount()*this.barCount*n/6);const s=new ue(e,i,i+t);for(let e=0;e<this.getChannelCount();e++)for(let t=0;t<this.barCount;t++)this.channels[e].bars[t]=s.read(n)}i+=t}break;case 112:{n="Patterns";let t,s=0,a=!(g&&p||l),o=a?4:3,r=a?16:8;if(y&&l)t=he[e.charCodeAt(i++)],i++,s=he[e.charCodeAt(i++)],s<<=6,s+=he[e.charCodeAt(i++)];else{t=0;let n=ne(1,4,he[e.charCodeAt(i++)]);for(;n>0;)s<<=6,s+=he[e.charCodeAt(i++)],n--}const h=new ue(e,i,i+s);i+=s;const m=Te.getNeededBits(u.noteSizeMax);let v=-1,S=-1,w=-1;const x=p,M=30;for(;;){const e=this.channels[t],n=this.getChannelIsNoise(t),i=this.getChannelIsMod(t),s=this.getMaxInstrumentsPerPattern(t),F=Te.getNeededBits(s-u.instrumentCountMin),k=Te.getNeededBits(e.instruments.length-1);if(i){let n=b&&p||g&&c;const i=n?k:Te.getNeededBits(this.getMaxInstrumentsPerChannel()+2);for(let s=0;s<e.instruments.length;s++){let a=e.instruments[s];for(let e=0;e<u.modCount;e++){let o=h.read(2);switch(o){case 0:a.modChannels[e]=te(0,this.pitchChannelCount+this.noiseChannelCount+1,h.read(8)),a.modInstruments[e]=te(0,this.channels[a.modChannels[e]].instruments.length+2,h.read(i));break;case 1:a.modChannels[e]=this.pitchChannelCount+te(0,this.noiseChannelCount+1,h.read(8)),a.modInstruments[e]=te(0,this.channels[a.modChannels[e]].instruments.length+2,h.read(k));break;case 2:a.modChannels[e]=-1;break;case 3:a.modChannels[e]=-2}if(3!=o&&(a.modulators[e]=h.read(6)),n||"eq filter"!=u.modulators[a.modulators[e]].name&&"note filter"!=u.modulators[a.modulators[e]].name&&"song eq"!=u.modulators[a.modulators[e]].name||(a.modFilterTypes[e]=h.read(6)),"individual envelope speed"!=u.modulators[a.modulators[e]].name&&"reset envelope"!=u.modulators[a.modulators[e]].name&&"individual envelope lower bound"!=u.modulators[a.modulators[e]].name&&"individual envelope upper bound"!=u.modulators[a.modulators[e]].name||(a.modEnvelopeNumbers[e]=h.read(6)),n&&a.modChannels[e]>=0){let t=q(this.channels[a.modChannels[e]].instruments[a.modInstruments[e]].effects);7==a.modulators[e]?(a.modulators[e]=t?u.modulators.dictionary["note filt cut"].index:u.modulators.dictionary["eq filt cut"].index,a.modFilterTypes[e]=1):8==a.modulators[e]&&(a.modulators[e]=t?u.modulators.dictionary["note filt peak"].index:u.modulators.dictionary["eq filt peak"].index,a.modFilterTypes[e]=2)}else n&&a.modulators[e]==u.modulators.dictionary["song reverb"].index&&(v=t,S=s,w=e);n&&15!=u.modulators[a.modulators[e]].associatedEffect&&(this.channels[a.modChannels[e]].instruments[a.modInstruments[e]].effects|=1<<u.modulators[a.modulators[e]].associatedEffect)}}}const I=[];for(let t=0;t<e.instruments.length;t++){I[t]=[];for(let n=0;n<u.modCount;n++)I[t][u.modCount-1-n]=1+3*+((b&&p||g&&c)&&i&&e.instruments[t].modulators[n]==u.modulators.dictionary.detune.index)}const E=n||i?0:12*e.octave;let P=n||i?4:E;const T=i?[0,1,2,3,4,5]:n?[4,6,7,2,3,8,0,10]:[0,7,12,19,24,-5,-12],D=[];for(let e=0;e<T.length;e++)T[e]+=E;for(let t=0;t<this.patternsPerChannel;t++){const n=e.patterns[t];if(A&&l||b&&p||g&&c)n.instruments[0]=ne(0,e.instruments.length-1,h.read(k)),n.instruments.length=1;else if(this.patternInstruments){const t=ne(u.instrumentCountMin,s,h.read(F)+u.instrumentCountMin);for(let s=0;s<t;s++)n.instruments[s]=ne(0,e.instruments.length-1+2*+i,h.read(k));n.instruments.length=t}else n.instruments[0]=0,n.instruments.length=u.instrumentCountMin;if(!(l&&y||0!=h.read(1))){n.notes.length=0;continue}let v=0;const S=n.notes;let w=0;for(;v<this.beatsPerBar*u.partsPerBeat+ +i;){const t=1==h.read(1);let s=!1,y=0;if(t?y=ne(0,D.length-1,h.readLongTail(0,0)):s=1==h.read(1),t||s){let s,F,k;if(t)s=D[y],D.splice(y,1);else{if(s={},a)1==h.read(1)?s.pitchCount=h.read(3)+2:s.pitchCount=1;else for(s.pitchCount=1;s.pitchCount<4&&1==h.read(1);)s.pitchCount++;s.pinCount=h.readPinCount(),s.initialSize=l?2*h.read(2):i?h.read(9):h.read(m),s.pins=[],s.length=0,s.bendCount=0;for(let e=0;e<s.pinCount;e++){let e={};e.pitchBend=1==h.read(1),e.pitchBend&&s.bendCount++,s.length+=L&&l?h.readLegacyPartDuration()*u.partsPerBeat/u.rhythms[this.rhythm].stepsPerBeat:h.readPartDuration(),e.time=s.length,e.size=l?2*h.read(2):i?h.read(9):h.read(m),s.pins.push(e)}}D.unshift(s),D.length>10&&D.pop(),S.length<=w?(F=new de(0,v,v+s.length,s.initialSize),S[w++]=F):(F=S[w++],F.start=v,F.end=v+s.length,F.pins[0].size=s.initialSize);let q=0;const E=[];for(let e=0;e<s.pitchCount+s.bendCount;e++){if(1==h.read(1)){const e=ne(0,T.length-1,h.read(o));k=T[e],T.splice(e,1)}else{k=P;let e=h.readPitchInterval();for(;e>0;){for(k++;-1!=T.indexOf(k);)k++;e--}for(;e<0;){for(k--;-1!=T.indexOf(k);)k--;e++}}T.unshift(k),T.length>r&&T.pop(),e<s.pitchCount?F.pitches[q++]=k:E.push(k),P=e==s.pitchCount-1?F.pitches[0]:k}F.pitches.length=q,E.unshift(F.pitches[0]);const z=i&&e.instruments[n.instruments[0]].modulators[u.modCount-1-F.pitches[0]]===u.modulators.dictionary.tempo.index;let C=0;x&&z&&(C=M-u.tempoMin),i&&(F.pins[0].size+=C,F.pins[0].size*=I[n.instruments[0]][F.pitches[0]]);let H=1;for(const e of s.pins){e.pitchBend&&E.shift();const t=E[0]-F.pitches[0];if(F.pins.length<=H)F.pins[H++]=fe(t,e.time,i?e.size*I[n.instruments[0]][F.pitches[0]]+C:e.size);else{const s=F.pins[H++];s.interval=t,s.time=e.time,s.size=i?e.size*I[n.instruments[0]][F.pitches[0]]+C:e.size}}F.pins.length=H,0==F.start&&(F.continuesLastPattern=A&&l||b&&p||g&&c?!(g&&!f&&!d||l)&&e.instruments[n.instruments[0]].legacyTieOver:1==h.read(1)),v=ne(0,this.beatsPerBar*u.partsPerBeat,F.end)}else if(i){const e=1==h.read(1),t=h.readPartDuration();e?v-=t:v+=t}else{v+=L&&l?h.readLegacyPartDuration()*u.partsPerBeat/u.rhythms[this.rhythm].stepsPerBeat:h.readPartDuration()}}S.length=w}if(y&&l)break;if(t++,t>=this.getChannelCount())break}if((p&&b||g&&c)&&w>=0)for(let e=0;e<this.channels.length;e++)for(let t=0;t<this.channels[e].instruments.length;t++){const n=this.channels[e].instruments[t];if(C(n.effects)&&(n.reverb=u.reverbRange-1),v==e&&S==t){const t=this.channels[e].bars[0];if(t>0){const n=this.channels[e].patterns[t-1];let i=6;for(const e of n.notes)e.pitches[0]==u.modCount-1-w&&(i=Math.min(i,e.start));i>0&&n.notes.push(new de(u.modCount-1-w,0,i,U))}else if(this.channels[e].patterns.length<u.barCountMax){const t=new me;if(this.channels[e].patterns.push(t),this.channels[e].bars[0]=this.channels[e].patterns.length,this.channels[e].patterns.length>this.patternsPerChannel){for(let e=0;e<this.channels.length;e++)this.channels[e].patterns.length<=this.patternsPerChannel&&this.channels[e].patterns.push(new me);this.patternsPerChannel++}t.instruments.length=1,t.instruments[0]=S,t.notes.length=0,t.notes.push(new de(u.modCount-1-w,0,6,U))}}}}break;default:throw new Error("Unrecognized song tag code "+String.fromCharCode($)+" at index "+(i-1)+" while parsing "+n+" "+e.substring(0,i))}u.willReloadForCustomSamples&&(window.location.hash=this.toBase64String(),setTimeout((()=>{location.reload()}),50))}static _(e){try{return Boolean(new URL(e))}catch(e){return!1}}static j(e,t,n,i,s){const a=u.chipWaves[0].samples,o=u.rawRawChipWaves[0].samples,r=t.length;t.push(e);const p=u.chipWaves.length;let h=e,c=44100,f=!1,d=60,m=!1,v=null,y=null,g=null,b=null,S=!1,w=!1,x=e.indexOf("!"),M=-1;if(0===x&&(M=e.indexOf("!",x+1),-1!==M)){const k=e.slice(x+1,M).split(",");for(const I of k){const q=I.charAt(0),E=I.slice(1,I.length);"s"===q?c=te(8e3,96001,ie(E,44100)):"r"===q?d=ie(E,60):"p"===q?f=!0:"a"===q?(v=se(E,null),null!=v&&(m=!0)):"b"===q?(y=se(E,null),null!=y&&(m=!0)):"c"===q?(g=se(E,null),null!=g&&(m=!0)):"d"===q?(b=se(E,null),null!=b&&(b=te(0,4,b),m=!0)):"e"===q&&(S=!0,m=!0)}h=e.slice(M+1,e.length),w=!0}let F=null;if(!Te._(h))return alert(e+" is not a valid url"),!1;if(F=new URL(h),s&&!w&&null!=F){function P(){h=e.slice(0,e.indexOf(",")),F=new URL(h),c=te(8e3,96001,ie(e.slice(e.indexOf(",")+1),44100))}function T(){h=e.slice(0,e.indexOf("!")),F=new URL(h),d=ie(e.slice(e.indexOf("!")+1),60)}-1!=e.indexOf("@")&&(h=e.replaceAll("@",""),F=new URL(h),f=!0),-1!=e.indexOf(",")&&-1!=e.indexOf("!")?e.indexOf(",")<e.indexOf("!")?(T(),P()):(P(),T()):(-1!=e.indexOf(",")&&P(),-1!=e.indexOf("!")&&T())}if(null!=F){let D=h;const z=[];let C;44100!==c&&z.push("s"+c),60!==d&&z.push("r"+d),f&&z.push("p"),m&&(null!=v&&z.push("a"+v),null!=y&&z.push("b"+y),null!=g&&z.push("c"+g),null!=b&&z.push("d"+b),S&&z.push("e")),z.length>0&&(D="!"+z.join(",")+"!"+h),t[r]=D,C=decodeURIComponent(F.pathname.replace(/^([^\/]*\/)+/,""));const H=1;u.chipWaves[p]={name:C,expression:H,isCustomSampled:!0,isPercussion:f,rootKey:d,sampleRate:c,samples:a,index:p},u.rawChipWaves[p]={name:C,expression:H,isCustomSampled:!0,isPercussion:f,rootKey:d,sampleRate:c,samples:o,index:p},u.rawRawChipWaves[p]={name:C,expression:H,isCustomSampled:!0,isPercussion:f,rootKey:d,sampleRate:c,samples:o,index:p};const O={type:"chip",eqFilter:[],effects:[],transition:"normal",fadeInSeconds:0,fadeOutTicks:-3,chord:"harmony",wave:C,unison:"none",envelopes:[]};m&&(O.isUsingAdvancedLoopControls=!0,O.chipWaveLoopStart=null!=v?v:0,O.chipWaveLoopEnd=null!=y?y:2,O.chipWaveLoopMode=null!=b?b:0,O.chipWavePlayBackwards=S,O.chipWaveStartOffset=null!=g?g:0);const L={index:0,name:C,midiProgram:80,settings:O};if(n.push(L),!u.willReloadForCustomSamples){l(h,p,O,{isUsingAdvancedLoopControls:m,chipWaveLoopStart:v,chipWaveLoopEnd:y,chipWaveLoopMode:b,chipWavePlayBackwards:S,chipWaveStartOffset:g},c)}i.statusTable[p]=0,i.urlTable[p]=h,i.totalSamples++}return!0}static U(){u.chipWaves=w(u.chipWaves.slice(0,u.firstIndexForSamplesInChipWaveList)),u.rawChipWaves=w(u.rawChipWaves.slice(0,u.firstIndexForSamplesInChipWaveList)),u.rawRawChipWaves=w(u.rawRawChipWaves.slice(0,u.firstIndexForSamplesInChipWaveList))}static P(){G.customSamples=null,Te.U(),s.statusTable={},s.urlTable={},s.totalSamples=0,s.samplesLoaded=0,r.dispatchEvent(new a(s.totalSamples,s.samplesLoaded))}toJsonObject(e=!0,t=1,n=!0){const i=[];for(let s=0;s<this.getChannelCount();s++){const a=this.channels[s],o=[],r=this.getChannelIsNoise(s),l=this.getChannelIsMod(s);for(const e of a.instruments)o.push(e.toJsonObject());const p=[];for(const e of a.patterns)p.push(e.toJsonObject(this,a,l));const h=[];if(e)for(let e=0;e<this.loopStart;e++)h.push(a.bars[e]);for(let e=0;e<t;e++)for(let e=this.loopStart;e<this.loopStart+this.loopLength;e++)h.push(a.bars[e]);if(n)for(let e=this.loopStart+this.loopLength;e<this.barCount;e++)h.push(a.bars[e]);const u={type:l?"mod":r?"drum":"pitch",name:a.name,instruments:o,patterns:p,sequence:h};r||(u.octaveScrollBar=a.octave-1),i.push(u)}const s={name:this.title,format:Te.K,version:Te.I,scale:u.scales[this.scale].name,customScale:this.scaleCustom,key:u.keys[this.key].name,keyOctave:this.octave,introBars:this.loopStart,loopBars:this.loopLength,beatsPerBar:this.beatsPerBar,ticksPerBeat:u.rhythms[this.rhythm].stepsPerBeat,beatsPerMinute:this.tempo,reverb:this.reverb,masterGain:this.masterGain,compressionThreshold:this.compressionThreshold,limitThreshold:this.limitThreshold,limitDecay:this.limitDecay,limitRise:this.limitRise,limitRatio:this.limitRatio,compressionRatio:this.compressionRatio,songEq:this.eqFilter.toJsonObject(),layeredInstruments:this.layeredInstruments,patternInstruments:this.patternInstruments,channels:i};for(let e=0;e<u.filterMorphCount-1;e++)s["songEq"+e]=this.eqSubFilters[e];return null!=G.customSamples&&G.customSamples.length>0&&(s.customSamples=G.customSamples),s}fromJsonObject(e,t="auto"){if(this.initToDefault(!0),!e)return;"auto"==t&&"BeepBox"==e.format&&(null!=e.riff&&(t="modbox"),null!=e.masterGain&&(t="jummbox"));const n=("auto"==t?e.format:t).toLowerCase();if(null!=e.name&&(this.title=e.name),null!=e.customSamples){const t=e.customSamples;if(null==G.customSamples||G.customSamples.join(", ")!=t.join(", ")){u.willReloadForCustomSamples=!0,Te.U();let e=!1,n=!1,i=!1;const a=[],o=[];for(const r of t)if("legacysamples"===r.toLowerCase())e||(e=!0,a.push(r),h(0));else if("nintariboxsamples"===r.toLowerCase())n||(n=!0,a.push(r),h(1));else if("mariopaintboxsamples"===r.toLowerCase())i||(i=!0,a.push(r),h(2));else{const e=!1;Te.j(r,a,o,s,e)}if(a.length>0&&(G.customSamples=a),o.length>0){const e=w(o);G.presetCategories[G.presetCategories.length]={name:"Custom Sample Presets",presets:e,index:G.presetCategories.length}}}}else{let t=!1;if(null!=e.channels)for(let i=0;i<e.channels.length;i++){const s=e.channels[i];if("pitch"===s.type&&Array.isArray(s.instruments)){const e=s.instruments;for(let i=0;i<e.length;i++){const s=e[i];if("chip"!==s.type)continue;if(null==s.wave)continue;const a=s.wave,o=["paandorasbox kick","paandorasbox snare","paandorasbox piano1","paandorasbox WOW","paandorasbox overdrive","paandorasbox trumpet","paandorasbox saxophone","paandorasbox orchestrahit","paandorasbox detatched violin","paandorasbox synth","paandorasbox sonic3snare","paandorasbox come on","paandorasbox choir","paandorasbox overdriveguitar","paandorasbox flute","paandorasbox legato violin","paandorasbox tremolo violin","paandorasbox amen break","paandorasbox pizzicato violin","paandorasbox tim allen grunt","paandorasbox tuba","paandorasbox loopingcymbal","paandorasbox standardkick","paandorasbox standardsnare","paandorasbox closedhihat","paandorasbox foothihat","paandorasbox openhihat","paandorasbox crashcymbal","paandorasbox pianoC4","paandorasbox liver pad","paandorasbox marimba","paandorasbox susdotwav","paandorasbox wackyboxtts","paandorasbox peppersteak_1","paandorasbox peppersteak_2","paandorasbox vinyl_noise","paandorasbeta slap bass","paandorasbeta HD EB overdrive guitar","paandorasbeta sunsoft bass","paandorasbeta masculine choir","paandorasbeta feminine choir","paandorasbeta tololoche","paandorasbeta harp","paandorasbeta pan flute","paandorasbeta krumhorn","paandorasbeta timpani","paandorasbeta crowd hey","paandorasbeta wario land 4 brass","paandorasbeta wario land 4 rock organ","paandorasbeta wario land 4 DAOW","paandorasbeta wario land 4 hour chime","paandorasbeta wario land 4 tick","paandorasbeta kirby kick","paandorasbeta kirby snare","paandorasbeta kirby bongo","paandorasbeta kirby click","paandorasbeta sonor kick","paandorasbeta sonor snare","paandorasbeta sonor snare (left hand)","paandorasbeta sonor snare (right hand)","paandorasbeta sonor high tom","paandorasbeta sonor low tom","paandorasbeta sonor hihat (closed)","paandorasbeta sonor hihat (half opened)","paandorasbeta sonor hihat (open)","paandorasbeta sonor hihat (open tip)","paandorasbeta sonor hihat (pedal)","paandorasbeta sonor crash","paandorasbeta sonor crash (tip)","paandorasbeta sonor ride"],r=["pandoraasbox kick","pandoraasbox snare","pandoraasbox piano1","pandoraasbox WOW","pandoraasbox overdrive","pandoraasbox trumpet","pandoraasbox saxophone","pandoraasbox orchestrahit","pandoraasbox detatched violin","pandoraasbox synth","pandoraasbox sonic3snare","pandoraasbox come on","pandoraasbox choir","pandoraasbox overdriveguitar","pandoraasbox flute","pandoraasbox legato violin","pandoraasbox tremolo violin","pandoraasbox amen break","pandoraasbox pizzicato violin","pandoraasbox tim allen grunt","pandoraasbox tuba","pandoraasbox loopingcymbal","pandoraasbox standardkick","pandoraasbox standardsnare","pandoraasbox closedhihat","pandoraasbox foothihat","pandoraasbox openhihat","pandoraasbox crashcymbal","pandoraasbox pianoC4","pandoraasbox liver pad","pandoraasbox marimba","pandoraasbox susdotwav","pandoraasbox wackyboxtts","pandoraasbox peppersteak_1","pandoraasbox peppersteak_2","pandoraasbox vinyl_noise","pandoraasbeta slap bass","pandoraasbeta HD EB overdrive guitar","pandoraasbeta sunsoft bass","pandoraasbeta masculine choir","pandoraasbeta feminine choir","pandoraasbeta tololoche","pandoraasbeta harp","pandoraasbeta pan flute","pandoraasbeta krumhorn","pandoraasbeta timpani","pandoraasbeta crowd hey","pandoraasbeta wario land 4 brass","pandoraasbeta wario land 4 rock organ","pandoraasbeta wario land 4 DAOW","pandoraasbeta wario land 4 hour chime","pandoraasbeta wario land 4 tick","pandoraasbeta kirby kick","pandoraasbeta kirby snare","pandoraasbeta kirby bongo","pandoraasbeta kirby click","pandoraasbeta sonor kick","pandoraasbeta sonor snare","pandoraasbeta sonor snare (left hand)","pandoraasbeta sonor snare (right hand)","pandoraasbeta sonor high tom","pandoraasbeta sonor low tom","pandoraasbeta sonor hihat (closed)","pandoraasbeta sonor hihat (half opened)","pandoraasbeta sonor hihat (open)","pandoraasbeta sonor hihat (open tip)","pandoraasbeta sonor hihat (pedal)","pandoraasbeta sonor crash","pandoraasbeta sonor crash (tip)","pandoraasbeta sonor ride"],l=["kick","snare","piano1","WOW","overdrive","trumpet","saxophone","orchestrahit","detatched violin","synth","sonic3snare","come on","choir","overdriveguitar","flute","legato violin","tremolo violin","amen break","pizzicato violin","tim allen grunt","tuba","loopingcymbal","standardkick","standardsnare","closedhihat","foothihat","openhihat","crashcymbal","pianoC4","liver pad","marimba","susdotwav","wackyboxtts"];o.includes(a)?t=!0:r.includes(a)?(t=!0,s.wave=o[r.findIndex((e=>e===a))]):l.includes(a)&&("trumpet"!==a&&"flute"!==a||"paandorasbox"==n)&&(t=!0,s.wave=o[l.findIndex((e=>e===a))])}}}t?(u.willReloadForCustomSamples=!0,Te.U(),h(0),G.customSamples=["legacySamples"]):null!=G.customSamples&&G.customSamples.length>0&&(u.willReloadForCustomSamples=!0,Te.P())}if(this.scale=0,null!=e.scale){const t={"romani :)":"double harmonic :)","romani :(":"double harmonic :(","dbl harmonic :)":"double harmonic :)","dbl harmonic :(":"double harmonic :(",enigma:"strange"},n=null!=t[e.scale]?t[e.scale]:e.scale,s=u.scales.findIndex((e=>e.name==n));if(-1!=s&&(this.scale=s),this.scale==u.scales.dictionary.Custom.index&&null!=e.customScale)for(var i of e.customScale.keys())this.scaleCustom[i]=e.customScale[i]}if(null!=e.key)if("number"==typeof e.key)this.key=(e.key+1200>>>0)%u.keys.length;else if("string"==typeof e.key){const t=e.key;if("C+"===t)this.key=0,this.octave=1;else if("G- (actually F#-)"===t)this.key=6,this.octave=-1;else if("C-"===t)this.key=0,this.octave=-1;else if("oh no (F-)"===t)this.key=5,this.octave=-1;else{const e=t.charAt(0).toUpperCase(),n=t.charAt(1).toLowerCase();let i={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[e];const s={"#":1,"♯":1,b:-1,"♭":-1}[n];null!=i&&(null!=s&&(i+=s),i<0&&(i+=12),i%=12,this.key=i)}}null!=e.beatsPerMinute&&(this.tempo=te(u.tempoMin,u.tempoMax+1,0|e.beatsPerMinute)),null!=e.keyOctave&&(this.octave=te(u.octaveMin,u.octaveMax+1,0|e.keyOctave));let a=0;null!=e.reverb&&(a=te(0,32,0|e.reverb)),null!=e.beatsPerBar&&(this.beatsPerBar=Math.max(u.beatsPerBarMin,Math.min(u.beatsPerBarMax,0|e.beatsPerBar)));let o=4;null!=e.ticksPerBeat&&(o=0|e.ticksPerBeat||4,this.rhythm=u.rhythms.findIndex((e=>e.stepsPerBeat==o)),-1==this.rhythm&&(this.rhythm=1)),null!=e.masterGain?this.masterGain=Math.max(0,Math.min(5,e.masterGain||0)):this.masterGain=1,null!=e.limitThreshold?this.limitThreshold=Math.max(0,Math.min(2,e.limitThreshold||0)):this.limitThreshold=1,null!=e.compressionThreshold?this.compressionThreshold=Math.max(0,Math.min(1.1,e.compressionThreshold||0)):this.compressionThreshold=1,null!=e.limitRise?this.limitRise=Math.max(2e3,Math.min(1e4,e.limitRise||0)):this.limitRise=4e3,null!=e.limitDecay?this.limitDecay=Math.max(1,Math.min(30,e.limitDecay||0)):this.limitDecay=4,null!=e.limitRatio?this.limitRatio=Math.max(0,Math.min(11,e.limitRatio||0)):this.limitRatio=1,null!=e.compressionRatio?this.compressionRatio=Math.max(0,Math.min(1.168,e.compressionRatio||0)):this.compressionRatio=1,null!=e.songEq?this.eqFilter.fromJsonObject(e.songEq):this.eqFilter.reset();for(let t=0;t<u.filterMorphCount-1;t++)e["songEq"+t]?this.eqSubFilters[t]=e["songEq"+t]:this.eqSubFilters[t]=null;let r=1,l=1,p=1;if(null!=e.channels)for(const t of e.channels)t.instruments&&(r=Math.max(r,0|t.instruments.length)),t.patterns&&(l=Math.max(l,0|t.patterns.length)),t.sequence&&(p=Math.max(p,0|t.sequence.length));null!=e.layeredInstruments?this.layeredInstruments=!!e.layeredInstruments:this.layeredInstruments=!1,null!=e.patternInstruments?this.patternInstruments=!!e.patternInstruments:this.patternInstruments=r>1,this.patternsPerChannel=Math.min(l,u.barCountMax),this.barCount=Math.min(p,u.barCountMax),null!=e.introBars&&(this.loopStart=te(0,this.barCount,0|e.introBars)),null!=e.loopBars&&(this.loopLength=te(1,this.barCount-this.loopStart+1,0|e.loopBars));const c=[],f=[],d=[];if(null!=e.channels)for(let t=0;t<e.channels.length;t++){let i=e.channels[t];const s=new Pe;let r=!1,l=!1;if(null!=i.type?(r="drum"==i.type,l="mod"==i.type):r=t>=3,r?f.push(s):l?d.push(s):c.push(s),null!=i.octaveScrollBar&&(s.octave=te(0,u.pitchOctaves,1+(0|i.octaveScrollBar)),r&&(s.octave=0)),null!=i.name?s.name=i.name:s.name="",Array.isArray(i.instruments)){const e=i.instruments;for(let t=0;t<e.length&&!(t>=this.getMaxInstrumentsPerChannel());t++){const i=new Ee(r,l);s.instruments[t]=i,i.fromJsonObject(e[t],r,l,!1,!1,a,n)}}for(let e=0;e<this.patternsPerChannel;e++){const t=new me;let a;s.patterns[e]=t,i.patterns&&(a=i.patterns[e]),null!=a&&t.fromJsonObject(a,this,s,o,r,l,n)}s.patterns.length=this.patternsPerChannel;for(let e=0;e<this.barCount;e++)s.bars[e]=null!=i.sequence?Math.min(this.patternsPerChannel,i.sequence[e]>>>0):0;s.bars.length=this.barCount}c.length>u.pitchChannelCountMax&&(c.length=u.pitchChannelCountMax),f.length>u.noiseChannelCountMax&&(f.length=u.noiseChannelCountMax),d.length>u.modChannelCountMax&&(d.length=u.modChannelCountMax),this.pitchChannelCount=c.length,this.noiseChannelCount=f.length,this.modChannelCount=d.length,this.channels.length=0,Array.prototype.push.apply(this.channels,c),Array.prototype.push.apply(this.channels,f),Array.prototype.push.apply(this.channels,d),u.willReloadForCustomSamples&&(window.location.hash=this.toBase64String(),setTimeout((()=>{location.reload()}),50))}getPattern(e,t){if(t<0||t>=this.barCount)return null;const n=this.channels[e].bars[t];return 0==n?null:this.channels[e].patterns[n-1]}getBeatsPerMinute(){return this.tempo}static getNeededBits(e){return 32-Math.clz32(Math.ceil(e+1)-1)}restoreLimiterDefaults(){this.compressionRatio=1,this.limitRatio=1,this.limitRise=4e3,this.limitDecay=4,this.limitThreshold=1,this.compressionThreshold=1,this.masterGain=1}}Te.K=u.jsonFormat,Te.H=2,Te.T=9,Te.L=1,Te.O=6,Te.R=1,Te.W=4,Te.V=1,Te.N=5,Te.$=1,Te.I=6,Te.k=115;class De{constructor(){this.delayLine=null,this.allPassG=0,this.allPassGDelta=0,this.sustainFilterA1=0,this.sustainFilterA1Delta=0,this.sustainFilterA2=0,this.sustainFilterA2Delta=0,this.sustainFilterB0=0,this.sustainFilterB0Delta=0,this.sustainFilterB1=0,this.sustainFilterB1Delta=0,this.sustainFilterB2=0,this.sustainFilterB2Delta=0,this.reset()}reset(){this.delayIndex=-1,this.allPassSample=0,this.allPassPrevInput=0,this.sustainFilterSample=0,this.sustainFilterPrevOutput2=0,this.sustainFilterPrevInput1=0,this.sustainFilterPrevInput2=0,this.fractionalDelaySample=0,this.prevDelayLength=-1,this.delayResetOffset=0}update(e,t,n,i,s,a,o,r){const l=2*Math.PI*u.pickedStringDispersionCenterFreq/e.samplesPerSecond,p=this.prevDelayLength,h=n.phaseDeltas[i],c=n.phaseDeltaScales[i],f=h*Math.pow(c,s),d=2*Math.PI*h,m=2*Math.PI*f,v=2*d,y=2*m,g=Math.min(Math.PI,d*u.pickedStringDispersionFreqMult*Math.pow(l/d,u.pickedStringDispersionFreqScale)),b=Math.min(Math.PI,m*u.pickedStringDispersionFreqMult*Math.pow(l/m,u.pickedStringDispersionFreqScale)),S=2*Math.PI*u.pickedStringShelfHz/e.samplesPerSecond,w=(Math.pow(100,a)-1)/99,x=(Math.pow(100,o)-1)/99,M=1==r?.25:0,F=15.6,k=3*e.samplesPerSecond/48e3,I=Math.pow(.5,w*Math.pow(S/(d*F),1+2*M)*F),q=Math.pow(.5,x*Math.pow(S/(m*F),1+2*M)*F),E=Math.pow(I,.002),P=Math.pow(q,.002);Ge.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(g),e.tempFrequencyResponse.analyze(Ge.tempFilterStartCoefficients,v);const T=Ge.tempFilterStartCoefficients.b[0],D=-e.tempFrequencyResponse.angle()/v;Ge.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(b),e.tempFrequencyResponse.analyze(Ge.tempFilterEndCoefficients,y);const z=Ge.tempFilterEndCoefficients.b[0],C=-e.tempFrequencyResponse.angle()/y,H=0==r?0:1;if(0==H){const e=Math.pow(I,u.stringDecayRate),t=Math.pow(q,u.stringDecayRate);Ge.tempFilterStartCoefficients.highShelf2ndOrder(S,e,.5),Ge.tempFilterEndCoefficients.highShelf2ndOrder(S,t,.5)}else{const t=Math.pow(1==H?0:1,.25),n=Math.pow(k*k*d*3.3*48e3/e.samplesPerSecond,.5+M)/k/Math.pow(w,.5),i=Math.pow(k*k*m*3.3*48e3/e.samplesPerSecond,.5+M)/k/Math.pow(x,.5),s=n*Math.pow(2,.5-1.75*(1-Math.pow(1-t,.85))),a=i*Math.pow(2,.5-1.75*(1-Math.pow(1-t,.85))),o=Math.pow(2,-Math.pow(2,-Math.pow(t,.9))),r=Math.pow(2,-Math.pow(2,-Math.pow(t,.9)));Ge.tempFilterStartCoefficients.lowPass2ndOrderButterworth(j(s),o),Ge.tempFilterEndCoefficients.lowPass2ndOrderButterworth(j(a),r)}e.tempFrequencyResponse.analyze(Ge.tempFilterStartCoefficients,v);const O=Ge.tempFilterStartCoefficients.a[1],L=Ge.tempFilterStartCoefficients.a[2],G=Ge.tempFilterStartCoefficients.b[0]*E,W=Ge.tempFilterStartCoefficients.b[1]*E,A=Ge.tempFilterStartCoefficients.b[2]*E,R=-e.tempFrequencyResponse.angle()/v;e.tempFrequencyResponse.analyze(Ge.tempFilterEndCoefficients,y);const N=Ge.tempFilterEndCoefficients.a[1],B=Ge.tempFilterEndCoefficients.a[2],V=Ge.tempFilterEndCoefficients.b[0]*P,$=Ge.tempFilterEndCoefficients.b[1]*P,U=Ge.tempFilterEndCoefficients.b[2]*P,Q=-e.tempFrequencyResponse.angle()/y,_=1/h,K=1/f,J=Math.ceil(2*Math.max(_,K)),Y=_-D-R,Z=K-C-Q;this.prevDelayLength=Y,this.delayLengthDelta=(Z-Y)/s,this.allPassG=T,this.sustainFilterA1=O,this.sustainFilterA2=L,this.sustainFilterB0=G,this.sustainFilterB1=W,this.sustainFilterB2=A,this.allPassGDelta=(z-T)/s,this.sustainFilterA1Delta=(N-O)/s,this.sustainFilterA2Delta=(B-L)/s,this.sustainFilterB0Delta=(V-G)/s,this.sustainFilterB1Delta=($-W)/s,this.sustainFilterB2Delta=(U-A)/s;const X=Math.abs(Math.log2(Y/p))>.01,ee=-1==this.delayIndex||X;if(null==this.delayLine||this.delayLine.length<=J){const t=Math.ceil(2*e.samplesPerSecond/Ee.frequencyFromPitch(12)),n=new Float32Array(Ge.fittingPowerOfTwo(Math.max(t,J)));if(!ee&&null!=this.delayLine){const e=this.delayLine.length-1>>0,t=this.delayIndex+this.delayResetOffset;this.delayIndex=this.delayLine.length-this.delayResetOffset;for(let i=0;i<this.delayLine.length;i++)n[i]=this.delayLine[t+i&e]}this.delayLine=n}const te=this.delayLine,ne=te.length-1>>0;if(ee){this.delayIndex=0,this.allPassSample=0,this.allPassPrevInput=0,this.sustainFilterSample=0,this.sustainFilterPrevOutput2=0,this.sustainFilterPrevInput1=0,this.sustainFilterPrevInput2=0,this.fractionalDelaySample=0;const n=-Y,i=Math.floor(n-_/2),s=Math.ceil(i+2*_);this.delayResetOffset=s;for(let e=i;e<=s;e++)te[e&ne]=0;const a=t.wave,o=a.length-1,r=o/_,l=Math.min(.2*_,.003*e.samplesPerSecond),p=Math.ceil(n),h=n+_+l,u=h;let c=(p-n)*r,f=0;for(let e=p;e<=u;e++){const t=0|c,i=t%o;let s=a[i];const p=c-t;s+=(a[i+1]-s)*p;const u=(s-f)/r,d=Math.min(1,(e-n)/l)*Math.min(1,(h-e)/l),m=d*d*(3-2*d);te[e&ne]+=u*m,f=s,c+=r}}}}class ze{constructor(){this.noteSecondsStart=[],this.noteSecondsStartUnscaled=0,this.noteSecondsEnd=[],this.noteSecondsEndUnscaled=0,this.noteTicksStart=0,this.noteTicksEnd=0,this.noteSizeStart=u.noteSizeMax,this.noteSizeEnd=u.noteSizeMax,this.prevNoteSize=u.noteSizeMax,this.nextNoteSize=u.noteSizeMax,this.J=u.noteSizeMax,this.prevNoteSecondsStart=[],this.prevNoteSecondsStartUnscaled=0,this.prevNoteSecondsEnd=[],this.prevNoteSecondsEndUnscaled=0,this.prevNoteTicksStart=0,this.prevNoteTicksEnd=0,this.Y=u.noteSizeMax,this.tickTimeEnd=[],this.drumsetFilterEnvelopeStart=0,this.drumsetFilterEnvelopeEnd=0,this.prevSlideStart=!1,this.prevSlideEnd=!1,this.nextSlideStart=!1,this.nextSlideEnd=!1,this.prevSlideRatioStart=0,this.prevSlideRatioEnd=0,this.nextSlideRatioStart=0,this.nextSlideRatioEnd=0,this.startPinTickAbsolute=null,this.startPinTickDefaultPitch=null,this.startPinTickPitch=null,this.envelopeStarts=[],this.envelopeEnds=[],this.Z=[],this.X=0,this.lowpassCutoffDecayVolumeCompensation=1;for(let e=0;e<56;e++)this.envelopeStarts[e]=1,this.envelopeEnds[e]=1;this.reset()}reset(){for(let e=0;e<u.maxEnvelopeCount+1;e++)this.noteSecondsEnd[e]=0,this.prevNoteSecondsEnd[e]=0;this.noteSecondsEndUnscaled=0,this.noteTicksEnd=0,this.J=u.noteSizeMax,this.prevNoteSecondsEndUnscaled=0,this.prevNoteTicksEnd=0,this.Y=u.noteSizeMax,this.X=0,this.drumsetFilterEnvelopeStart=0,this.drumsetFilterEnvelopeEnd=0,this.startPinTickAbsolute=null,this.startPinTickDefaultPitch=null,this.startPinTickPitch=null}computeEnvelopes(e,t,n,i,s,a,o,r,l,p,h){const c=s,f=e.getTransition();if(null!=a&&a.atNoteStart&&!f.continues&&!a.forceContinueAtStart){this.prevNoteSecondsEndUnscaled=this.noteSecondsEndUnscaled,this.prevNoteTicksEnd=this.noteTicksEnd,this.Y=this.J,this.noteSecondsEndUnscaled=0,this.noteTicksEnd=0;for(let e=0;e<u.maxEnvelopeCount+1;e++)this.prevNoteSecondsEnd[e]=this.noteSecondsEnd[e],this.noteSecondsEnd[e]=0}null!=a&&(null!=a.note?this.J=a.note.pins[a.note.pins.length-1].size:this.J=u.noteSizeMax);const d=[],m=i+1,v=[],y=this.noteSecondsEndUnscaled,g=[],b=y+c,S=this.noteTicksEnd,w=S+1,x=[],M=[],F=this.prevNoteSecondsEndUnscaled,k=F+c,I=this.prevNoteTicksEnd,q=I+1,E=1/(u.ticksPerPart*u.partsPerBeat),P=[],T=[];let D=this.J,z=this.J,C=this.Y,H=0,O=!1,L=!1,G=!1,W=!1,A=0,R=0,N=0,B=0;if(null==a&&(this.startPinTickAbsolute=null,this.startPinTickDefaultPitch=null),null!=a&&null!=a.note&&!a.passedEndOfNote){const n=a.note.getEndPinIndex(t),s=a.note.pins[n-1],o=a.note.pins[n],p=(a.note.start+s.time)*u.ticksPerPart;(null==this.startPinTickAbsolute||!f.continues&&!f.slides&&a.passedEndOfNote)&&(this.startPinTickAbsolute=p+l.computeTicksSinceStart(!0)),(null==this.startPinTickDefaultPitch||a.passedEndOfNote)&&(this.startPinTickDefaultPitch=this.getPitchValue(e,a,r,!1)),a.passedEndOfNote||(this.startPinTickPitch=this.getPitchValue(e,a,r,!0));const h=(a.note.start+o.time)*u.ticksPerPart,c=(i-p)/(h-p),d=(m-p)/(h-p);if(D=s.size+(o.size-s.size)*c,z=s.size+(o.size-s.size)*d,f.slides){const e=a.noteStartPart*u.ticksPerPart,t=a.noteEndPart*u.ticksPerPart,n=.5*(t-e),s=Math.min(n,f.slideTicks);null==a.prevNote||a.forceContinueAtStart||(i-e<s&&(O=!0,A=.5*(1-(i-e)/s)),m-e<s&&(L=!0,R=.5*(1-(m-e)/s))),null==a.nextNote||a.forceContinueAtEnd||(H=a.nextNote.pins[0].size,t-i<s&&(G=!0,N=.5*(1-(t-i)/s)),t-m<s&&(W=!0,B=.5*(1-(t-m)/s)))}}let V=1,$=!1;for(let t=0;t<=e.envelopeCount;t++){let i,c,f,m=!1,S=!1,w=1,I=1,q=w*I,U=0,j=1,Q=0,_=2,K=2,J=0,Y=this.startPinTickAbsolute||0,Z=this.startPinTickDefaultPitch||0;if(t==e.envelopeCount){if($)break;i=u.instrumentAutomationTargets.dictionary.noteVolume,c=0,f=u.newEnvelopes.dictionary["note size"]}else{let a=e.envelopes[t];i=u.instrumentAutomationTargets[a.target],c=a.index,f=u.newEnvelopes[a.envelope],m=e.envelopes[t].inverse,S=e.envelopes[t].discrete,w=e.envelopes[t].perEnvelopeSpeed,I=Math.pow(e.envelopeSpeed,2)/144,q=w*I,U=e.envelopes[t].perEnvelopeLowerBound,j=e.envelopes[t].perEnvelopeUpperBound,l.isModActive(u.modulators.dictionary["individual envelope lower bound"].index,p,h)&&null!=e.envelopes[t].tempEnvelopeLowerBound&&(U=e.envelopes[t].tempEnvelopeLowerBound),l.isModActive(u.modulators.dictionary["individual envelope upper bound"].index,p,h)&&null!=e.envelopes[t].tempEnvelopeUpperBound&&(j=e.envelopes[t].tempEnvelopeUpperBound),U<=j||(U=0,j=1),Q=l.computeTicksSinceStart(),_=e.envelopes[t].steps,K=e.envelopes[t].seed,e.envelopes[t].waveform>=("lfo"==f.name?7:4)&&(e.envelopes[t].waveform=0),J=e.envelopes[t].waveform,o[t]||(o[t]=0);const r=s*o[t];n[t]||(n[t]=0),d[t]=n[t]?n[t]+o[t]:o[t],v[t]=this.noteSecondsEnd[t]?this.noteSecondsEnd[t]:0,x[t]=this.prevNoteSecondsEnd[t]?this.prevNoteSecondsEnd[t]:0,g[t]=v[t]?v[t]+r:r,M[t]=x[t]?x[t]+r:r,P[t]=n[t]?E*n[t]:E,T[t]=d[t]?E*d[t]:E,1==f.type&&($=!0)}const X=2==f.type?this.computePitchEnvelope(e,t,this.startPinTickPitch||this.getPitchValue(e,a,r,!0)):0;if(null!=i.computeIndex){const n=i.computeIndex+c;let s=ze.computeEnvelope(f,q,I,y,v[t],P[t],Q,D,X,m,U,j,!1,_,K,J,Z,Y);if(O){s+=(ze.computeEnvelope(f,q,I,F,x[t],P[t],Q,C,X,m,U,j,!1,_,K,J,Z,Y)-s)*A}if(G){s+=(ze.computeEnvelope(f,q,I,0,0,P[t],Q,H,X,m,U,j,!1,_,K,J,Z,Y)-s)*N}let a=s;if(0==S){if(a=ze.computeEnvelope(f,q,I,b,g[t],T[t],Q,z,X,m,U,j,!1,_,K,J,Z,Y),L){a+=(ze.computeEnvelope(f,q,I,k,M[t],T[t],Q,C,X,m,U,j,!1,_,K,J,Z,Y)-a)*R}if(W){a+=(ze.computeEnvelope(f,q,I,0,0,T[t],Q,H,X,m,U,j,!1,_,K,J,Z,Y)-a)*B}}if(this.envelopeStarts[n]*=s,this.envelopeEnds[n]*=a,this.Z[this.X++]=n,i.isFilter){const t=null!=e.tmpNoteFilterStart?e.tmpNoteFilterStart:e.noteFilter;t.controlPointCount>c&&0==t.controlPoints[c].type&&(V=Math.max(V,ze.getLowpassCutoffDecayVolumeCompensation(f,w)))}}}this.noteSecondsStartUnscaled=y,this.noteSecondsEndUnscaled=b,this.noteTicksStart=S,this.noteTicksEnd=w,this.prevNoteSecondsStartUnscaled=F,this.prevNoteSecondsEndUnscaled=k,this.prevNoteTicksStart=I,this.prevNoteTicksEnd=q;for(let e=0;e<u.maxEnvelopeCount+1;e++)this.noteSecondsStart[e]=v[e],this.noteSecondsEnd[e]=g[e],this.prevNoteSecondsStart[e]=x[e],this.prevNoteSecondsEnd[e]=M[e];this.prevNoteSize=C,this.nextNoteSize=H,this.noteSizeStart=D,this.noteSizeEnd=z,this.prevSlideStart=O,this.prevSlideEnd=L,this.nextSlideStart=G,this.nextSlideEnd=W,this.prevSlideRatioStart=A,this.prevSlideRatioEnd=R,this.nextSlideRatioStart=N,this.nextSlideRatioEnd=B,this.lowpassCutoffDecayVolumeCompensation=V}clearEnvelopes(){for(let e=0;e<this.X;e++){const t=this.Z[e];this.envelopeStarts[t]=1,this.envelopeEnds[t]=1}this.X=0}static computeEnvelope(e,t,n,i,s,a,o,r,l,p,h,u,c=!1,f,d,m,v,y){const g=c?e.speed:1,b=u-h;switch(e.type){case 0:return u;case 1:return p?u-Ge.noteSizeToVolumeMult(r)*b:Ge.noteSizeToVolumeMult(r)*b+h;case 2:return l;case 3:const e=4294967295,c=f;switch(m){case 0:if(c<=1)return 1;const n=X((0==t?0:Math.floor(o*t/256))+"",d);return p?u-b*(c/(c-1))*Math.floor(n*c/(e+1))/c:b*(c/(c-1))*Math.floor(n*c/(e+1))/c+h;case 1:const i=X(v+"",d);return p?u-b*i/(e+1):b*i/(e+1)+h;case 2:if(c<=1)return 1;const s=X(y+"",d);return p?u-b*(c/(c-1))*Math.floor(s*c/(e+1))/c:b*(c/(c-1))*Math.floor(s*c/(e+1))/c+h;case 3:const a=X((0==t?0:Math.floor(o*t/256))+"",d)*(1-o*t/256%1)+X((0==t?0:Math.floor((o*t+256)/256))+"",d)*(o*t/256%1);return p?u-b*a/(e+1):b*a/(e+1)+h;default:throw new Error("Unrecognized operator envelope waveform type: "+m)}case 6:return p?u-b*(1/(1+s*g)):b/(1+s*g)+h;case 7:return p?b/(1+s*g)+h:u-b/(1+s*g);case 8:switch(m){case 0:return p?u/2+b*Math.cos(2*a*Math.PI*g)*.5+h/2:u/2-b*Math.cos(2*a*Math.PI*g)*.5+h/2;case 1:return p?Math.cos(2*a*Math.PI*g+3*Math.PI/2)<0?u:h:Math.cos(2*a*Math.PI*g+3*Math.PI/2)<0?h:u;case 2:return p?u/2-b/Math.PI*Math.asin(Math.sin(Math.PI/2+a*Math.PI*2*g))+h/2:u/2+b/Math.PI*Math.asin(Math.sin(Math.PI/2+a*Math.PI*2*g))+h/2;case 3:return p?u-a*g%1*b:a*g%1*b+h;case 4:let e=0;return e=p?u/2-2*b/Math.PI*Math.asin(Math.sin(Math.PI/2+a*Math.PI*2*g))+h/2:u/2+2*b/Math.PI*Math.asin(Math.sin(Math.PI/2+a*Math.PI*2*g))+h/2,Math.max(h,Math.min(u,e));case 5:if(f<=1)return 1;let t=a*g%1;return p?u-Math.floor(t*f)*b/(f-1):Math.floor(t*f)*b/(f-1)+h;case 6:if(f<=1)return 1;let n=.5+(p?-1:1)*(1/Math.PI)*Math.asin(Math.sin(Math.PI/2+a*Math.PI*2*g));return Math.round(n*(f-1))*b/(f-1)+h;default:throw new Error("Unrecognized operator envelope waveform type: "+m)}case 9:return p?u/4+b*Math.cos(2*a*Math.PI*g)*.25+h/4:.5+u/4-b*Math.cos(2*a*Math.PI*g)*.25-h/4;case 4:return p?Math.max(0,u+1-Math.max(1-h,1-u-i*n*10)):Math.max(1+h,1+u-i*n*10);case 5:const S=.25/Math.sqrt(g*t);return p?u-b*(i<S?i/S:1/(1+(i-S)*g*t)):b*(i<S?i/S:1/(1+(i-S)*g*t))+h;case 10:return p?u-b*Math.pow(2,-g*s):b*Math.pow(2,-g*s)+h;case 14:return p?u-b*+(i<.25/Math.sqrt(g*t)):b*+(i<.25/Math.sqrt(g*t))+h;case 11:let w=.5-.5*Math.cos(a*g);return w=1/(1+s*(g-w/(1.5/g))),w=w>0?w:0,p?u-b*w:b*w+h;case 12:{let e=1-s/(16/g);return e=e>0?e:0,p?u-b*e:b*e+h}case 13:{let e=s/(16/g);return e=e<1?e:1,p?u-b*e:b*e+h}case 15:return p?Math.min(Math.max(h,u-b*Math.sqrt(Math.max(1-g*s/2,0))),u):Math.max(h,b*Math.sqrt(Math.max(1-g*s/2,0))+h);default:throw new Error("Unrecognized operator envelope type.")}}getPitchValue(e,t,n,i=!0){if(t&&t.pitchCount>=1){const s=e.getChord(),a=s.arpeggiates,o="monophonic"==s.name,r=Math.floor(n.arpTime/u.ticksPerArpeggio),l=t.pitches[a?S(t.pitchCount,e.fastTwoNoteArp,r):o?e.monoChordTone:0];return i&&t.lastInterval!=l?l+t.lastInterval:l}return 0}computePitchEnvelope(e,t,n=0){let i=0,s=u.maxPitch,a=!1,o=0,r=1;e.isNoiseInstrument&&(s=u.drumCount-1),t<e.envelopeCount&&-2!==t&&(i=e.envelopes[t].pitchEnvelopeStart,s=e.envelopes[t].pitchEnvelopeEnd,a=e.envelopes[t].inverse,o=e.envelopes[t].perEnvelopeLowerBound,r=e.envelopes[t].perEnvelopeUpperBound),i>s&&(i=0,s=e.isNoiseInstrument?u.drumCount-1:u.maxPitch);const l=s-i+1;return a?n<=i?r:n>=s?o:r-(n-i)*(r-o)/l:n<=i?o:n>=s?r:(n-i)*(r-o)/l+o}static getLowpassCutoffDecayVolumeCompensation(e,t=1){return 10==e.type?1.25+.025*t:6==e.type?1+.02*t:1}computeDrumsetEnvelopes(e,t,n,i,s){function a(e,n,i,s){return ze.computeEnvelope(t,1,1,e,n,i,0,s,1,!1,0,1,!0,2,2,0,1,0)}let o=a(this.noteSecondsStartUnscaled,this.noteSecondsStartUnscaled,n*i,this.noteSizeStart);if(this.prevSlideStart){o+=(a(this.prevNoteSecondsStartUnscaled,this.prevNoteSecondsStartUnscaled,n*i,this.prevNoteSize)-o)*this.prevSlideRatioStart}if(this.nextSlideStart){o+=(a(0,0,n*i,this.nextNoteSize)-o)*this.nextSlideRatioStart}let r=o;if(r=a(this.noteSecondsEndUnscaled,this.noteSecondsEndUnscaled,n*s,this.noteSizeEnd),this.prevSlideEnd){r+=(a(this.prevNoteSecondsEndUnscaled,this.prevNoteSecondsEndUnscaled,n*s,this.prevNoteSize)-r)*this.prevSlideRatioEnd}if(this.nextSlideEnd){r+=(a(0,0,n*s,this.nextNoteSize)-r)*this.nextSlideRatioEnd}this.drumsetFilterEnvelopeStart=o,this.drumsetFilterEnvelopeEnd=r}}class Ce{constructor(){this.pitches=Array(u.maxChordSize+2).fill(0),this.pitchCount=0,this.chordSize=0,this.drumsetPitch=null,this.note=null,this.prevNote=null,this.nextNote=null,this.prevNotePitchIndex=0,this.nextNotePitchIndex=0,this.freshlyAllocated=!0,this.atNoteStart=!1,this.isOnLastTick=!1,this.passedEndOfNote=!1,this.forceContinueAtStart=!1,this.forceContinueAtEnd=!1,this.noteStartPart=0,this.noteEndPart=0,this.ticksSinceReleased=0,this.liveInputSamplesHeld=0,this.lastInterval=0,this.stringSustainStart=0,this.stringSustainEnd=0,this.noiseSamples=[],this.phases=[],this.operatorWaves=[],this.phaseDeltas=[],this.directions=[],this.chipWaveCompletions=[],this.chipWavePrevWaves=[],this.chipWaveCompletionsLastWave=[],this.phaseDeltaScales=[],this.expression=0,this.expressionDelta=0,this.operatorExpressions=[],this.operatorExpressionDeltas=[],this.prevPitchExpressions=Array(u.maxPitchOrOperatorCount).fill(null),this.prevVibrato=null,this.prevStringDecay=null,this.pulseWidth=0,this.pulseWidthDelta=0,this.decimalOffset=0,this.supersawDynamism=0,this.supersawDynamismDelta=0,this.supersawUnisonDetunes=[],this.supersawShape=0,this.supersawShapeDelta=0,this.supersawDelayLength=0,this.supersawDelayLengthDelta=0,this.supersawDelayLine=null,this.supersawDelayIndex=-1,this.supersawPrevPhaseDelta=null,this.pickedStrings=[],this.noteFilters=[],this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.specialIntervalExpressionMult=1,this.feedbackOutputs=[],this.feedbackMult=0,this.feedbackDelta=0,this.stereoVolumeLStart=0,this.stereoVolumeRStart=0,this.stereoVolumeLDelta=0,this.stereoVolumeRDelta=0,this.stereoDelayStart=0,this.stereoDelayEnd=0,this.stereoDelayDelta=0,this.customVolumeStart=0,this.customVolumeEnd=0,this.filterResonanceStart=0,this.filterResonanceDelta=0,this.isFirstOrder=!1,this.envelopeComputer=new ze,this.reset()}reset(){for(let e=0;e<u.unisonVoicesMax;e++)this.noiseSamples[e]=0;for(let e=0;e<u.maxPitchOrOperatorCount;e++)this.phases[e]=0,this.directions[e]=1,this.chipWaveCompletions[e]=0,this.chipWavePrevWaves[e]=0,this.chipWaveCompletionsLastWave[e]=0,this.operatorWaves[e]=u.operatorWaves[0],this.feedbackOutputs[e]=0,this.prevPitchExpressions[e]=null;for(let e=0;e<this.noteFilterCount;e++)this.noteFilters[e].resetOutput();this.noteFilterCount=0,this.initialNoteFilterInput1=0,this.initialNoteFilterInput2=0,this.liveInputSamplesHeld=0,this.supersawDelayIndex=-1;for(const e of this.pickedStrings)e.reset();this.envelopeComputer.reset(),this.prevVibrato=null,this.prevStringDecay=null,this.supersawPrevPhaseDelta=null,this.drumsetPitch=null}}class He{constructor(){this.effects=0,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0,this.eqFilterVolume=1,this.eqFilterVolumeDelta=0,this.mixVolume=1,this.mixVolumeDelta=0,this.delayInputMult=0,this.delayInputMultDelta=0,this.granularMix=1,this.granularMixDelta=0,this.granularDelayLine=null,this.granularDelayLineIndex=0,this.granularMaximumDelayTimeInSeconds=1,this.usesRandomGrainLocation=!0,this.granularDelayLineDirty=!1,this.computeGrains=!0,this.ringModMix=0,this.ringModMixDelta=0,this.ringModPhase=0,this.ringModPhaseDelta=0,this.ringModPhaseDeltaScale=1,this.ringModWaveformIndex=0,this.ringModPulseWidth=0,this.ringModHzOffset=0,this.ringModMixFade=1,this.ringModMixFadeDelta=0,this.distortion=0,this.distortionDelta=0,this.distortionDrive=0,this.distortionDriveDelta=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1,this.bitcrusherPhaseDelta=0,this.bitcrusherPhaseDeltaScale=1,this.bitcrusherScale=1,this.bitcrusherScaleScale=1,this.bitcrusherFoldLevel=1,this.bitcrusherFoldLevelScale=1,this.eqFilters=[],this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.panningDelayLine=null,this.panningDelayPos=0,this.panningVolumeL=0,this.panningVolumeR=0,this.panningVolumeDeltaL=0,this.panningVolumeDeltaR=0,this.panningOffsetL=0,this.panningOffsetR=0,this.panningOffsetDeltaL=0,this.panningOffsetDeltaR=0,this.chorusDelayLineL=null,this.chorusDelayLineR=null,this.chorusDelayLineDirty=!1,this.chorusDelayPos=0,this.chorusPhase=0,this.chorusVoiceMult=0,this.chorusVoiceMultDelta=0,this.chorusCombinedMult=0,this.chorusCombinedMultDelta=0,this.echoDelayLineL=null,this.echoDelayLineR=null,this.echoDelayLineDirty=!1,this.echoDelayPos=0,this.echoDelayOffsetStart=0,this.echoDelayOffsetEnd=null,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=0,this.echoMult=0,this.echoMultDelta=0,this.echoShelfA1=0,this.echoShelfB0=0,this.echoShelfB1=0,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbDelayLine=null,this.reverbDelayLineDirty=!1,this.reverbDelayPos=0,this.reverbMult=0,this.reverbMultDelta=0,this.reverbShelfA1=0,this.reverbShelfB0=0,this.reverbShelfB1=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.granularGrains=[],this.granularMaximumGrains=256;for(let e=0;e<this.granularMaximumGrains;e++)this.granularGrains.push(new Me);this.granularGrainsLength=0}allocateNecessaryBuffers(e,t,n){if(T(t.effects)&&(null==this.panningDelayLine||this.panningDelayLine.length<e.panningDelayBufferSize)&&(this.panningDelayLine=new Float32Array(e.panningDelayBufferSize)),D(t.effects)&&((null==this.chorusDelayLineL||this.chorusDelayLineL.length<e.chorusDelayBufferSize)&&(this.chorusDelayLineL=new Float32Array(e.chorusDelayBufferSize)),(null==this.chorusDelayLineR||this.chorusDelayLineR.length<e.chorusDelayBufferSize)&&(this.chorusDelayLineR=new Float32Array(e.chorusDelayBufferSize))),z(t.effects)){const e=Math.max(u.echoDelayRange>>1,t.echoDelay+1),i=2*Ge.fittingPowerOfTwo(e*u.echoDelayStepTicks*n);if(null==this.echoDelayLineL||null==this.echoDelayLineR)this.echoDelayLineL=new Float32Array(i),this.echoDelayLineR=new Float32Array(i);else if(this.echoDelayLineL.length<i||this.echoDelayLineR.length<i){const e=new Float32Array(i),t=new Float32Array(i),n=this.echoDelayLineL.length-1;for(let i=0;i<this.echoDelayLineL.length;i++)e[i]=this.echoDelayLineL[this.echoDelayPos+i&n],t[i]=this.echoDelayLineL[this.echoDelayPos+i&n];this.echoDelayPos=this.echoDelayLineL.length,this.echoDelayLineL=e,this.echoDelayLineR=t}}if(C(t.effects)&&null==this.reverbDelayLine&&(this.reverbDelayLine=new Float32Array(u.reverbDelayBufferSize)),O(t.effects)){const t=2500/1e3;this.granularMaximumDelayTimeInSeconds=t;const n=Ge.fittingPowerOfTwo(Math.floor(t*e.samplesPerSecond));null!=this.granularDelayLine&&this.granularDelayLine.length==n||(this.granularDelayLine=new Float32Array(n),this.granularDelayLineIndex=0);const i=this.granularGrains.length;if(this.granularMaximumGrains>i)for(let e=i;e<this.granularMaximumGrains+1;e++)this.granularGrains.push(new Me);this.granularMaximumGrains<this.granularGrainsLength&&(this.granularGrainsLength=Math.round(this.granularMaximumGrains))}}deactivate(){this.bitcrusherPrevInput=0,this.bitcrusherCurrentOutput=0,this.bitcrusherPhase=1;for(let e=0;e<this.eqFilterCount;e++)this.eqFilters[e].resetOutput();if(this.eqFilterCount=0,this.initialEqFilterInput1=0,this.initialEqFilterInput2=0,this.distortionFractionalInput1=0,this.distortionFractionalInput2=0,this.distortionFractionalInput3=0,this.distortionPrevInput=0,this.distortionNextOutput=0,this.panningDelayPos=0,null!=this.panningDelayLine)for(let e=0;e<this.panningDelayLine.length;e++)this.panningDelayLine[e]=0;this.echoDelayOffsetEnd=null,this.echoShelfSampleL=0,this.echoShelfSampleR=0,this.echoShelfPrevInputL=0,this.echoShelfPrevInputR=0,this.reverbShelfSample0=0,this.reverbShelfSample1=0,this.reverbShelfSample2=0,this.reverbShelfSample3=0,this.reverbShelfPrevInput0=0,this.reverbShelfPrevInput1=0,this.reverbShelfPrevInput2=0,this.reverbShelfPrevInput3=0,this.flushingDelayLines=!1,this.deactivateAfterThisTick=!1,this.attentuationProgress=0,this.flushedSamples=0}resetAllEffects(){if(this.chorusDelayLineDirty){for(let e=0;e<this.chorusDelayLineL.length;e++)this.chorusDelayLineL[e]=0;for(let e=0;e<this.chorusDelayLineR.length;e++)this.chorusDelayLineR[e]=0}if(this.echoDelayLineDirty){for(let e=0;e<this.echoDelayLineL.length;e++)this.echoDelayLineL[e]=0;for(let e=0;e<this.echoDelayLineR.length;e++)this.echoDelayLineR[e]=0}if(this.reverbDelayLineDirty)for(let e=0;e<this.reverbDelayLine.length;e++)this.reverbDelayLine[e]=0;if(this.granularDelayLineDirty)for(let e=0;e<this.granularDelayLine.length;e++)this.granularDelayLine[e]=0;this.chorusPhase=0,this.ringModPhase=0,this.ringModMixFade=1}compute(e,t,n,i,s,a,o,r){this.effects=t.effects;const l=e.samplesPerSecond,p=O(this.effects),h=H(this.effects),c=E(this.effects),f=P(this.effects),d=T(this.effects),m=D(this.effects),v=z(this.effects),y=C(this.effects),g=o.envelopeStarts,b=o.envelopeEnds;if(p&&(this.granularMaximumGrains=Math.pow(2,t.grainAmounts*g[52]),e.isModActive(u.modulators.dictionary["grain freq"].index,s,a)&&(this.granularMaximumGrains=Math.pow(2,e.getModValue(u.modulators.dictionary["grain freq"].index,s,a,!1)*g[52])),this.granularMaximumGrains,Math.floor(this.granularMaximumGrains)),this.allocateNecessaryBuffers(e,t,n),p){this.granularMix=t.granular/u.granularRange,this.computeGrains=!0;let o=this.granularMix;e.isModActive(u.modulators.dictionary.granular.index,s,a)&&(this.granularMix=e.getModValue(u.modulators.dictionary.granular.index,s,a,!1)/u.granularRange,o=e.getModValue(u.modulators.dictionary.granular.index,s,a,!0)/u.granularRange),this.granularMix*=g[51],o*=b[51],this.granularMixDelta=(o-this.granularMix)/i;for(let i=0;i<Math.ceil(Math.random()*Math.random()*10);i++)if(this.granularGrainsLength<this.granularMaximumGrains){let i=t.grainSize;e.isModActive(u.modulators.dictionary["grain size"].index,s,a)&&(i=e.getModValue(u.modulators.dictionary["grain size"].index,s,a,!1)),i*=g[53];let o=t.grainRange;e.isModActive(u.modulators.dictionary["grain range"].index,s,a)&&(o=e.getModValue(u.modulators.dictionary["grain range"].index,s,a,!1)),o*=g[54];const r=(i+(i+o-i)*Math.random())/1e3,p=Math.floor(r*l),h=this.granularDelayLine.length,c=this.granularGrainsLength;this.granularGrainsLength++;const f=this.granularGrains[c];f.ageInSamples=0,f.maxAgeInSamples=p;const d=.02,m=2.4;f.delayLinePosition=this.usesRandomGrainLocation?(d+(m-d)*Math.random()*Math.random()*l)%(h-1):d,0==u.granularEnvelopeType?f.initializeParabolicEnvelope(f.maxAgeInSamples,1):1==u.granularEnvelopeType&&f.initializeRCBEnvelope(f.maxAgeInSamples,1),f.addDelay(Math.random()*n*4)}}if(c){let n=t.distortion,o=t.distortion;e.isModActive(u.modulators.dictionary.distortion.index,s,a)&&(n=e.getModValue(u.modulators.dictionary.distortion.index,s,a,!1),o=e.getModValue(u.modulators.dictionary.distortion.index,s,a,!0));const r=Math.min(1,g[42]*n/(u.distortionRange-1)),l=Math.min(1,b[42]*o/(u.distortionRange-1)),p=Math.pow(1-.895*(Math.pow(20,r)-1)/19,2),h=Math.pow(1-.895*(Math.pow(20,l)-1)/19,2),c=(1+2*r)/u.distortionBaseVolume,f=(1+2*l)/u.distortionBaseVolume;this.distortion=p,this.distortionDelta=(h-p)/i,this.distortionDrive=c,this.distortionDriveDelta=(f-c)/i}if(f){let n=t.bitcrusherFreq*Math.sqrt(g[44]),o=t.bitcrusherFreq*Math.sqrt(b[44]);e.isModActive(u.modulators.dictionary["freq crush"].index,s,a)&&(n=e.getModValue(u.modulators.dictionary["freq crush"].index,s,a,!1)*Math.sqrt(g[44]),o=e.getModValue(u.modulators.dictionary["freq crush"].index,s,a,!0)*Math.sqrt(b[44]));let r=t.bitcrusherQuantization*Math.sqrt(g[43]),p=t.bitcrusherQuantization*Math.sqrt(b[43]);e.isModActive(u.modulators.dictionary["bit crush"].index,s,a)&&(r=e.getModValue(u.modulators.dictionary["bit crush"].index,s,a,!1)*Math.sqrt(g[43]),p=e.getModValue(u.modulators.dictionary["bit crush"].index,s,a,!0)*Math.sqrt(b[43]));const h=u.keys[e.song.key].basePitch+u.pitchesPerOctave*e.song.octave,c=Ee.frequencyFromPitch(h+60)*Math.pow(2,(u.bitcrusherFreqRange-1-n)*u.bitcrusherOctaveStep),f=Ee.frequencyFromPitch(h+60)*Math.pow(2,(u.bitcrusherFreqRange-1-o)*u.bitcrusherOctaveStep),d=Math.min(1,c/l),m=Math.min(1,f/l);this.bitcrusherPhaseDelta=d,this.bitcrusherPhaseDeltaScale=Math.pow(m/d,1/i);const v=2*u.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(u.bitcrusherQuantizationRange-1-r))),y=2*u.bitcrusherBaseVolume*Math.pow(2,1-Math.pow(2,.5*(u.bitcrusherQuantizationRange-1-p)));this.bitcrusherScale=v,this.bitcrusherScaleScale=Math.pow(y/v,1/i);const S=2*u.bitcrusherBaseVolume*Math.pow(1.5,u.bitcrusherQuantizationRange-1-r),w=2*u.bitcrusherBaseVolume*Math.pow(1.5,u.bitcrusherQuantizationRange-1-p);this.bitcrusherFoldLevel=S,this.bitcrusherFoldLevelScale=Math.pow(w/S,1/i)}let S=1;if(t.eqFilterType){const n=t.eqFilter;null==t.eqSubFilters[1]&&(t.eqSubFilters[1]=new ke);const o=t.eqSubFilters[1];let r,p=t.eqFilterSimpleCut,h=t.eqFilterSimplePeak,c=t.eqFilterSimpleCut,f=t.eqFilterSimplePeak,d=!1;if(e.isModActive(u.modulators.dictionary["eq filt cut"].index,s,a)&&(p=e.getModValue(u.modulators.dictionary["eq filt cut"].index,s,a,!1),c=e.getModValue(u.modulators.dictionary["eq filt cut"].index,s,a,!0),d=!0),e.isModActive(u.modulators.dictionary["eq filt peak"].index,s,a)&&(h=e.getModValue(u.modulators.dictionary["eq filt peak"].index,s,a,!1),f=e.getModValue(u.modulators.dictionary["eq filt peak"].index,s,a,!0),d=!0),d){n.convertLegacySettingsForSynth(p,h),o.convertLegacySettingsForSynth(c,f),r=n.controlPoints[0];let e=o.controlPoints[0];r.toCoefficients(Ge.tempFilterStartCoefficients,l,1,1),e.toCoefficients(Ge.tempFilterEndCoefficients,l,1,1),this.eqFilters.length<1&&(this.eqFilters[0]=new U),this.eqFilters[0].loadCoefficientsWithGradient(Ge.tempFilterStartCoefficients,Ge.tempFilterEndCoefficients,1/i,0==r.type)}else n.convertLegacySettingsForSynth(p,h,!0),r=n.controlPoints[0],r.toCoefficients(Ge.tempFilterStartCoefficients,l,1,1),this.eqFilters.length<1&&(this.eqFilters[0]=new U),this.eqFilters[0].loadCoefficientsWithGradient(Ge.tempFilterStartCoefficients,Ge.tempFilterStartCoefficients,1/i,0==r.type);S*=r.getVolumeCompensationMult(),this.eqFilterCount=1,S=Math.min(3,S)}else{const o=null!=t.tmpEqFilterStart?t.tmpEqFilterStart:t.eqFilter;for(let e=0;e<o.controlPointCount;e++){let n=o.controlPoints[e],s=null!=t.tmpEqFilterEnd&&null!=t.tmpEqFilterEnd.controlPoints[e]?t.tmpEqFilterEnd.controlPoints[e]:o.controlPoints[e];n.type!=s.type&&(n=s),n.toCoefficients(Ge.tempFilterStartCoefficients,l,1,1),s.toCoefficients(Ge.tempFilterEndCoefficients,l,1,1),this.eqFilters.length<=e&&(this.eqFilters[e]=new U),this.eqFilters[e].loadCoefficientsWithGradient(Ge.tempFilterStartCoefficients,Ge.tempFilterEndCoefficients,1/i,0==n.type),S*=n.getVolumeCompensationMult()}this.eqFilterCount=o.controlPointCount,S=Math.min(3,S);let c=S,f=S,w=1,x=1;const M=Ge.instrumentVolumeToVolumeMult(t.volume);this.mixVolume=M;let F=M;if(e.isModActive(u.modulators.dictionary["mix volume"].index,s,a)){const t=e.getModValue(u.modulators.dictionary["mix volume"].index,s,a,!1),n=e.getModValue(u.modulators.dictionary["mix volume"].index,s,a,!0);this.mixVolume*=t<=0?(t+u.volumeRange/2)/(u.volumeRange/2):Ge.instrumentVolumeToVolumeMult(t),F*=n<=0?(n+u.volumeRange/2)/(u.volumeRange/2):Ge.instrumentVolumeToVolumeMult(n)}if(e.isModActive(u.modulators.dictionary["song volume"].index)&&(this.mixVolume*=e.getModValue(u.modulators.dictionary["song volume"].index,void 0,void 0,!1)/100,F*=e.getModValue(u.modulators.dictionary["song volume"].index,void 0,void 0,!0)/100),this.mixVolumeDelta=(F-this.mixVolume)/i,d){const n=2*g[41]-1,o=2*b[41]-1;let r=t.pan,p=t.pan;e.isModActive(u.modulators.dictionary.pan.index,s,a)&&(r=e.getModValue(u.modulators.dictionary.pan.index,s,a,!1),p=e.getModValue(u.modulators.dictionary.pan.index,s,a,!0));let h=Math.max(-1,Math.min(1,(r-u.panCenter)/u.panCenter*n)),c=Math.max(-1,Math.min(1,(p-u.panCenter)/u.panCenter*o));const f=1.414*Math.cos((1+h)*Math.PI*.25),d=1.414*Math.cos((1-h)*Math.PI*.25),m=1.414*Math.cos((1+c)*Math.PI*.25),v=1.414*Math.cos((1-c)*Math.PI*.25),y=l*u.panDelaySecondsMax;let S=t.panDelay,w=t.panDelay;e.isModActive(u.modulators.dictionary["pan delay"].index,s,a)&&(S=e.getModValue(u.modulators.dictionary["pan delay"].index,s,a,!1),w=e.getModValue(u.modulators.dictionary["pan delay"].index,s,a,!0));const x=h*S*y/10,M=c*w*y/10,F=Math.max(0,x),k=Math.max(0,-x),I=Math.max(0,M),q=Math.max(0,-M);this.panningVolumeL=f,this.panningVolumeR=d,this.panningVolumeDeltaL=(m-f)/i,this.panningVolumeDeltaR=(v-d)/i,this.panningOffsetL=this.panningDelayPos-F+e.panningDelayBufferSize,this.panningOffsetR=this.panningDelayPos-k+e.panningDelayBufferSize,this.panningOffsetDeltaL=(I-F)/i,this.panningOffsetDeltaR=(q-k)/i}if(m){const n=g[45],o=b[45];let r=t.chorus,l=t.chorus;e.isModActive(u.modulators.dictionary.chorus.index,s,a)&&(r=e.getModValue(u.modulators.dictionary.chorus.index,s,a,!1),l=e.getModValue(u.modulators.dictionary.chorus.index,s,a,!0));let p=Math.min(1,n*r/(u.chorusRange-1)),h=Math.min(1,o*l/(u.chorusRange-1));p=.6*p+.4*Math.pow(p,6),h=.6*h+.4*Math.pow(h,6);const c=1/Math.sqrt(3*p*p+1),f=1/Math.sqrt(3*h*h+1);this.chorusVoiceMult=p,this.chorusVoiceMultDelta=(h-p)/i,this.chorusCombinedMult=c,this.chorusCombinedMultDelta=(f-c)/i}if(h){let n=t.ringModulation,o=t.ringModulation,r=g[49],l=b[49],p=Math.min(1,t.ringModulationHz/(u.ringModHzRange-1)),h=Math.min(1,t.ringModulationHz/(u.ringModHzRange-1)),c=g[50],f=b[50];e.isModActive(u.modulators.dictionary["ring modulation"].index,s,a)&&(n=e.getModValue(u.modulators.dictionary["ring modulation"].index,s,a,!1),o=e.getModValue(u.modulators.dictionary["ring modulation"].index,s,a,!0)),e.isModActive(u.modulators.dictionary["ring mod hertz"].index,s,a)&&(p=Math.min(1,Math.max(0,e.getModValue(u.modulators.dictionary["ring mod hertz"].index,s,a,!1)/(u.ringModHzRange-1))),h=Math.min(1,Math.max(0,e.getModValue(u.modulators.dictionary["ring mod hertz"].index,s,a,!1)/(u.ringModHzRange-1)))),p*=c,h*=f;let d=Math.min(1,n*r/(u.ringModRange-1)),m=Math.min(1,o*l/(u.ringModRange-1));this.ringModMix=d,this.ringModMixDelta=(m-d)/i,this.ringModHzOffset=t.ringModHzOffset;let v=Math.max(0,L(p))/e.samplesPerSecond,y=Math.max(0,L(h))/e.samplesPerSecond;this.ringModMixFadeDelta=0,this.ringModMixFade<0&&(this.ringModMixFade=0),v<=0&&y<=0&&0!=this.ringModMixFade?this.ringModMixFadeDelta=this.ringModMixFade/-10:v>0&&y>0&&(this.ringModMixFade=1),this.ringModPhaseDelta=v,this.ringModPhaseDeltaScale=0==v?1:Math.pow(y/v,1/i),this.ringModWaveformIndex=t.ringModWaveformIndex,this.ringModPulseWidth=t.ringModPulseWidth}let k=0,I=0;if(v){const o=g[46],r=b[46];let p=t.echoSustain,h=t.echoSustain;e.isModActive(u.modulators.dictionary.echo.index,s,a)&&(p=Math.max(0,e.getModValue(u.modulators.dictionary.echo.index,s,a,!1)),h=Math.max(0,e.getModValue(u.modulators.dictionary.echo.index,s,a,!0)));const c=.9*Math.min(1,Math.pow(o*p/u.echoSustainRange,1.1)),f=.9*Math.min(1,Math.pow(r*h/u.echoSustainRange,1.1));this.echoMult=c,this.echoMultDelta=Math.max(0,(f-c)/i),k=Math.max(c,f);const d=g[55],m=b[55];let v=t.echoDelay*d,y=t.echoDelay*m;e.isModActive(u.modulators.dictionary["echo delay"].index,s,a)&&(v=e.getModValue(u.modulators.dictionary["echo delay"].index,s,a,!1)*d,y=e.getModValue(u.modulators.dictionary["echo delay"].index,s,a,!0)*m);const S=Math.round((v+1)*u.echoDelayStepTicks*n),w=Math.round((y+1)*u.echoDelayStepTicks*n);null!=this.echoDelayOffsetEnd?this.echoDelayOffsetStart=this.echoDelayOffsetEnd:this.echoDelayOffsetStart=S,this.echoDelayOffsetEnd=w,I=.5*(this.echoDelayOffsetStart+this.echoDelayOffsetEnd)/l,this.echoDelayOffsetRatio=0,this.echoDelayOffsetRatioDelta=1/i;const x=2*Math.PI*u.echoShelfHz/e.samplesPerSecond;Ge.tempFilterStartCoefficients.highShelf1stOrder(x,u.echoShelfGain),this.echoShelfA1=Ge.tempFilterStartCoefficients.a[1],this.echoShelfB0=Ge.tempFilterStartCoefficients.b[0],this.echoShelfB1=Ge.tempFilterStartCoefficients.b[1]}let q=0;if(y){const n=g[47],o=b[47];let r=t.reverb,l=t.reverb;e.isModActive(u.modulators.dictionary.reverb.index,s,a)&&(r=e.getModValue(u.modulators.dictionary.reverb.index,s,a,!1),l=e.getModValue(u.modulators.dictionary.reverb.index,s,a,!0)),e.isModActive(u.modulators.dictionary["song reverb"].index,s,a)&&(r*=(e.getModValue(u.modulators.dictionary["song reverb"].index,void 0,void 0,!1)-u.modulators.dictionary["song reverb"].convertRealFactor)/u.reverbRange,l*=(e.getModValue(u.modulators.dictionary["song reverb"].index,void 0,void 0,!0)-u.modulators.dictionary["song reverb"].convertRealFactor)/u.reverbRange);const p=.425*Math.min(1,Math.pow(n*r/u.reverbRange,.667)),h=.425*Math.min(1,Math.pow(o*l/u.reverbRange,.667));this.reverbMult=p,this.reverbMultDelta=(h-p)/i,q=Math.max(p,h);const c=2*Math.PI*u.reverbShelfHz/e.samplesPerSecond;Ge.tempFilterStartCoefficients.highShelf1stOrder(c,u.reverbShelfGain),this.reverbShelfA1=Ge.tempFilterStartCoefficients.a[1],this.reverbShelfB0=Ge.tempFilterStartCoefficients.b[0],this.reverbShelfB1=Ge.tempFilterStartCoefficients.b[1]}if(r)this.attentuationProgress=0,this.flushedSamples=0,this.flushingDelayLines=!1;else if(this.flushingDelayLines){c=0,f=0,w=0,x=0;let t=0;m&&(t+=e.chorusDelayBufferSize),v&&(t+=this.echoDelayLineL.length),y&&(t+=u.reverbDelayBufferSize),p&&(t+=this.granularMaximumDelayTimeInSeconds),this.flushedSamples+=i,this.flushedSamples>=t&&(this.deactivateAfterThisTick=!0)}else{0==this.attentuationProgress||(c=0),f=0;const e=1/256,t=-Math.log2(e);let i=0;if(m&&(i+=u.chorusMaxDelay),v){const e=Math.pow(k,1/I);i+=-1/Math.log2(e)*t}if(y){const e=2*q,n=u.reverbDelayBufferSize/4/l,s=Math.pow(e,1/n);i+=-1/Math.log2(s)*t}p&&(this.computeGrains=!1);const s=n/l/i,a=this.attentuationProgress+s;a>=1&&(x=0),this.attentuationProgress=a,this.attentuationProgress>=1&&(this.flushingDelayLines=!0)}this.eqFilterVolume=c,this.eqFilterVolumeDelta=(f-c)/i,this.delayInputMult=w,this.delayInputMultDelta=(x-w)/i}}}class Oe{constructor(){this.awake=!1,this.computed=!1,this.tonesAddedInThisTick=!1,this.activeTones=new N,this.activeModTones=new N,this.releasedTones=new N,this.liveInputTones=new N,this.type=0,this.synthesizer=null,this.wave=null,this.isUsingAdvancedLoopControls=!1,this.chipWaveLoopStart=0,this.chipWaveLoopEnd=0,this.chipWaveLoopMode=0,this.chipWavePlayBackwards=!1,this.chipWaveStartOffset=0,this.noisePitchFilterMult=1,this.unison=null,this.unisonVoices=1,this.unisonSpread=0,this.unisonOffset=0,this.unisonExpression=1.4,this.unisonSign=1,this.chord=null,this.volumeScale=0,this.aliases=!1,this.arpTime=0,this.vibratoTime=0,this.nextVibratoTime=0,this.envelopeTime=[],this.spectrumWave=new Se,this.harmonicsWave=new xe,this.drumsetSpectrumWaves=[],this.effectsComputer=new He,this.perToneEffects=!1,this.envelopeComputer=new ze;for(let e=0;e<u.drumCount;e++)this.drumsetSpectrumWaves[e]=new Se}allocateNecessaryBuffers(e,t,n){this.effectsComputer.allocateNecessaryBuffers(e,t,n)}deactivate(){this.effectsComputer.deactivate(),this.volumeScale=1,this.aliases=!1,this.awake=!1}resetAllEffects(){this.deactivate(),this.effectsComputer.resetAllEffects(),this.vibratoTime=0,this.nextVibratoTime=0,this.arpTime=0;for(let e=0;e<u.maxEnvelopeCount+1;e++)this.envelopeTime[e]=0;this.envelopeComputer.reset()}compute(e,t,n,i,s,a,o){this.computed=!0,this.type=t.type,this.synthesizer=Ge.getInstrumentSynthFunction(t),this.unison=u.unisons[t.unison],this.chord=t.getChord(),this.noisePitchFilterMult=u.chipNoises[t.chipNoise].pitchFilterMult,this.aliases=t.aliases,this.volumeScale=1;const r=e.samplesPerSecond;this.updateWaves(t,r);const l=e.getTicksIntoBar(),p=n/e.samplesPerSecond,h=e.getCurrentPart(),c=[];for(let e=0;e<u.maxEnvelopeCount;e++)c[e]=0;let f=u.arpSpeedScale[t.envelopeSpeed];e.isModActive(u.modulators.dictionary["envelope speed"].index,a,o)&&(f=Math.max(0,Math.min(u.arpSpeedScale.length-1,e.getModValue(u.modulators.dictionary["envelope speed"].index,a,o,!1))),f=Number.isInteger(f)?u.arpSpeedScale[f]:(1-f%1)*u.arpSpeedScale[Math.floor(f)]+f%1*u.arpSpeedScale[Math.ceil(f)]);for(let n=0;n<t.envelopeCount;n++){let i=t.envelopes[n].perEnvelopeSpeed;e.isModActive(u.modulators.dictionary["individual envelope speed"].index,a,o)&&null!=t.envelopes[n].tempEnvelopeSpeed&&(i=t.envelopes[n].tempEnvelopeSpeed),c[n]=f*i}this.envelopeComputer.computeEnvelopes(t,h,this.envelopeTime,l,p,s,c,this,e,a,o),this.effectsComputer.compute(e,t,n,i,a,o,this.envelopeComputer,this.tonesAddedInThisTick),this.envelopeComputer.clearEnvelopes()}updateWaves(e,t){if(this.volumeScale=1,0==e.type)this.wave=this.aliases?u.rawChipWaves[e.chipWave].samples:u.chipWaves[e.chipWave].samples,this.isUsingAdvancedLoopControls=e.isUsingAdvancedLoopControls,this.chipWaveLoopStart=e.chipWaveLoopStart,this.chipWaveLoopEnd=e.chipWaveLoopEnd,this.chipWaveLoopMode=e.chipWaveLoopMode,this.chipWavePlayBackwards=e.chipWavePlayBackwards,this.chipWaveStartOffset=e.chipWaveStartOffset,this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(6==e.type)this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(9==e.type)this.wave=this.aliases?e.customChipWave:e.customChipWaveIntegral,this.volumeScale=.05,this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(2==e.type)this.wave=v(e.chipNoise,R,W),this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(5==e.type)this.wave=this.harmonicsWave.getCustomWave(e.harmonicsWave,e.type),this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(7==e.type)this.wave=this.harmonicsWave.getCustomWave(e.harmonicsWave,e.type),this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(3==e.type)this.wave=this.spectrumWave.getCustomWave(e.spectrumWave,8),this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign;else if(4==e.type){for(let t=0;t<u.drumCount;t++)this.drumsetSpectrumWaves[t].getCustomWave(e.drumsetSpectrumWaves[t],Oe.ee(t));this.wave=null,this.unisonVoices=e.unisonVoices,this.unisonSpread=e.unisonSpread,this.unisonOffset=e.unisonOffset,this.unisonExpression=e.unisonExpression,this.unisonSign=e.unisonSign}else this.wave=null}getDrumsetWave(e){if(4==this.type)return this.drumsetSpectrumWaves[e].wave;throw new Error("Unhandled instrument type in getDrumsetWave")}deactivateAfterThisTick(){return!this.perToneEffects&&this.effectsComputer.deactivateAfterThisTick}static drumsetIndexReferenceDelta(e){return Ee.frequencyFromPitch(u.spectrumBasePitch+6*e)/44100}static ee(e){return 15+Math.log2(Oe.drumsetIndexReferenceDelta(e))}}class Le{constructor(){this.instruments=[],this.muted=!1,this.singleSeamlessInstrument=null}}class Ge{syncSongState(){const e=this.song.getChannelCount();for(let t=this.channels.length;t<e;t++)this.channels[t]=new Le;this.channels.length=e;for(let t=0;t<e;t++){const e=this.song.channels[t],n=this.channels[t];for(let t=n.instruments.length;t<e.instruments.length;t++)n.instruments[t]=new Oe;if(n.instruments.length=e.instruments.length,n.muted!=e.muted&&(n.muted=e.muted,n.muted))for(const e of n.instruments)e.resetAllEffects()}}initModFilters(e){if(null!=e){e.tmpEqFilterStart=e.eqFilter,e.tmpEqFilterEnd=null;for(let t=0;t<e.getChannelCount();t++)for(let n=0;n<e.channels[t].instruments.length;n++){const i=e.channels[t].instruments[n];i.tmpEqFilterStart=i.eqFilter,i.tmpEqFilterEnd=null,i.tmpNoteFilterStart=i.noteFilter,i.tmpNoteFilterEnd=null}}}warmUpSynthesizer(e){if(null!=e){this.syncSongState();const t=this.getSamplesPerTick();for(let n=0;n<e.getChannelCount();n++)for(let i=0;i<e.channels[n].instruments.length;i++){const s=e.channels[n].instruments[i],a=this.channels[n].instruments[i];Ge.getInstrumentSynthFunction(s),a.vibratoTime=0,a.nextVibratoTime=0;for(let e=0;e<u.maxEnvelopeCount+1;e++)a.envelopeTime[e]=0;a.arpTime=0,a.updateWaves(s,this.samplesPerSecond),a.allocateNecessaryBuffers(this,s,t)}}var t=new Float32Array(1);this.isPlayingSong=!0,this.synthesize(t,t,1,!0),this.isPlayingSong=!1}computeLatestModValues(){if(null!=this.song&&this.song.modChannelCount>0){let e=[],t=[];this.modValues=[],this.nextModValues=[],this.modInsValues=[],this.nextModInsValues=[],this.heldMods=[];for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++){t[e]=[],this.modInsValues[e]=[],this.nextModInsValues[e]=[];for(let n=0;n<this.song.channels[e].instruments.length;n++)this.modInsValues[e][n]=[],this.nextModInsValues[e][n]=[],t[e][n]=[]}let n=this.beat*u.partsPerBeat+this.part;for(let i=this.song.pitchChannelCount+this.song.noiseChannelCount;i<this.song.getChannelCount();i++)if(!this.song.channels[i].muted){let s;for(let a=this.bar;a>=0;a--)if(s=this.song.getPattern(i,a),null!=s){let o=s.instruments[0],r=this.song.channels[i].instruments[o],l=[],p=[],h=a==this.bar?n:this.findPartsInBar(a);for(const e of s.notes)if(e.start<=h&&(null==l[u.modCount-1-e.pitches[0]]||e.end>l[u.modCount-1-e.pitches[0]]))if(e.start==h&&(l[u.modCount-1-e.pitches[0]]=e.start,p[u.modCount-1-e.pitches[0]]=e.pins[0].size),e.end<=h)l[u.modCount-1-e.pitches[0]]=e.end,p[u.modCount-1-e.pitches[0]]=e.pins[e.pins.length-1].size;else{l[u.modCount-1-e.pitches[0]]=h;for(let t=0;t<e.pins.length;t++)if(e.pins[t].time+e.start>h){const n=e.pins[t].time-e.pins[t-1].time,i=h-e.start-e.pins[t-1].time,s=e.pins[t].size-e.pins[t-1].size;p[u.modCount-1-e.pitches[0]]=Math.round(e.pins[t-1].size+s*i/n),t=e.pins.length}}for(let n=0;n<u.modCount;n++)if(null!=l[n])if(u.modulators[r.modulators[n]].forSong){const t=r.modulators[n]==u.modulators.dictionary["song eq"].index;if(null==e[r.modulators[n]]||a*u.partsPerBeat*this.song.beatsPerBar+l[n]>e[r.modulators[n]]){if(t){let e=this.song;if(0==r.modFilterTypes[n])e.tmpEqFilterStart=e.eqSubFilters[p[n]];else{for(let t=0;t<u.filterMorphCount;t++)null!=e.tmpEqFilterStart&&e.tmpEqFilterStart==e.eqSubFilters[t]&&(e.tmpEqFilterStart=new ke,e.tmpEqFilterStart.fromJsonObject(e.eqSubFilters[t].toJsonObject()),t=u.filterMorphCount);null!=e.tmpEqFilterStart&&Math.floor((r.modFilterTypes[n]-1)/2)<e.tmpEqFilterStart.controlPointCount&&(r.modFilterTypes[n]%2?e.tmpEqFilterStart.controlPoints[Math.floor((r.modFilterTypes[n]-1)/2)].freq=p[n]:e.tmpEqFilterStart.controlPoints[Math.floor((r.modFilterTypes[n]-1)/2)].gain=p[n])}e.tmpEqFilterEnd=e.tmpEqFilterStart}this.setModValue(p[n],p[n],r.modChannels[n],r.modInstruments[n],r.modulators[n]),e[r.modulators[n]]=a*u.partsPerBeat*this.song.beatsPerBar+l[n]}}else{let e=[];if(r.modInstruments[n]==this.song.channels[r.modChannels[n]].instruments.length)for(let t=0;t<this.song.channels[r.modChannels[n]].instruments.length;t++)e.push(t);else if(r.modInstruments[n]>this.song.channels[r.modChannels[n]].instruments.length){const t=this.song.getPattern(r.modChannels[n],a);null!=t&&(e=t.instruments)}else e.push(r.modInstruments[n]);for(let i=0;i<e.length;i++){const s=r.modulators[n]==u.modulators.dictionary["eq filter"].index,o=r.modulators[n]==u.modulators.dictionary["note filter"].index;let h=r.modulators[n];if(s?h=u.modulators.length+(0|r.modFilterTypes[n]):o&&(h=u.modulators.length+1+2*u.filterMaxPoints+(0|r.modFilterTypes[n])),null==t[r.modChannels[n]][e[i]][h]||a*u.partsPerBeat*this.song.beatsPerBar+l[n]>t[r.modChannels[n]][e[i]][h]){if(s){let t=this.song.channels[r.modChannels[n]].instruments[e[i]];if(0==r.modFilterTypes[n])t.tmpEqFilterStart=t.eqSubFilters[p[n]];else{for(let e=0;e<u.filterMorphCount;e++)null!=t.tmpEqFilterStart&&t.tmpEqFilterStart==t.eqSubFilters[e]&&(t.tmpEqFilterStart=new ke,t.tmpEqFilterStart.fromJsonObject(t.eqSubFilters[e].toJsonObject()),e=u.filterMorphCount);null!=t.tmpEqFilterStart&&Math.floor((r.modFilterTypes[n]-1)/2)<t.tmpEqFilterStart.controlPointCount&&(r.modFilterTypes[n]%2?t.tmpEqFilterStart.controlPoints[Math.floor((r.modFilterTypes[n]-1)/2)].freq=p[n]:t.tmpEqFilterStart.controlPoints[Math.floor((r.modFilterTypes[n]-1)/2)].gain=p[n])}t.tmpEqFilterEnd=t.tmpEqFilterStart}else if(o){let t=this.song.channels[r.modChannels[n]].instruments[e[i]];if(0==r.modFilterTypes[n])t.tmpNoteFilterStart=t.noteSubFilters[p[n]];else{for(let e=0;e<u.filterMorphCount;e++)null!=t.tmpNoteFilterStart&&t.tmpNoteFilterStart==t.noteSubFilters[e]&&(t.tmpNoteFilterStart=new ke,t.tmpNoteFilterStart.fromJsonObject(t.noteSubFilters[e].toJsonObject()),e=u.filterMorphCount);null!=t.tmpNoteFilterStart&&Math.floor((r.modFilterTypes[n]-1)/2)<t.tmpNoteFilterStart.controlPointCount&&(r.modFilterTypes[n]%2?t.tmpNoteFilterStart.controlPoints[Math.floor((r.modFilterTypes[n]-1)/2)].freq=p[n]:t.tmpNoteFilterStart.controlPoints[Math.floor((r.modFilterTypes[n]-1)/2)].gain=p[n])}t.tmpNoteFilterEnd=t.tmpNoteFilterStart}else this.setModValue(p[n],p[n],r.modChannels[n],e[i],h);t[r.modChannels[n]][e[i]][h]=a*u.partsPerBeat*this.song.beatsPerBar+l[n]}}}}}}}determineInvalidModulators(e){if(null!=this.song)for(let t=0;t<u.modCount;t++){if(e.invalidModulators[t]=!0,-1==e.modChannels[t]){0!=e.modulators[t]&&(e.invalidModulators[t]=!1);continue}const n=this.song.channels[e.modChannels[t]];if(null==n)continue;let i=[];i=e.modInstruments[t]>=n.instruments.length?n.instruments:[n.instruments[e.modInstruments[t]]];for(let n=0;n<i.length;n++){const s=i[n];if(null==s)continue;const a=u.modulators[e.modulators[t]].name;15!=u.modulators[e.modulators[t]].associatedEffect&&!(s.effects&1<<u.modulators[e.modulators[t]].associatedEffect)||1!=s.type&&11!=s.type&&("fm slider 1"==a||"fm slider 2"==a||"fm slider 3"==a||"fm slider 4"==a||"fm feedback"==a)||11!=s.type&&("fm slider 5"==a||"fm slider 6"==a)||6!=s.type&&8!=s.type&&("pulse width"==a||"decimal offset"==a)||8!=s.type&&("dynamism"==a||"spread"==a||"saw shape"==a)||!s.getChord().arpeggiates&&("arp speed"==a||"reset arp"==a)||s.eqFilterType&&"eq filter"==a||!s.eqFilterType&&("eq filt cut"==a||"eq filt peak"==a)||"eq filter"==a&&Math.floor((e.modFilterTypes[t]+1)/2)>s.getLargestControlPointCount(!1)||s.noteFilterType&&"note filter"==a||!s.noteFilterType&&("note filt cut"==a||"note filt peak"==a)||"note filter"==a&&Math.floor((e.modFilterTypes[t]+1)/2)>s.getLargestControlPointCount(!0)||(e.invalidModulators[t]=!1,n=i.length)}}}static operatorAmplitudeCurve(e){return(Math.pow(16,e/15)-1)/15}get playing(){return this.isPlayingSong}get recording(){return this.isRecording}get playhead(){return this.playheadInternal}set playhead(e){if(null!=this.song){this.playheadInternal=Math.max(0,Math.min(this.song.barCount,e));let t=this.playheadInternal;this.bar=Math.floor(t),t=this.song.beatsPerBar*(t-this.bar),this.beat=Math.floor(t),t=u.partsPerBeat*(t-this.beat),this.part=Math.floor(t),t=u.ticksPerPart*(t-this.part),this.tick=Math.floor(t),this.tickSampleCountdown=0,this.isAtStartOfTick=!0,this.prevBar=null}}getSamplesPerBar(){if(null==this.song)throw new Error;return this.getSamplesPerTick()*u.ticksPerPart*u.partsPerBeat*this.song.beatsPerBar}getTicksIntoBar(){return(this.beat*u.partsPerBeat+this.part)*u.ticksPerPart+this.tick}getCurrentPart(){return this.beat*u.partsPerBeat+this.part}findPartsInBar(e){if(null==this.song)return 0;let t=u.partsPerBeat*this.song.beatsPerBar;for(let n=this.song.pitchChannelCount+this.song.noiseChannelCount;n<this.song.getChannelCount();n++){let i=this.song.getPattern(n,e);if(null!=i){let e=this.song.channels[n].instruments[i.instruments[0]];for(let n=0;n<u.modCount;n++)if(e.modulators[n]==u.modulators.dictionary["next bar"].index)for(const e of i.notes)e.pitches[0]==u.modCount-1-n&&t>e.start&&(t=e.start)}}return t}getTotalSamples(e,t,n){if(null==this.song)return-1;let i=e?0:this.song.loopStart,s=t?this.song.barCount:this.song.loopStart+this.song.loopLength,a=!1,o=!1,r=this.song.tempo;for(let e=this.song.getChannelCount()-1;e>=this.song.pitchChannelCount+this.song.noiseChannelCount;e--)for(let t=i;t<s;t++){let n=this.song.getPattern(e,t);if(null!=n){let t=this.song.channels[e].instruments[n.instruments[0]];for(let e=0;e<u.modCount;e++)t.modulators[e]==u.modulators.dictionary.tempo.index&&(a=!0),t.modulators[e]==u.modulators.dictionary["next bar"].index&&(o=!0)}}if(i>0){let e=null,t=0;for(let n=i-1;n>=0;n--){for(let i=this.song.getChannelCount()-1;i>=this.song.pitchChannelCount+this.song.noiseChannelCount;i--){let s=this.song.getPattern(i,n);if(null!=s){let a=s.instruments[0],o=this.song.channels[i].instruments[a],r=this.findPartsInBar(n);for(const n of s.notes)if(o.modulators[u.modCount-1-n.pitches[0]]==u.modulators.dictionary.tempo.index&&n.start<r&&(null==e||n.end>e))if(n.end<=r)e=n.end,t=n.pins[n.pins.length-1].size;else{e=r;for(let e=0;e<n.pins.length;e++)if(n.pins[e].time+n.start>r){const i=n.pins[e].time-n.pins[e-1].time,s=r-n.start-n.pins[e-1].time,a=n.pins[e].size-n.pins[e-1].size;t=Math.round(n.pins[e-1].size+a*s/i),e=n.pins.length}}}}null!=e&&(r=t+u.modulators.dictionary.tempo.convertRealFactor,n=-1)}}if(a||o){let e=i,t=!1,l=0;for(;!t;){let i=u.partsPerBeat*this.song.beatsPerBar,p=0;if(o&&(i=this.findPartsInBar(e)),a){let t=!1;for(let n=this.song.getChannelCount()-1;n>=this.song.pitchChannelCount+this.song.noiseChannelCount;n--)if(0==t){let s=this.song.getPattern(n,e);if(null!=s){let e=this.song.channels[n].instruments[s.instruments[0]];for(let n=0;n<u.modCount;n++)if(0==t&&e.modulators[n]==u.modulators.dictionary.tempo.index&&s.notes.find((e=>e.pitches[0]==u.modCount-1-n))){t=!0,s.notes.sort((function(e,t){return e.start==t.start?e.pitches[0]-t.pitches[0]:e.start-t.start}));for(const e of s.notes)if(e.pitches[0]==u.modCount-1-n&&(l+=Math.min(i-p,e.start-p)*u.ticksPerPart*this.getSamplesPerTickSpecificBPM(r),e.start<i))for(let t=1;t<e.pins.length;t++){if(e.pins[t-1].time+e.start<=i){const n=u.ticksPerPart*Math.min(i-(e.start+e.pins[t-1].time),e.pins[t].time-e.pins[t-1].time),s=e.pins[t-1].size+u.modulators.dictionary.tempo.convertRealFactor;let a=e.pins[t].size+u.modulators.dictionary.tempo.convertRealFactor;e.pins[t].time+e.start>i&&(a=e.pins[t-1].size+(e.pins[t].size-e.pins[t-1].size)*(i-(e.start+e.pins[t-1].time))/(e.pins[t].time-e.pins[t-1].time)+u.modulators.dictionary.tempo.convertRealFactor);let o=u.partsPerBeat*u.ticksPerPart/60;l+=a!=s?-this.samplesPerSecond*n*(Math.log(o*a*n)-Math.log(o*s*n))/(o*(s-a)):n*this.getSamplesPerTickSpecificBPM(a),r=a}p=Math.min(e.start+e.pins[t].time,i)}}}}}l+=(i-p)*u.ticksPerPart*this.getSamplesPerTickSpecificBPM(r),e++,0!=n&&e==this.song.loopStart+this.song.loopLength&&(e=this.song.loopStart,n>0&&n--),e>=s&&(t=!0)}return Math.ceil(l)}return this.getSamplesPerBar()*this.getTotalBars(e,t,n)}getTotalBars(e,t,n=this.loopRepeatCount){if(null==this.song)throw new Error;let i=this.song.loopLength*(n+1);return e&&(i+=this.song.loopStart),t&&(i+=this.song.barCount-(this.song.loopStart+this.song.loopLength)),i}constructor(e=null){this.samplesPerSecond=44100,this.song=null,this.preferLowerLatency=!1,this.anticipatePoorPerformance=!1,this.liveInputDuration=0,this.liveBassInputDuration=0,this.liveInputStarted=!1,this.liveBassInputStarted=!1,this.liveInputPitches=[],this.liveBassInputPitches=[],this.liveInputChannel=0,this.liveBassInputChannel=0,this.liveInputInstruments=[],this.liveBassInputInstruments=[],this.loopRepeatCount=-1,this.volume=1,this.oscRefreshEventTimer=0,this.oscEnabled=!0,this.enableMetronome=!1,this.countInMetronome=!1,this.renderingSong=!1,this.heldMods=[],this.wantToSkip=!1,this.playheadInternal=0,this.bar=0,this.prevBar=null,this.nextBar=null,this.beat=0,this.part=0,this.tick=0,this.isAtStartOfTick=!0,this.isAtEndOfTick=!0,this.tickSampleCountdown=0,this.modValues=[],this.modInsValues=[],this.nextModValues=[],this.nextModInsValues=[],this.isPlayingSong=!1,this.isRecording=!1,this.liveInputEndTime=0,this.browserAutomaticallyClearsAudioBuffer=!0,this.tempDrumSetControlPoint=new Fe,this.tempFrequencyResponse=new $,this.loopBarStart=-1,this.loopBarEnd=-1,this.channels=[],this.tonePool=new N,this.tempMatchedPitchTones=Array(u.maxChordSize).fill(null),this.startedMetronome=!1,this.metronomeSamplesRemaining=-1,this.metronomeAmplitude=0,this.metronomePrevAmplitude=0,this.metronomeFilter=0,this.limit=0,this.songEqFilterVolume=1,this.songEqFilterVolumeDelta=0,this.songEqFiltersL=[],this.songEqFiltersR=[],this.songEqFilterCount=0,this.initialSongEqFilterInput1L=0,this.initialSongEqFilterInput2L=0,this.initialSongEqFilterInput1R=0,this.initialSongEqFilterInput2R=0,this.tempMonoInstrumentSampleBuffer=null,this.audioCtx=null,this.scriptNode=null,this.audioProcessCallback=e=>{const t=e.outputBuffer,n=t.getChannelData(0),i=t.getChannelData(1);if(!this.browserAutomaticallyClearsAudioBuffer||0==n[0]&&0==i[0]&&0==n[t.length-1]&&0==i[t.length-1]||(this.browserAutomaticallyClearsAudioBuffer=!1),!this.browserAutomaticallyClearsAudioBuffer){const e=t.length;for(let t=0;t<e;t++)n[t]=0,i[t]=0}!this.isPlayingSong&&performance.now()>=this.liveInputEndTime?this.deactivateAudio():(this.synthesize(n,i,t.length,this.isPlayingSong),this.oscEnabled&&(this.oscRefreshEventTimer<=0?(B.raise("oscilloscopeUpdate",n,i),this.oscRefreshEventTimer=2):this.oscRefreshEventTimer--))},this.computeDelayBufferSizes(),null!=e&&this.setSong(e)}setSong(e){"string"==typeof e?this.song=new Te(e):e instanceof Te&&(this.song=e),this.prevBar=null}computeDelayBufferSizes(){this.panningDelayBufferSize=Ge.fittingPowerOfTwo(this.samplesPerSecond*u.panDelaySecondsMax),this.panningDelayBufferMask=this.panningDelayBufferSize-1,this.chorusDelayBufferSize=Ge.fittingPowerOfTwo(this.samplesPerSecond*u.chorusMaxDelay),this.chorusDelayBufferMask=this.chorusDelayBufferSize-1}activateAudio(){const e=this.anticipatePoorPerformance?this.preferLowerLatency?2048:4096:this.preferLowerLatency?512:2048;if(null==this.audioCtx||null==this.scriptNode||this.scriptNode.bufferSize!=e){null!=this.scriptNode&&this.deactivateAudio();const t=this.anticipatePoorPerformance?this.preferLowerLatency?"balanced":"playback":this.preferLowerLatency?"interactive":"balanced";this.audioCtx=this.audioCtx||new(window.AudioContext||window.webkitAudioContext)({latencyHint:t}),this.samplesPerSecond=this.audioCtx.sampleRate,this.scriptNode=this.audioCtx.createScriptProcessor?this.audioCtx.createScriptProcessor(e,0,2):this.audioCtx.createJavaScriptNode(e,0,2),this.scriptNode.onaudioprocess=this.audioProcessCallback,this.scriptNode.channelCountMode="explicit",this.scriptNode.channelInterpretation="speakers",this.scriptNode.connect(this.audioCtx.destination),this.computeDelayBufferSizes()}this.audioCtx.resume()}deactivateAudio(){null!=this.audioCtx&&null!=this.scriptNode&&(this.scriptNode.disconnect(this.audioCtx.destination),this.scriptNode=null,this.audioCtx.close&&this.audioCtx.close(),this.audioCtx=null)}maintainLiveInput(){this.activateAudio(),this.liveInputEndTime=performance.now()+1e4}play(){this.isPlayingSong||(this.initModFilters(this.song),this.computeLatestModValues(),this.activateAudio(),this.warmUpSynthesizer(this.song),this.isPlayingSong=!0)}pause(){if(this.isPlayingSong&&(this.isPlayingSong=!1,this.isRecording=!1,this.preferLowerLatency=!1,this.modValues=[],this.nextModValues=[],this.heldMods=[],null!=this.song)){this.song.inVolumeCap=0,this.song.outVolumeCap=0,this.song.tmpEqFilterStart=null,this.song.tmpEqFilterEnd=null;for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)this.modInsValues[e]=[],this.nextModInsValues[e]=[]}}startRecording(){this.preferLowerLatency=!0,this.isRecording=!0,this.play()}resetEffects(){if(this.limit=0,this.freeAllTones(),null!=this.song)for(const e of this.channels)for(const t of e.instruments)t.resetAllEffects()}setModValue(e,t,n,i,s){let a=e+u.modulators[s].convertRealFactor,o=t+u.modulators[s].convertRealFactor;return u.modulators[s].forSong?null!=this.modValues[s]&&this.modValues[s]==a&&this.nextModValues[s]==o||(this.modValues[s]=a,this.nextModValues[s]=o):null!=this.modInsValues[n][i][s]&&this.modInsValues[n][i][s]==a&&this.nextModInsValues[n][i][s]==o||(this.modInsValues[n][i][s]=a,this.nextModInsValues[n][i][s]=o),a}getModValue(e,t,n,i){if(u.modulators[e].forSong){if(null!=this.modValues[e]&&null!=this.nextModValues[e])return i?this.nextModValues[e]:this.modValues[e]}else if(null!=t&&null!=n&&null!=this.modInsValues[t][n][e]&&null!=this.nextModInsValues[t][n][e])return i?this.nextModInsValues[t][n][e]:this.modInsValues[t][n][e];return-1}isAnyModActive(e,t){for(let n=0;n<u.modulators.length;n++)if(null!=this.modValues&&null!=this.modValues[n]||null!=this.modInsValues&&null!=this.modInsValues[e]&&null!=this.modInsValues[e][t]&&null!=this.modInsValues[e][t][n])return!0;return!1}unsetMod(e,t,n){if(this.isModActive(e)||null!=t&&null!=n&&this.isModActive(e,t,n)){this.modValues[e]=null,this.nextModValues[e]=null;for(let i=0;i<this.heldMods.length;i++)null!=t&&null!=n?this.heldMods[i].channelIndex==t&&this.heldMods[i].instrumentIndex==n&&this.heldMods[i].setting==e&&this.heldMods.splice(i,1):this.heldMods[i].setting==e&&this.heldMods.splice(i,1);null!=t&&null!=n&&(this.modInsValues[t][n][e]=null,this.nextModInsValues[t][n][e]=null)}}isFilterModActive(e,t,n,i){var s;const a=this.song.channels[t].instruments[n];if(e){if(a.noteFilterType)return!1;if(null!=a.tmpNoteFilterEnd)return!0}else if(i){if(null!=(null===(s=null==this?void 0:this.song)||void 0===s?void 0:s.tmpEqFilterEnd))return!0}else{if(a.eqFilterType)return!1;if(null!=a.tmpEqFilterEnd)return!0}return!1}isModActive(e,t,n){return u.modulators[e].forSong?null!=this.modValues&&null!=this.modValues[e]:null!=t&&null!=n&&null!=this.modInsValues&&null!=this.modInsValues[t]&&null!=this.modInsValues[t][n]&&null!=this.modInsValues[t][n][e]}forceHoldMods(e,t,n,i){let s=!1;for(let a=0;a<this.heldMods.length;a++)this.heldMods[a].channelIndex==t&&this.heldMods[a].instrumentIndex==n&&this.heldMods[a].setting==i&&(this.heldMods[a].volume=e,this.heldMods[a].holdFor=24,s=!0);s||this.heldMods.push({volume:e,channelIndex:t,instrumentIndex:n,setting:i,holdFor:24})}snapToStart(){this.bar=0,this.resetEffects(),this.snapToBar()}goToBar(e){this.bar=e,this.resetEffects(),this.playheadInternal=this.bar}snapToBar(){this.playheadInternal=this.bar,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=0}jumpIntoLoop(){if(this.song&&(this.bar<this.song.loopStart||this.bar>=this.song.loopStart+this.song.loopLength)){const e=this.bar;this.bar=this.song.loopStart,this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}}goToNextBar(){if(!this.song)return;this.prevBar=this.bar;const e=this.bar;this.bar++,this.bar>=this.song.barCount&&(this.bar=0),this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}goToPrevBar(){if(!this.song)return;this.prevBar=null;const e=this.bar;this.bar--,(this.bar<0||this.bar>=this.song.barCount)&&(this.bar=this.song.barCount-1),this.playheadInternal+=this.bar-e,this.playing&&this.computeLatestModValues()}getNextBar(){let e=this.bar+1;return this.isRecording?e>=this.song.barCount&&(e=this.song.barCount-1):this.bar!=this.loopBarEnd||this.renderingSong?0!=this.loopRepeatCount&&e==Math.max(this.loopBarEnd+1,this.song.loopStart+this.song.loopLength)&&(e=this.song.loopStart):e=this.loopBarStart,e}skipBar(){if(!this.song)return;const e=this.getSamplesPerTick();this.prevBar=this.bar,this.loopBarEnd!=this.bar?this.bar++:this.bar=this.loopBarStart,this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=e,this.isAtStartOfTick=!0,0!=this.loopRepeatCount&&this.bar==Math.max(this.song.loopStart+this.song.loopLength,this.loopBarEnd)&&(this.bar=this.song.loopStart,-1!=this.loopBarStart&&(this.bar=this.loopBarStart),this.loopRepeatCount>0&&this.loopRepeatCount--)}computeSongState(e){if(null==this.song)return;const t=Math.ceil(e),n=this.samplesPerSecond;let i=1;if(this.song.eqFilterType){const e=this.song.eqFilter;null==this.song.eqSubFilters[1]&&(this.song.eqSubFilters[1]=new ke),this.song.eqSubFilters[1];let s,a=this.song.eqFilterSimpleCut,o=this.song.eqFilterSimplePeak;this.song.eqFilterSimpleCut,this.song.eqFilterSimplePeak,e.convertLegacySettingsForSynth(a,o,!0),s=e.controlPoints[0],s.toCoefficients(Ge.tempFilterStartCoefficients,n,1,1),this.songEqFiltersL.length<1&&(this.songEqFiltersL[0]=new U),this.songEqFiltersL[0].loadCoefficientsWithGradient(Ge.tempFilterStartCoefficients,Ge.tempFilterStartCoefficients,1/t,0==s.type),this.songEqFiltersR.length<1&&(this.songEqFiltersR[0]=new U),this.songEqFiltersR[0].loadCoefficientsWithGradient(Ge.tempFilterStartCoefficients,Ge.tempFilterStartCoefficients,1/t,0==s.type),i*=s.getVolumeCompensationMult(),this.songEqFilterCount=1,i=Math.min(3,i)}else{const e=null!=this.song.tmpEqFilterStart?this.song.tmpEqFilterStart:this.song.eqFilter;for(let s=0;s<e.controlPointCount;s++){let a=e.controlPoints[s],o=null!=this.song.tmpEqFilterEnd&&null!=this.song.tmpEqFilterEnd.controlPoints[s]?this.song.tmpEqFilterEnd.controlPoints[s]:e.controlPoints[s];a.type!=o.type&&(a=o),a.toCoefficients(Ge.tempFilterStartCoefficients,n,1,1),o.toCoefficients(Ge.tempFilterEndCoefficients,n,1,1),this.songEqFiltersL.length<=s&&(this.songEqFiltersL[s]=new U),this.songEqFiltersL[s].loadCoefficientsWithGradient(Ge.tempFilterStartCoefficients,Ge.tempFilterEndCoefficients,1/t,0==a.type),this.songEqFiltersR.length<=s&&(this.songEqFiltersR[s]=new U),this.songEqFiltersR[s].loadCoefficientsWithGradient(Ge.tempFilterStartCoefficients,Ge.tempFilterEndCoefficients,1/t,0==a.type),i*=a.getVolumeCompensationMult()}this.songEqFilterCount=e.controlPointCount,i=Math.min(3,i)}let s=i,a=i;this.songEqFilterVolume=s,this.songEqFilterVolumeDelta=(a-s)/t}synthesize(e,t,n,i=!0){if(null==this.song){for(let i=0;i<n;i++)e[i]=0,t[i]=0;return void this.deactivateAudio()}const s=e.slice(),a=t.slice(),o=this.song;this.song.inVolumeCap=0,this.song.outVolumeCap=0;let r=this.getSamplesPerTick(),l=!1;(this.tickSampleCountdown<=0||this.tickSampleCountdown>r)&&(this.tickSampleCountdown=r,this.isAtStartOfTick=!0),i&&(this.beat>=o.beatsPerBar&&(this.beat=0,this.part=0,this.tick=0,this.tickSampleCountdown=r,this.isAtStartOfTick=!0,this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--),this.bar>=o.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(l=!0,this.pause()))),this.syncSongState(),(null==this.tempMonoInstrumentSampleBuffer||this.tempMonoInstrumentSampleBuffer.length<n)&&(this.tempMonoInstrumentSampleBuffer=new Float32Array(n));const p=+this.volume,h=1-Math.pow(.5,this.song.limitDecay/this.samplesPerSecond),c=1-Math.pow(.5,this.song.limitRise/this.samplesPerSecond);let f=+this.limit,d=[],m=-1,v=0;for(;v<n&&!l;){this.nextBar=this.getNextBar(),this.nextBar>=o.barCount&&(this.nextBar=null);const y=n-v,g=Math.ceil(this.tickSampleCountdown),b=Math.min(g,y),S=v+b;if(this.isPlayingSong||this.renderingSong){for(let e=o.pitchChannelCount+o.noiseChannelCount;e<o.getChannelCount();e++){const t=o.channels[e],n=this.channels[e];this.determineCurrentActiveTones(o,e,r,i);for(let i=0;i<t.instruments.length;i++){const t=n.instruments[i];for(let n=0;n<t.activeModTones.count();n++){const i=t.activeModTones.get(n),s=o.channels[e].instruments[i.instrumentIndex];let a=u.modCount-1-i.pitches[0];(s.modulators[a]==u.modulators.dictionary["note filter"].index||s.modulators[a]==u.modulators.dictionary["eq filter"].index||s.modulators[a]==u.modulators.dictionary["song eq"].index)&&null!=s.modFilterTypes[a]&&s.modFilterTypes[a]>0||this.playModTone(o,e,r,v,b,i,!1,!1)}}}for(let e=o.pitchChannelCount+o.noiseChannelCount;e<o.getChannelCount();e++){const t=o.channels[e],n=this.channels[e];for(let i=0;i<t.instruments.length;i++){const t=n.instruments[i];for(let n=0;n<t.activeModTones.count();n++){const i=t.activeModTones.get(n),s=o.channels[e].instruments[i.instrumentIndex];let a=u.modCount-1-i.pitches[0];(s.modulators[a]==u.modulators.dictionary["note filter"].index||s.modulators[a]==u.modulators.dictionary["eq filter"].index||s.modulators[a]==u.modulators.dictionary["song eq"].index)&&null!=s.modFilterTypes[a]&&s.modFilterTypes[a]>0&&this.playModTone(o,e,r,v,b,i,!1,!1)}}}}if(this.wantToSkip){let e=d.includes(this.bar);if(e&&v==m)return void this.pause();-1==m&&(m=v),e||d.push(this.bar),this.wantToSkip=!1,this.skipBar();continue}this.computeSongState(r);for(let n=0;n<o.pitchChannelCount+o.noiseChannelCount;n++){const l=o.channels[n],p=this.channels[n];this.isAtStartOfTick&&(this.determineCurrentActiveTones(o,n,r,i&&!this.countInMetronome),this.determineLiveInputTones(o,n,r));for(let i=0;i<l.instruments.length;i++){const h=l.instruments[i],c=p.instruments[i];if(this.isAtStartOfTick){let e=c.activeTones.count()+c.liveInputTones.count();for(let t=0;t<c.releasedTones.count();t++){const i=c.releasedTones.get(t);if(i.ticksSinceReleased>=Math.abs(h.getFadeOutTicks())){this.freeReleasedTone(c,t),t--;continue}const s=e>=u.maximumTonesPerChannel;this.computeTone(o,n,r,i,!0,s),e++}c.awake&&(c.computed||c.compute(this,h,r,Math.ceil(r),null,n,i),c.computed=!1,c.envelopeComputer.clearEnvelopes())}for(let e=0;e<c.activeTones.count();e++){const t=c.activeTones.get(e);this.playTone(n,v,b,t)}for(let e=0;e<c.liveInputTones.count();e++){const t=c.liveInputTones.get(e);this.playTone(n,v,b,t)}for(let e=0;e<c.releasedTones.count();e++){const t=c.releasedTones.get(e);this.playTone(n,v,b,t)}c.awake&&(h.advancedSettings.affectedBySongEq?Ge.effectsSynth(this,e,t,v,b,c.effectsComputer):Ge.effectsSynth(this,s,a,v,b,c.effectsComputer));const f=this.tickSampleCountdown,d=1-f/r,m=1-(f-b)/r,y=(this.beat*u.partsPerBeat+this.part)*u.ticksPerPart+this.tick,g=y/u.ticksPerPart,S=(y+1)/u.ticksPerPart,w=g+(S-g)*d,x=g+(S-g)*m;let M=h.vibratoSpeed;c.vibratoTime=c.nextVibratoTime,this.isModActive(u.modulators.dictionary["vibrato speed"].index,n,i)&&(M=this.getModValue(u.modulators.dictionary["vibrato speed"].index,n,i)),0==M?(c.vibratoTime=0,c.nextVibratoTime=0):c.nextVibratoTime+=.1*M*(x-w)}}if(this.enableMetronome||this.countInMetronome)if(0==this.part){if(!this.startedMetronome){const e=o.beatsPerBar>4&&o.beatsPerBar%2==0&&this.beat==o.beatsPerBar/2,t=0==this.beat?8:e?6:4,n=0==this.beat?1600:e?1200:800,i=0==this.beat?.06:e?.05:.04,s=this.samplesPerSecond/n,a=2*Math.PI/s;this.metronomeSamplesRemaining=Math.floor(s*t),this.metronomeFilter=2*Math.cos(a),this.metronomeAmplitude=i*Math.sin(a),this.metronomePrevAmplitude=0,this.startedMetronome=!0}if(this.metronomeSamplesRemaining>0){const e=Math.min(S,v+this.metronomeSamplesRemaining);this.metronomeSamplesRemaining-=e-v;for(let t=v;t<e;t++){s[t]+=this.metronomeAmplitude,a[t]+=this.metronomeAmplitude;const e=this.metronomeFilter*this.metronomeAmplitude-this.metronomePrevAmplitude;this.metronomePrevAmplitude=this.metronomeAmplitude,this.metronomeAmplitude=e}}}else this.startedMetronome=!1;for(let n=v;n<S;n++){{let i=this.songEqFiltersL,o=this.songEqFiltersR;const r=0|this.songEqFilterCount;let l=+this.initialSongEqFilterInput1L,p=+this.initialSongEqFilterInput2L,h=+this.initialSongEqFilterInput1R,u=+this.initialSongEqFilterInput2R;const c=Ge.applyFilters;let f=+this.songEqFilterVolume;const d=+this.songEqFilterVolumeDelta,m=e[n];let v=m;v=c(v,l,p,r,i),p=l,l=m,v*=f,e[n]=v;const y=t[n];let g=y;g=c(g,h,u,r,o),u=h,h=y,g*=f,t[n]=g,f+=d,this.sanitizeFilters(i),l<100&&p<100||(l=0,p=0),Math.abs(l)<ee&&(l=0),Math.abs(p)<ee&&(p=0),this.initialSongEqFilterInput1L=l,this.initialSongEqFilterInput2L=p,this.sanitizeFilters(o),h<100&&u<100||(h=0,u=0),Math.abs(h)<ee&&(h=0),Math.abs(u)<ee&&(u=0),this.initialSongEqFilterInput1R=h,this.initialSongEqFilterInput2R=u,e[n]+=s[n],t[n]+=a[n]}const i=e[n]*o.masterGain*o.masterGain,r=t[n]*o.masterGain*o.masterGain,l=i<0?-i:i,u=r<0?-r:r,d=l>u?l:u;this.song.inVolumeCap=this.song.inVolumeCap>d?this.song.inVolumeCap:d;const m=+(d>o.compressionThreshold)+ +(d>o.limitThreshold),v=+(0==m)*((.8*(d+1-o.compressionThreshold)+.25)*o.compressionRatio+1.05*(1-o.compressionRatio))+1.05*+(1==m)+ +(2==m)*(1.05*((d+1-o.limitThreshold)*o.limitRatio+(1-o.limitThreshold)));f+=(v-f)*(f<v?c:h);const y=p/(f>=1?1.05*f:.8*f+.25);e[n]=i*y,t[n]=r*y,this.song.outVolumeCap=this.song.outVolumeCap>d*y?this.song.outVolumeCap:d*y}if(v+=b,this.isAtStartOfTick=!1,this.tickSampleCountdown-=b,this.tickSampleCountdown<=0){this.isAtStartOfTick=!0;for(const e of this.channels)for(const t of e.instruments){for(let e=0;e<t.releasedTones.count();e++){const n=t.releasedTones.get(e);n.isOnLastTick?(this.freeReleasedTone(t,e),e--):n.ticksSinceReleased++}t.deactivateAfterThisTick()&&t.deactivate(),t.tonesAddedInThisTick=!1}const e=this.getTicksIntoBar(),t=r/this.samplesPerSecond,n=this.getCurrentPart();for(let i=0;i<this.song.pitchChannelCount+this.song.noiseChannelCount;i++)for(let s=0;s<this.song.channels[i].instruments.length;s++){let a=this.song.channels[i].instruments[s],o=this.channels[i].instruments[s];const r=o.envelopeComputer,l=[];for(let e=0;e<u.maxEnvelopeCount;e++)l[e]=0;for(let e=0;e<a.envelopeCount;e++){let t=a.envelopeSpeed,n=a.envelopes[e].perEnvelopeSpeed;this.isModActive(u.modulators.dictionary["individual envelope speed"].index,i,s)&&null!=a.envelopes[e].tempEnvelopeSpeed&&(n=a.envelopes[e].tempEnvelopeSpeed),this.isModActive(u.modulators.dictionary["envelope speed"].index,i,s)?(t=Math.max(0,Math.min(u.arpSpeedScale.length-1,this.getModValue(u.modulators.dictionary["envelope speed"].index,i,s,!1))),Number.isInteger(t)?o.envelopeTime[e]+=u.arpSpeedScale[t]*n:o.envelopeTime[e]+=((1-t%1)*u.arpSpeedScale[Math.floor(t)]+t%1*u.arpSpeedScale[Math.ceil(t)])*n):o.envelopeTime[e]+=u.arpSpeedScale[t]*n}if(o.activeTones.count()>0){const p=o.activeTones.get(0);r.computeEnvelopes(a,n,o.envelopeTime,e,t,p,l,o,this,i,s)}const p=r.envelopeStarts[48];let h=a.arpeggioSpeed;this.isModActive(u.modulators.dictionary["arp speed"].index,i,s)?(h=te(0,u.arpSpeedScale.length,p*this.getModValue(u.modulators.dictionary["arp speed"].index,i,s,!1)),Number.isInteger(h)?o.arpTime+=u.arpSpeedScale[h]:o.arpTime+=(1-h%1)*u.arpSpeedScale[Math.floor(h)]+h%1*u.arpSpeedScale[Math.ceil(h)]):(h=te(0,u.arpSpeedScale.length,p*h),Number.isInteger(h)?o.arpTime+=u.arpSpeedScale[h]:o.arpTime+=(1-h%1)*u.arpSpeedScale[Math.floor(h)]+h%1*u.arpSpeedScale[Math.ceil(h)]),r.clearEnvelopes()}for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)for(let t=0;t<this.song.channels[e].instruments.length;t++){let n=this.song.channels[e].instruments[t];null!=n.tmpEqFilterEnd?n.tmpEqFilterStart=n.tmpEqFilterEnd:n.tmpEqFilterStart=n.eqFilter,null!=n.tmpNoteFilterEnd?n.tmpNoteFilterStart=n.tmpNoteFilterEnd:n.tmpNoteFilterStart=n.noteFilter}if(null!=o.tmpEqFilterEnd?o.tmpEqFilterStart=o.tmpEqFilterEnd:o.tmpEqFilterStart=o.eqFilter,this.tick++,this.tickSampleCountdown+=r,this.tick==u.ticksPerPart){this.tick=0,this.part++,this.liveInputDuration--,this.liveBassInputDuration--;for(let e=0;e<this.heldMods.length;e++)this.heldMods[e].holdFor--,this.heldMods[e].holdFor<=0&&this.heldMods.splice(e,1);this.part==u.partsPerBeat&&(this.part=0,i&&(this.beat++,this.beat==o.beatsPerBar&&(this.beat=0,this.countInMetronome?this.countInMetronome=!1:(this.prevBar=this.bar,this.bar=this.getNextBar(),this.bar<=this.prevBar&&this.loopRepeatCount>0&&this.loopRepeatCount--,this.bar>=o.barCount&&(this.bar=0,-1!=this.loopRepeatCount&&(l=!0,this.resetEffects(),this.pause()))))))}}for(let e=0;e<u.modulators.length;e++)null!=this.nextModValues&&null!=this.nextModValues[e]&&(this.modValues[e]=this.nextModValues[e]);this.isModActive(u.modulators.dictionary.tempo.index)&&(r=this.getSamplesPerTick(),this.tickSampleCountdown=Math.min(this.tickSampleCountdown,r));for(let e=0;e<this.song.pitchChannelCount+this.song.noiseChannelCount;e++)for(let t=0;t<this.channels[e].instruments.length;t++){const n=this.channels[e].instruments[t],i=this.song.channels[e].instruments[t];n.nextVibratoTime=n.nextVibratoTime%(u.vibratoTypes[i.vibratoType].period/(u.ticksPerPart*r/this.samplesPerSecond)),n.arpTime=n.arpTime%(2520*u.ticksPerArpeggio);for(let e=0;e<i.envelopeCount;e++)n.envelopeTime[e]=n.envelopeTime[e]%(u.partsPerBeat*u.ticksPerPart*this.song.beatsPerBar)}const w=this.song.getMaxInstrumentsPerChannel();for(let e=0;e<u.modulators.length;e++)for(let t=0;t<this.song.pitchChannelCount+this.song.noiseChannelCount;t++)for(let n=0;n<w;n++)null!=this.nextModInsValues&&null!=this.nextModInsValues[t]&&null!=this.nextModInsValues[t][n]&&null!=this.nextModInsValues[t][n][e]&&(this.modInsValues[t][n][e]=this.nextModInsValues[t][n][e])}(!Number.isFinite(f)||Math.abs(f)<ee)&&(f=0),this.limit=f,i&&!this.countInMetronome&&(this.playheadInternal=(((this.tick+1-this.tickSampleCountdown/r)/2+this.part)/u.partsPerBeat+this.beat)/o.beatsPerBar+this.bar)}freeTone(e){this.tonePool.pushBack(e)}newTone(){if(this.tonePool.count()>0){const e=this.tonePool.popBack();return e.freshlyAllocated=!0,e}return new Ce}releaseTone(e,t){e.releasedTones.pushFront(t),t.atNoteStart=!1,t.passedEndOfNote=!0}freeReleasedTone(e,t){this.freeTone(e.releasedTones.get(t)),e.releasedTones.remove(t)}freeAllTones(){for(const e of this.channels)for(const t of e.instruments){for(;t.activeTones.count()>0;)this.freeTone(t.activeTones.popBack());for(;t.activeModTones.count()>0;)this.freeTone(t.activeModTones.popBack());for(;t.releasedTones.count()>0;)this.freeTone(t.releasedTones.popBack());for(;t.liveInputTones.count()>0;)this.freeTone(t.liveInputTones.popBack())}}determineLiveInputTones(e,t,n){const i=e.channels[t],s=this.channels[t],a=this.liveInputPitches,o=this.liveBassInputPitches;(this.liveInputPitches.length>0||this.liveBassInputPitches.length>0)&&this.computeLatestModValues();for(let r=0;r<i.instruments.length;r++){const l=s.instruments[r],p=l.liveInputTones;let h=0;if(this.liveInputDuration>0&&t==this.liveInputChannel&&a.length>0&&-1!=this.liveInputInstruments.indexOf(r)){const s=i.instruments[r];if(s.getChord().singleTone){let i;p.count()<=h?(i=this.newTone(),p.pushBack(i)):!s.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(l,p.get(h)),i=this.newTone(),p.set(h,i)):i=p.get(h),h++;for(let e=0;e<a.length;e++)i.pitches[e]=a[e];i.pitchCount=a.length,i.chordSize=1,i.instrumentIndex=r,i.note=i.prevNote=i.nextNote=null,i.atNoteStart=this.liveInputStarted,i.forceContinueAtStart=!1,i.forceContinueAtEnd=!1,this.computeTone(e,t,n,i,!1,!1)}else{this.moveTonesIntoOrderedTempMatchedList(p,a);for(let i=0;i<a.length;i++){let s;null!=this.tempMatchedPitchTones[h]?(s=this.tempMatchedPitchTones[h],this.tempMatchedPitchTones[h]=null,1==s.pitchCount&&s.pitches[0]==a[i]||(this.releaseTone(l,s),s=this.newTone()),p.pushBack(s)):(s=this.newTone(),p.pushBack(s)),h++,s.pitches[0]=a[i],s.pitchCount=1,s.chordSize=a.length,s.instrumentIndex=r,s.note=s.prevNote=s.nextNote=null,s.atNoteStart=this.liveInputStarted,s.forceContinueAtStart=!1,s.forceContinueAtEnd=!1,this.computeTone(e,t,n,s,!1,!1)}}}if(this.liveBassInputDuration>0&&t==this.liveBassInputChannel&&o.length>0&&-1!=this.liveBassInputInstruments.indexOf(r)){const s=i.instruments[r];if(s.getChord().singleTone){let i;p.count()<=h?(i=this.newTone(),p.pushBack(i)):!s.getTransition().isSeamless&&this.liveInputStarted?(this.releaseTone(l,p.get(h)),i=this.newTone(),p.set(h,i)):i=p.get(h),h++;for(let e=0;e<o.length;e++)i.pitches[e]=o[e];i.pitchCount=o.length,i.chordSize=1,i.instrumentIndex=r,i.note=i.prevNote=i.nextNote=null,i.atNoteStart=this.liveBassInputStarted,i.forceContinueAtStart=!1,i.forceContinueAtEnd=!1,this.computeTone(e,t,n,i,!1,!1)}else{this.moveTonesIntoOrderedTempMatchedList(p,o);for(let i=0;i<o.length;i++){let s;null!=this.tempMatchedPitchTones[h]?(s=this.tempMatchedPitchTones[h],this.tempMatchedPitchTones[h]=null,1==s.pitchCount&&s.pitches[0]==o[i]||(this.releaseTone(l,s),s=this.newTone()),p.pushBack(s)):(s=this.newTone(),p.pushBack(s)),h++,s.pitches[0]=o[i],s.pitchCount=1,s.chordSize=o.length,s.instrumentIndex=r,s.note=s.prevNote=s.nextNote=null,s.atNoteStart=this.liveBassInputStarted,s.forceContinueAtStart=!1,s.forceContinueAtEnd=!1,this.computeTone(e,t,n,s,!1,!1)}}}for(;p.count()>h;)this.releaseTone(l,p.popBack());this.clearTempMatchedPitchTones(h,l)}this.liveInputStarted=!1,this.liveBassInputStarted=!1}adjacentPatternHasCompatibleInstrumentTransition(e,t,n,i,s,a,o,r,l,p){if(e.patternInstruments&&-1==i.instruments.indexOf(s)){if(n.instruments.length>1||i.instruments.length>1)return null;const e=t.instruments[i.instruments[0]];if(p)return e.getChord();const s=e.getTransition();return a.includeAdjacentPatterns&&s.includeAdjacentPatterns&&s.slides==a.slides?e.getChord():null}return p||a.includeAdjacentPatterns?o:null}static adjacentNotesHaveMatchingPitches(e,t){if(e.pitches.length!=t.pitches.length)return!1;const n=e.pins[e.pins.length-1].interval;for(const i of e.pitches)if(-1==t.pitches.indexOf(i+n))return!1;return!0}moveTonesIntoOrderedTempMatchedList(e,t){for(let n=0;n<e.count();n++){const i=e.get(n),s=i.pitches[0]+i.lastInterval;for(let a=0;a<t.length;a++)if(t[a]==s){this.tempMatchedPitchTones[a]=i,e.remove(n),n--;break}}for(;e.count()>0;){const t=e.popFront();for(let e=0;e<this.tempMatchedPitchTones.length;e++)if(null==this.tempMatchedPitchTones[e]){this.tempMatchedPitchTones[e]=t;break}}}determineCurrentActiveTones(e,t,n,i){const s=e.channels[t],a=this.channels[t],o=e.getPattern(t,this.bar),r=this.getCurrentPart(),l=this.tick+u.ticksPerPart*r;if(i&&e.getChannelIsMod(t)){let n=[],i=[],p=[],h=u.modCount;for(;h--;)n.push(null),i.push(null),p.push(null);if(null!=o&&!s.muted)for(let e=0;e<o.notes.length;e++)o.notes[e].end<=r?(null==i[o.notes[e].pitches[0]]||o.notes[e].end>i[o.notes[e].pitches[0]].start)&&(i[o.notes[e].pitches[0]]=o.notes[e]):o.notes[e].start<=r&&o.notes[e].end>r?n[o.notes[e].pitches[0]]=o.notes[e]:o.notes[e].start>r&&(null==p[o.notes[e].pitches[0]]||o.notes[e].start<p[o.notes[e].pitches[0]].start)&&(p[o.notes[e].pitches[0]]=o.notes[e]);let c=0;const f=e.patternInstruments&&null!=o?o.instruments[0]:0,d=a.instruments[f],m=d.activeModTones;for(let e=0;e<u.modCount;e++){if(null!=n[e]&&(null!=i[e]&&i[e].end!=n[e].start&&(i[e]=null),null!=p[e]&&p[e].start!=n[e].end&&(p[e]=null)),null!=a.singleSeamlessInstrument&&a.singleSeamlessInstrument!=f&&a.singleSeamlessInstrument<a.instruments.length){const e=a.instruments[a.singleSeamlessInstrument],t=a.instruments[f];for(;e.activeModTones.count()>0;)t.activeModTones.pushFront(e.activeModTones.popBack())}if(a.singleSeamlessInstrument=f,null!=n[e]){let t=i[e],s=p[e],a=!1,o=!1;const r=u.ticksPerPart*n[e].start==l&&this.isAtStartOfTick;let h;if(m.count()<=c)h=this.newTone(),m.pushBack(h);else if(r&&null==t){const e=m.get(c);e.isOnLastTick?this.freeTone(e):this.releaseTone(d,e),h=this.newTone(),m.set(c,h)}else h=m.get(c);c++;for(let t=0;t<n[e].pitches.length;t++)h.pitches[t]=n[e].pitches[t];h.pitchCount=n[e].pitches.length,h.chordSize=1,h.instrumentIndex=f,h.note=n[e],h.noteStartPart=n[e].start,h.noteEndPart=n[e].end,h.prevNote=t,h.nextNote=s,h.prevNotePitchIndex=0,h.nextNotePitchIndex=0,h.atNoteStart=r,h.passedEndOfNote=!1,h.forceContinueAtStart=a,h.forceContinueAtEnd=o}}for(;m.count()>c;){const n=m.popBack(),i=e.channels[t];if(n.instrumentIndex<i.instruments.length&&!n.isOnLastTick){const e=this.channels[t].instruments[n.instrumentIndex];this.releaseTone(e,n)}else this.freeTone(n)}}else if(!e.getChannelIsMod(t)){let p=null,h=null,c=null;if(i&&null!=o&&!s.muted&&(!this.isRecording||this.liveInputChannel!=t)){for(let e=0;e<o.notes.length;e++)if(o.notes[e].end<=r)h=o.notes[e];else if(o.notes[e].start<=r&&o.notes[e].end>r)p=o.notes[e];else if(o.notes[e].start>r){c=o.notes[e];break}null!=p&&(null!=h&&h.end!=p.start&&(h=null),null!=c&&c.start!=p.end&&(c=null))}if(null!=o&&(!e.layeredInstruments||1==s.instruments.length||e.patternInstruments&&1==o.instruments.length)){const t=e.patternInstruments?o.instruments[0]:0;if(null!=a.singleSeamlessInstrument&&a.singleSeamlessInstrument!=t&&a.singleSeamlessInstrument<a.instruments.length){const e=a.instruments[a.singleSeamlessInstrument],n=a.instruments[t];for(;e.activeTones.count()>0;)n.activeTones.pushFront(e.activeTones.popBack())}a.singleSeamlessInstrument=t}else a.singleSeamlessInstrument=null;for(let i=0;i<s.instruments.length;i++){const f=a.instruments[i],d=f.activeTones;let m=0;if(null!=p&&(!e.patternInstruments||-1!=o.instruments.indexOf(i))){const a=s.instruments[i];let v=h,y=c;const g=u.partsPerBeat*e.beatsPerBar,b=a.getTransition(),S=a.getChord();let w=!1,x=!1,M=0,F=0;if(0==p.start){let n=null==this.prevBar?null:e.getPattern(t,this.prevBar);if(null!=n){const t=n.notes.length<=0?null:n.notes[n.notes.length-1];if(null!=t&&t.end==g){const a=p.continuesLastPattern&&Ge.adjacentNotesHaveMatchingPitches(t,p),r=this.adjacentPatternHasCompatibleInstrumentTransition(e,s,o,n,i,b,S,p,t,a);null!=r&&(v=t,M=r.singleTone?1:v.pitches.length,w=a)}}}else null!=v&&(M=S.singleTone?1:v.pitches.length);if(p.end==g){let n=null==this.nextBar?null:e.getPattern(t,this.nextBar);if(null!=n){const t=n.notes.length<=0?null:n.notes[0];if(null!=t&&0==t.start){const a=t.continuesLastPattern&&Ge.adjacentNotesHaveMatchingPitches(p,t),r=this.adjacentPatternHasCompatibleInstrumentTransition(e,s,o,n,i,b,S,p,t,a);null!=r&&(y=t,F=r.singleTone?1:y.pitches.length,x=a)}}}else null!=y&&(F=S.singleTone?1:y.pitches.length);if(S.singleTone){const s=u.ticksPerPart*p.start==l;let o;if(d.count()<=m)o=this.newTone(),d.pushBack(o);else if(!s||(b.isSeamless||a.clicklessTransition||w)&&null!=v)o=d.get(m);else{const e=d.get(m);e.isOnLastTick?this.freeTone(e):this.releaseTone(f,e),o=this.newTone(),d.set(m,o)}m++;for(let e=0;e<p.pitches.length;e++)o.pitches[e]=p.pitches[e];o.pitchCount=p.pitches.length,o.chordSize=1,o.instrumentIndex=i,o.note=p,o.noteStartPart=p.start,o.noteEndPart=p.end,o.prevNote=v,o.nextNote=y,o.prevNotePitchIndex=0,o.nextNotePitchIndex=0,o.atNoteStart=s,o.passedEndOfNote=!1,o.forceContinueAtStart=w,o.forceContinueAtEnd=x,this.computeTone(e,t,n,o,!1,!1)}else{const s=a.getTransition();(s.isSeamless&&!s.slides&&0==S.strumParts||w)&&u.ticksPerPart*p.start==l&&null!=v&&this.moveTonesIntoOrderedTempMatchedList(d,p.pitches);let o=0;for(let a=0;a<p.pitches.length;a++){let h=M>a?v:null,c=p,g=F>a?y:null,b=c.start+o,k=!1;if(b>r){if(!(d.count()>a&&(s.isSeamless||w)&&null!=h))break;g=c,c=h,h=null,b=c.start+o,k=!0}let I=c.end;(s.isSeamless||w)&&null!=g&&(I=Math.min(u.partsPerBeat*this.song.beatsPerBar,I+o)),(s.continues||w)&&null!=h||(o+=S.strumParts);const q=u.ticksPerPart*b==l;let E;if(null!=this.tempMatchedPitchTones[m])E=this.tempMatchedPitchTones[m],this.tempMatchedPitchTones[m]=null,d.pushBack(E);else if(d.count()<=m)E=this.newTone(),d.pushBack(E);else if(!q||(s.isSeamless||w)&&null!=h)E=d.get(m);else{const e=d.get(m);e.isOnLastTick?this.freeTone(e):this.releaseTone(f,e),E=this.newTone(),d.set(m,E)}m++,E.pitches[0]=c.pitches[a],E.pitchCount=1,E.chordSize=c.pitches.length,E.instrumentIndex=i,E.note=c,E.noteStartPart=b,E.noteEndPart=I,E.prevNote=h,E.nextNote=g,E.prevNotePitchIndex=a,E.nextNotePitchIndex=a,E.atNoteStart=q,E.passedEndOfNote=k,E.forceContinueAtStart=w&&null!=h,E.forceContinueAtEnd=x&&null!=g,this.computeTone(e,t,n,E,!1,!1)}}(b.continues&&d.count()<=0||p.pitches.length<=0)&&f.envelopeComputer.reset()}for(;d.count()>m;){const n=d.popBack(),i=e.channels[t];if(n.instrumentIndex<i.instruments.length&&!n.isOnLastTick){const e=a.instruments[n.instrumentIndex];this.releaseTone(e,n)}else this.freeTone(n)}this.clearTempMatchedPitchTones(m,f)}}}clearTempMatchedPitchTones(e,t){for(let n=e;n<this.tempMatchedPitchTones.length;n++){const e=this.tempMatchedPitchTones[n];null!=e&&(e.isOnLastTick?this.freeTone(e):this.releaseTone(t,e),this.tempMatchedPitchTones[n]=null)}}playTone(e,t,n,i){const s=this.channels[e].instruments[i.instrumentIndex];null!=s.synthesizer&&s.synthesizer(this,t,n,i,s),i.envelopeComputer.clearEnvelopes(),s.envelopeComputer.clearEnvelopes()}playModTone(e,t,n,i,s,a,o,r){const l=e.channels[t].instruments[a.instrumentIndex];if(null!=a.note){const e=this.getTicksIntoBar(),t=e/u.ticksPerPart,o=(e+1)/u.ticksPerPart,r=this.tickSampleCountdown,p=t+(o-t)*(1-r/n),h=t+(o-t)*(1-(r-s)/n),c=u.ticksPerPart*p,f=u.ticksPerPart*h,d=a.note.getEndPinIndex(this.getCurrentPart()),m=a.note.pins[d-1],v=a.note.pins[d],y=(a.note.start+m.time)*u.ticksPerPart,g=(a.note.start+v.time)*u.ticksPerPart,b=(c-y)/(g-y),S=(f-y)/(g-y);a.expression=m.size+(v.size-m.size)*b,a.expressionDelta=m.size+(v.size-m.size)*S-a.expression,Ge.modSynth(this,i,s,a,l)}}static computeChordExpression(e){return 1/(.25*(e-1)+1)}computeTone(e,t,n,i,s,a){const o=Math.ceil(n),r=e.channels[t],l=this.channels[t],p=r.instruments[i.instrumentIndex],h=l.instruments[i.instrumentIndex];h.awake=!0,h.tonesAddedInThisTick=!0,h.computed||h.compute(this,p,n,o,i,t,i.instrumentIndex);const c=p.getTransition(),f=p.getChord(),d=f.singleTone?1:Ge.computeChordExpression(i.chordSize),v=e.getChannelIsNoise(t),y=v?u.noiseInterval:1,g=u.ticksPerPart*n/this.samplesPerSecond,b=1/this.samplesPerSecond,w=1/u.partsPerBeat,x=this.getTicksIntoBar(),M=x/u.ticksPerPart,E=(x+1)/u.ticksPerPart,P=this.getCurrentPart();let T=1;i.specialIntervalExpressionMult=1;let D=a,z=0,C=0,H=1,O=1,L=d,G=d,W=16,A=u.keys[e.key].basePitch+u.pitchesPerOctave*e.octave,R=1,N=48;if(3==p.type)R=u.spectrumBaseExpression,v&&(A=u.spectrumBasePitch,R*=2),W=u.spectrumBasePitch,N=28;else if(4==p.type)A=u.spectrumBasePitch,R=u.drumsetBaseExpression,W=A;else if(2==p.type)A=v?u.chipNoises[p.chipNoise].basePitch:A+u.chipNoises[p.chipNoise].basePitch-12,R=u.noiseBaseExpression,W=A,N=u.chipNoises[p.chipNoise].isSoft?24:60;else if(1==p.type||11==p.type)R=u.fmBaseExpression;else if(0==p.type)R=u.chipBaseExpression,u.chipWaves[p.chipWave].isCustomSampled?u.chipWaves[p.chipWave].isPercussion?A=-12*Math.log2(u.chipWaves[p.chipWave].samples.length/u.chipWaves[p.chipWave].sampleRate)-84.37-(-60+u.chipWaves[p.chipWave].rootKey):A+=-12*Math.log2(u.chipWaves[p.chipWave].samples.length/u.chipWaves[p.chipWave].sampleRate)-96.37-(-60+u.chipWaves[p.chipWave].rootKey):u.chipWaves[p.chipWave].isSampled&&!u.chipWaves[p.chipWave].isPercussion?A=A-63+u.chipWaves[p.chipWave].extraSampleDetune:u.chipWaves[p.chipWave].isSampled&&u.chipWaves[p.chipWave].isPercussion&&(A=-51+u.chipWaves[p.chipWave].extraSampleDetune);else if(9==p.type)R=u.chipBaseExpression;else if(5==p.type)R=u.harmonicsBaseExpression;else if(6==p.type)R=u.pwmBaseExpression;else if(8==p.type)R=u.supersawBaseExpression;else if(7==p.type)R=u.pickedStringBaseExpression;else{if(10!=p.type)throw new Error("Unknown instrument type in computeTone.");R=1,W=0,N=1,A=0}if((i.atNoteStart&&!c.isSeamless&&!i.forceContinueAtStart||i.freshlyAllocated)&&(i.reset(),h.envelopeComputer.reset(),0==p.type&&p.isUsingAdvancedLoopControls)){const e=u.rawRawChipWaves[p.chipWave].samples.length-1,t=p.chipWaveStartOffset/e,n=.999999999999999;for(let e=0;e<u.maxPitchOrOperatorCount;e++)i.phases[e]=p.chipWavePlayBackwards?Math.max(0,Math.min(n,t)):Math.max(0,t),i.directions[e]=p.chipWavePlayBackwards?-1:1,i.chipWaveCompletions[e]=0,i.chipWavePrevWaves[e]=0,i.chipWaveCompletionsLastWave[e]=0}i.freshlyAllocated=!1;for(let e=0;e<u.maxPitchOrOperatorCount;e++)i.phaseDeltas[e]=0,i.phaseDeltaScales[e]=0,i.operatorExpressions[e]=0,i.operatorExpressionDeltas[e]=0;i.expression=0,i.expressionDelta=0;for(let e=0;e<(11==p.type?6:u.operatorCount);e++)i.operatorWaves[e]=Ge.getOperatorWave(p.operators[e].waveform,p.operators[e].pulseWidth);if(s){const e=i.ticksSinceReleased,t=i.ticksSinceReleased+1;z=C=i.lastInterval;const n=Math.abs(p.getFadeOutTicks());H=Ge.noteSizeToVolumeMult((1-e/n)*u.noteSizeMax),O=Ge.noteSizeToVolumeMult((1-t/n)*u.noteSizeMax),a&&(O=0),i.ticksSinceReleased+1>=n&&(D=!0)}else if(null==i.note)H=O=1,i.lastInterval=0,i.ticksSinceReleased=0,i.liveInputSamplesHeld+=o;else{const e=i.note,t=i.nextNote,n=i.noteStartPart,s=i.noteEndPart,a=e.getEndPinIndex(P),o=e.pins[a-1],r=e.pins[a],l=n*u.ticksPerPart,h=s*u.ticksPerPart,f=(e.start+o.time)*u.ticksPerPart,d=(e.start+r.time)*u.ticksPerPart;i.ticksSinceReleased=0;const m=P*u.ticksPerPart+this.tick,v=m+1,y=m-l,g=v-l,b=Math.min(1,(m-f)/(d-f)),S=Math.min(1,(v-f)/(d-f));if(H=1,O=1,z=o.interval+(r.interval-o.interval)*b,C=o.interval+(r.interval-o.interval)*S,i.lastInterval=C,!c.isSeamless&&!i.forceContinueAtEnd||null==t){const e=-p.getFadeOutTicks();if(e>0){const t=h-l;H*=Math.min(1,(t-y)/e),O*=Math.min(1,(t-g)/e),v>=l+t&&(D=!0)}}}i.isOnLastTick=D;let B,V,$=p.noteFilter;if(p.noteFilterType){const e=p.noteFilter;null==p.noteSubFilters[1]&&(p.noteSubFilters[1]=new ke);const n=p.noteSubFilters[1];let s=p.noteFilterSimpleCut,a=p.noteFilterSimplePeak,o=p.noteFilterSimpleCut,r=p.noteFilterSimplePeak,l=!1;this.isModActive(u.modulators.dictionary["note filt cut"].index,t,i.instrumentIndex)&&(s=this.getModValue(u.modulators.dictionary["note filt cut"].index,t,i.instrumentIndex,!1),o=this.getModValue(u.modulators.dictionary["note filt cut"].index,t,i.instrumentIndex,!0),l=!0),this.isModActive(u.modulators.dictionary["note filt peak"].index,t,i.instrumentIndex)&&(a=this.getModValue(u.modulators.dictionary["note filt peak"].index,t,i.instrumentIndex,!1),r=this.getModValue(u.modulators.dictionary["note filt peak"].index,t,i.instrumentIndex,!0),l=!0),e.convertLegacySettingsForSynth(s,a,!l),n.convertLegacySettingsForSynth(o,r,!l),B=e.controlPoints[0],V=n.controlPoints[0],p.noteFilter=e,p.tmpNoteFilterStart=e}const j=i.envelopeComputer,Q=[];for(let e=0;e<u.maxEnvelopeCount;e++)Q[e]=0;for(let e=0;e<p.envelopeCount;e++){let n=p.envelopes[e].perEnvelopeSpeed;this.isModActive(u.modulators.dictionary["individual envelope speed"].index,t,i.instrumentIndex)&&null!=p.envelopes[e].tempEnvelopeSpeed&&(n=p.envelopes[e].tempEnvelopeSpeed);let s=u.arpSpeedScale[p.envelopeSpeed]*n;this.isModActive(u.modulators.dictionary["envelope speed"].index,t,i.instrumentIndex)&&(s=Math.max(0,Math.min(u.arpSpeedScale.length-1,this.getModValue(u.modulators.dictionary["envelope speed"].index,t,i.instrumentIndex,!1))),s=Number.isInteger(s)?u.arpSpeedScale[s]*n:(1-s%1)*u.arpSpeedScale[Math.floor(s)]+s%1*u.arpSpeedScale[Math.ceil(s)]*n),Q[e]=s}j.computeEnvelopes(p,P,h.envelopeTime,u.ticksPerPart*M,n/this.samplesPerSecond,i,Q,h,this,t,i.instrumentIndex);const _=i.envelopeComputer.envelopeStarts,K=i.envelopeComputer.envelopeEnds;if(p.noteFilter=$,!c.continues||null!=i.prevNote&&null!=i.note||h.envelopeComputer.reset(),null!=i.note&&c.slides){const e=i.prevNote,t=i.nextNote;if(null!=e){const t=e.pitches[i.prevNotePitchIndex]+e.pins[e.pins.length-1].interval-i.pitches[0];if(j.prevSlideStart&&(z+=t*j.prevSlideRatioStart),j.prevSlideEnd&&(C+=t*j.prevSlideRatioEnd),!f.singleTone){const t=e.pitches.length-i.chordSize;j.prevSlideStart&&(L=Ge.computeChordExpression(i.chordSize+t*j.prevSlideRatioStart)),j.prevSlideEnd&&(G=Ge.computeChordExpression(i.chordSize+t*j.prevSlideRatioEnd))}}if(null!=t){const e=t.pitches[i.nextNotePitchIndex]-(i.pitches[0]+i.note.pins[i.note.pins.length-1].interval);if(j.nextSlideStart&&(z+=e*j.nextSlideRatioStart),j.nextSlideEnd&&(C+=e*j.nextSlideRatioEnd),!f.singleTone){const e=t.pitches.length-i.chordSize;j.nextSlideStart&&(L=Ge.computeChordExpression(i.chordSize+e*j.nextSlideRatioStart)),j.nextSlideEnd&&(G=Ge.computeChordExpression(i.chordSize+e*j.nextSlideRatioEnd))}}}if(F(p.effects)){let e=u.justIntonationSemitones[p.pitchShift]/y,n=1,s=1;this.isModActive(u.modulators.dictionary["pitch shift"].index,t,i.instrumentIndex)&&(e=u.justIntonationSemitones[u.justIntonationSemitones.length-1],n=this.getModValue(u.modulators.dictionary["pitch shift"].index,t,i.instrumentIndex,!1)/u.pitchShiftCenter,s=this.getModValue(u.modulators.dictionary["pitch shift"].index,t,i.instrumentIndex,!0)/u.pitchShiftCenter);z+=e*_[18]*n,C+=e*K[18]*s}if(k(p.effects)||this.isModActive(u.modulators.dictionary["song detune"].index,t,i.instrumentIndex)){const e=_[19],n=K[19];let s=p.detune,a=p.detune;this.isModActive(u.modulators.dictionary.detune.index,t,i.instrumentIndex)&&(s=this.getModValue(u.modulators.dictionary.detune.index,t,i.instrumentIndex,!1)+u.detuneCenter,a=this.getModValue(u.modulators.dictionary.detune.index,t,i.instrumentIndex,!0)+u.detuneCenter),this.isModActive(u.modulators.dictionary["song detune"].index,t,i.instrumentIndex)&&p.advancedSettings.affectedBySongDetune&&(s+=4*this.getModValue(u.modulators.dictionary["song detune"].index,t,i.instrumentIndex,!1),a+=4*this.getModValue(u.modulators.dictionary["song detune"].index,t,i.instrumentIndex,!0)),z+=Ge.detuneToCents(s)*e*u.pitchesPerOctave/1200,C+=Ge.detuneToCents(a)*n*u.pitchesPerOctave/1200}if(I(p.effects)){let e,n,s,a;if(p.vibrato==u.vibratos.length?(e=2*p.vibratoDelay,p.vibratoDelay==u.modulators.dictionary["vibrato delay"].maxRawVol&&(e=Number.POSITIVE_INFINITY),n=p.vibratoDepth,s=n):(e=u.vibratos[p.vibrato].delayTicks,n=u.vibratos[p.vibrato].amplitude,s=n),this.isModActive(u.modulators.dictionary["vibrato delay"].index,t,i.instrumentIndex)&&(e=2*this.getModValue(u.modulators.dictionary["vibrato delay"].index,t,i.instrumentIndex,!1),e==2*u.modulators.dictionary["vibrato delay"].maxRawVol&&(e=Number.POSITIVE_INFINITY)),this.isModActive(u.modulators.dictionary["vibrato depth"].index,t,i.instrumentIndex)&&(n=this.getModValue(u.modulators.dictionary["vibrato depth"].index,t,i.instrumentIndex,!1)/25,s=this.getModValue(u.modulators.dictionary["vibrato depth"].index,t,i.instrumentIndex,!0)/25),null!=i.prevVibrato)a=i.prevVibrato;else{if(a=n*Ge.getLFOAmplitude(p,g*h.vibratoTime)*_[20],e>0){const t=e-j.noteTicksStart;a*=Math.max(0,Math.min(1,1-t/2))}}let o=Ge.getLFOAmplitude(p,g*h.nextVibratoTime);const r=K[20];if(10!=p.type){let t=s*o*r;if(e>0){const n=e-j.noteTicksEnd;t*=Math.max(0,Math.min(1,1-n/2))}i.prevVibrato=t,z+=a,C+=t}}if(!c.isSeamless&&!i.forceContinueAtStart||null==i.prevNote){const e=p.getFadeInSeconds();e>0&&(H*=Math.min(1,j.noteSecondsStartUnscaled/e),O*=Math.min(1,j.noteSecondsEndUnscaled/e))}4==p.type&&null==i.drumsetPitch&&(i.drumsetPitch=i.pitches[0],null!=i.note&&(i.drumsetPitch+=i.note.pickMainInterval()),i.drumsetPitch=Math.max(0,Math.min(u.drumCount-1,i.drumsetPitch)));let J=j.lowpassCutoffDecayVolumeCompensation;if(q(p.effects)){const e=_[1],t=K[1];if(p.noteFilterType){const n=_[21],s=K[21],a=_[29],r=K[29];B.toCoefficients(Ge.tempFilterStartCoefficients,this.samplesPerSecond,e*n,a),V.toCoefficients(Ge.tempFilterEndCoefficients,this.samplesPerSecond,t*s,r),i.noteFilters.length<1&&(i.noteFilters[0]=new U),i.noteFilters[0].loadCoefficientsWithGradient(Ge.tempFilterStartCoefficients,Ge.tempFilterEndCoefficients,1/o,0==B.type),J*=B.getVolumeCompensationMult(),i.noteFilterCount=1}else{const n=null!=p.tmpNoteFilterStart?p.tmpNoteFilterStart:p.noteFilter;for(let s=0;s<n.controlPointCount;s++){const a=_[21+s],r=K[21+s],l=_[29+s],h=K[29+s];let u=n.controlPoints[s];const c=null!=p.tmpNoteFilterEnd&&null!=p.tmpNoteFilterEnd.controlPoints[s]?p.tmpNoteFilterEnd.controlPoints[s]:n.controlPoints[s];u.type!=c.type&&(u=c),u.toCoefficients(Ge.tempFilterStartCoefficients,this.samplesPerSecond,e*a,l),c.toCoefficients(Ge.tempFilterEndCoefficients,this.samplesPerSecond,t*r,h),i.noteFilters.length<=s&&(i.noteFilters[s]=new U),i.noteFilters[s].loadCoefficientsWithGradient(Ge.tempFilterStartCoefficients,Ge.tempFilterEndCoefficients,1/o,0==u.type),J*=u.getVolumeCompensationMult()}i.noteFilterCount=n.controlPointCount}}else i.noteFilterCount=0;if(4==p.type){const e=i.envelopeComputer,t=p.getDrumsetEnvelope(i.drumsetPitch);J*=ze.getLowpassCutoffDecayVolumeCompensation(t),e.computeDrumsetEnvelopes(p,t,w,M,E);const n=e.drumsetFilterEnvelopeStart,s=e.drumsetFilterEnvelopeEnd,a=this.tempDrumSetControlPoint;a.type=0,a.gain=Fe.getRoundedSettingValueFromLinearGain(.5),a.freq=Fe.getRoundedSettingValueFromHz(8e3),a.toCoefficients(Ge.tempFilterStartCoefficients,this.samplesPerSecond,n*(1+n),1),a.toCoefficients(Ge.tempFilterEndCoefficients,this.samplesPerSecond,s*(1+s),1),i.noteFilters.length==i.noteFilterCount&&(i.noteFilters[i.noteFilterCount]=new U),i.noteFilters[i.noteFilterCount].loadCoefficientsWithGradient(Ge.tempFilterStartCoefficients,Ge.tempFilterEndCoefficients,1/o,!0),i.noteFilterCount++}if(J=Math.min(3,J),1==p.type||11==p.type){let e=1,n=0,s=0;const a=f.arpeggiates,r="monophonic"==f.name;if(i.pitchCount>1&&a){const e=Math.floor(h.arpTime/u.ticksPerArpeggio);s=i.pitches[S(i.pitchCount,p.fastTwoNoteArp,e)]-i.pitches[0]}const l=11==p.type?p.customAlgorithm.carrierCount:u.algorithms[p.algorithm].carrierCount;for(let h=0;h<(11==p.type?6:u.operatorCount);h++){const c=11==p.type?p.customAlgorithm.associatedCarrier[h]-1:u.algorithms[p.algorithm].associatedCarrier[h]-1,f=i.pitches[a?0:r?p.monoChordTone:h<i.pitchCount?h:c<i.pitchCount?c:0],d=u.operatorFrequencies[p.operators[h].frequency].mult,m=u.operatorCarrierInterval[c]+s,v=A+(f+z)*y+m,g=A+(f+C)*y+m,S=Ee.frequencyFromPitch(v),w=Ee.frequencyFromPitch(g),x=u.operatorFrequencies[p.operators[h].frequency].hzOffset,M=d*S+x,F=d*w+x,k=_[5+h],I=K[5+h];let q,E;1!=k||1!=I?(q=Math.pow(2,Math.log2(M/S)*k)*S,E=Math.pow(2,Math.log2(F/w)*I)*w):(q=M,E=F),i.phaseDeltas[h]=q*b,i.phaseDeltaScales[h]=Math.pow(E/q,1/o);let P=p.operators[h].amplitude,T=p.operators[h].amplitude;h<4?this.isModActive(u.modulators.dictionary["fm slider 1"].index+h,t,i.instrumentIndex)&&(P*=this.getModValue(u.modulators.dictionary["fm slider 1"].index+h,t,i.instrumentIndex,!1)/15,T*=this.getModValue(u.modulators.dictionary["fm slider 1"].index+h,t,i.instrumentIndex,!0)/15):this.isModActive(u.modulators.dictionary["fm slider 5"].index+h-4,t,i.instrumentIndex)&&(P*=this.getModValue(u.modulators.dictionary["fm slider 5"].index+h-4,t,i.instrumentIndex,!1)/15,T*=this.getModValue(u.modulators.dictionary["fm slider 5"].index+h-4,t,i.instrumentIndex,!0)/15);const D=Ge.operatorAmplitudeCurve(P),H=Ge.operatorAmplitudeCurve(T);let O=D*u.operatorFrequencies[p.operators[h].frequency].amplitudeSign,L=H*u.operatorFrequencies[p.operators[h].frequency].amplitudeSign;if(h<l){let e;e=null!=i.prevPitchExpressions[h]?i.prevPitchExpressions[h]:Math.pow(2,-(v-W)/N);const t=Math.pow(2,-(g-W)/N);i.prevPitchExpressions[h]=t,O*=e,L*=t,n+=H}else O*=1.5*u.sineWaveLength,L*=1.5*u.sineWaveLength,e*=1-Math.min(1,p.operators[h].amplitude/15);if(O*=_[11+h],L*=K[11+h],this.isModActive(u.modulators.dictionary["note volume"].index,t,i.instrumentIndex)){const e=this.getModValue(u.modulators.dictionary["note volume"].index,t,i.instrumentIndex,!1),n=this.getModValue(u.modulators.dictionary["note volume"].index,t,i.instrumentIndex,!0);O*=e<=0?(e+u.volumeRange/2)/(u.volumeRange/2):Ge.instrumentVolumeToVolumeMult(e),L*=n<=0?(n+u.volumeRange/2)/(u.volumeRange/2):Ge.instrumentVolumeToVolumeMult(n)}i.operatorExpressions[h]=O,i.operatorExpressionDeltas[h]=(L-O)/o}e*=(Math.pow(2,2-1.4*p.feedbackAmplitude/15)-1)/3,e*=1-Math.min(1,Math.max(0,n-1)/2),e=1+3*e;let c=R*e*J*H*L*_[0],d=R*e*J*O*G*K[0];r&&i.pitchCount<=p.monoChordTone&&(c=0,d=0),i.expression=c,i.expressionDelta=(d-c)/o;let m=p.feedbackAmplitude,v=p.feedbackAmplitude;this.isModActive(u.modulators.dictionary["fm feedback"].index,t,i.instrumentIndex)&&(m*=this.getModValue(u.modulators.dictionary["fm feedback"].index,t,i.instrumentIndex,!1)/15,v*=this.getModValue(u.modulators.dictionary["fm feedback"].index,t,i.instrumentIndex,!0)/15);let g=.3*u.sineWaveLength*m/15;const w=.3*u.sineWaveLength*v/15;let x=g*_[17],M=w*K[17];i.feedbackMult=x,i.feedbackDelta=(M-x)/o}else{const e=Math.pow(2,(C-z)*y/12),n=Math.pow(e,1/o),s="monophonic"==f.name;let a=i.pitches[0];if(i.pitchCount>1&&(f.arpeggiates||f.customInterval||s)){const e=Math.floor(h.arpTime/u.ticksPerArpeggio);if(f.customInterval){const t=i.pitches[1+S(i.pitchCount-1,p.fastTwoNoteArp,e)]-i.pitches[0];T=Math.pow(2,t/12),i.specialIntervalExpressionMult=Math.pow(2,-t/N)}else a=f.arpeggiates?i.pitches[S(i.pitchCount,p.fastTwoNoteArp,e)]:i.pitches[p.monoChordTone]}const r=A+(a+z)*y,l=A+(a+C)*y;let d;d=null!=i.prevPitchExpressions[0]?i.prevPitchExpressions[0]:Math.pow(2,-(r-W)/N);const v=Math.pow(2,-(l-W)/N);i.prevPitchExpressions[0]=v;let g=R*J;if(2==p.type&&(g*=u.chipNoises[p.chipNoise].expression),0==p.type&&(g*=u.chipWaves[p.chipWave].expression),6==p.type){const e=m(p.pulseWidth);let n=e,s=e;this.isModActive(u.modulators.dictionary["pulse width"].index,t,i.instrumentIndex)&&(n=this.getModValue(u.modulators.dictionary["pulse width"].index,t,i.instrumentIndex,!1)/(2*u.pulseWidthRange),s=this.getModValue(u.modulators.dictionary["pulse width"].index,t,i.instrumentIndex,!0)/(2*u.pulseWidthRange));const a=n*_[2],r=s*K[2];i.pulseWidth=a,i.pulseWidthDelta=(r-a)/o;let l=p.decimalOffset;this.isModActive(u.modulators.dictionary["decimal offset"].index,t,i.instrumentIndex)&&(l=this.getModValue(u.modulators.dictionary["decimal offset"].index,t,i.instrumentIndex,!1));const h=l*_[37];i.decimalOffset=h,i.pulseWidth-=i.decimalOffset/1e4}if(7==p.type){let e=p.stringSustain,n=p.stringSustain;this.isModActive(u.modulators.dictionary.sustain.index,t,i.instrumentIndex)&&(e=this.getModValue(u.modulators.dictionary.sustain.index,t,i.instrumentIndex,!1),n=this.getModValue(u.modulators.dictionary.sustain.index,t,i.instrumentIndex,!0)),i.stringSustainStart=e,i.stringSustainEnd=n,g*=Math.pow(2,.7*(1-e/(u.stringSustainRange-1)))}const w=Ee.frequencyFromPitch(r);if(0==p.type||9==p.type||5==p.type||7==p.type||3==p.type||6==p.type||2==p.type||4==p.type){const e=p.unisonVoices,t=p.unisonSpread,s=p.unisonOffset;g*=p.unisonExpression*(7==p.type?1:e/2);const a=_[4],r=K[4],l=Math.pow(2,(s+t)*a/12),h=Math.pow(2,(s+t)*r/12);i.phaseDeltas[0]=w*b*l,i.phaseDeltaScales[0]=n*Math.pow(h/l,1/o);const c=1==e?1:e-1;for(let l=1;l<e;l++){const e=Math.pow(2,(s+t-2*l*t/c)*a/12)*T,p=Math.pow(2,(s+t-2*l*t/c)*r/12)*T;i.phaseDeltas[l]=w*b*e,i.phaseDeltaScales[l]=n*Math.pow(p/e,1/o)}for(let t=e;t<u.unisonVoicesMax;t++)i.phaseDeltas[t]=i.phaseDeltas[0],i.phaseDeltaScales[t]=i.phaseDeltaScales[0]}else i.phaseDeltas[0]=w*b,i.phaseDeltaScales[0]=n;let x=1,M=1;if(8==p.type){const n=1/Math.sqrt(u.supersawVoiceCount);let s=p.supersawDynamism/u.supersawDynamismMax,a=p.supersawDynamism/u.supersawDynamismMax;this.isModActive(u.modulators.dictionary.dynamism.index,t,i.instrumentIndex)&&(s=this.getModValue(u.modulators.dictionary.dynamism.index,t,i.instrumentIndex,!1)/u.supersawDynamismMax,a=this.getModValue(u.modulators.dictionary.dynamism.index,t,i.instrumentIndex,!0)/u.supersawDynamismMax);const r=1-Math.pow(Math.max(0,1-s*_[38]),.2),l=1-Math.pow(Math.max(0,1-a*K[38]),.2),h=Math.pow(2,Math.log2(n)*r),c=Math.pow(2,Math.log2(n)*l),f=Math.sqrt((1/Math.pow(h,2)-1)/(u.supersawVoiceCount-1)),d=Math.sqrt((1/Math.pow(c,2)-1)/(u.supersawVoiceCount-1));i.supersawDynamism=f,i.supersawDynamismDelta=(d-f)/o;const v=-1==i.supersawDelayIndex;if(v){let e=0;for(let t=0;t<u.supersawVoiceCount;t++)i.phases[t]=e,e+=-Math.log(Math.random());const t=1+(u.supersawVoiceCount-1)*f;let n=0;for(let t=0;t<u.supersawVoiceCount;t++){const s=0==t?1:f,a=i.phases[t]/e;i.phases[t]=a,n+=(a-.5)*s}let s=1,a=0;for(let e=u.supersawVoiceCount-1;e>=0;e--){const o=1-i.phases[e],r=o-a;if(n<0){const e=-n/t;if(e<r){s=a+e;break}}n+=r*t-(0==e?1:f),a=o}for(let e=0;e<u.supersawVoiceCount;e++)i.phases[e]+=s;for(let e=1;e<u.supersawVoiceCount-1;e++){const t=e+Math.floor(Math.random()*(u.supersawVoiceCount-e)),n=i.phases[e];i.phases[e]=i.phases[t],i.phases[t]=n}}const y=p.supersawSpread/u.supersawSpreadMax;let g=y,S=y;this.isModActive(u.modulators.dictionary.spread.index,t,i.instrumentIndex)&&(g=this.getModValue(u.modulators.dictionary.spread.index,t,i.instrumentIndex,!1)/u.supersawSpreadMax,S=this.getModValue(u.modulators.dictionary.spread.index,t,i.instrumentIndex,!0)/u.supersawSpreadMax);const F=.5*(g*_[39]+S*K[39]),k=Math.pow(1-Math.sqrt(Math.max(0,1-F)),1.75);for(let e=0;e<u.supersawVoiceCount;e++){const t=0==e?0:Math.pow(((e+1>>1)-.5+.025*((2&e)-1))/(u.supersawVoiceCount>>1),1.1)*(2*(1&e)-1);i.supersawUnisonDetunes[e]=Math.pow(2,k*t/12)}const I=p.supersawShape/u.supersawShapeMax;let q=I*_[40],E=I*K[40];this.isModActive(u.modulators.dictionary["saw shape"].index,t,i.instrumentIndex)&&(q=this.getModValue(u.modulators.dictionary["saw shape"].index,t,i.instrumentIndex,!1)/u.supersawShapeMax,E=this.getModValue(u.modulators.dictionary["saw shape"].index,t,i.instrumentIndex,!0)/u.supersawShapeMax);const P=q*_[40],T=E*K[40];i.supersawShape=P,i.supersawShapeDelta=(T-P)/o;let D=p.decimalOffset;this.isModActive(u.modulators.dictionary["decimal offset"].index,t,i.instrumentIndex)&&(D=this.getModValue(u.modulators.dictionary["decimal offset"].index,t,i.instrumentIndex,!1));const z=D*_[37];i.decimalOffset=z;const C=m(p.pulseWidth);let H=C,O=C;this.isModActive(u.modulators.dictionary["pulse width"].index,t,i.instrumentIndex)&&(H=this.getModValue(u.modulators.dictionary["pulse width"].index,t,i.instrumentIndex,!1)/(2*u.pulseWidthRange),O=this.getModValue(u.modulators.dictionary["pulse width"].index,t,i.instrumentIndex,!0)/(2*u.pulseWidthRange));let L=H*_[2],G=O*K[2];L-=z/1e4,G-=z/1e4;const W=null!=i.supersawPrevPhaseDelta?i.supersawPrevPhaseDelta:w*b,A=w*b*e;i.supersawPrevPhaseDelta=A;const R=L/W,N=G/A;i.supersawDelayLength=R,i.supersawDelayLengthDelta=(N-R)/o;const B=Math.ceil(Math.max(R,N))+2;if(null==i.supersawDelayLine||i.supersawDelayLine.length<=B){const e=Math.ceil(.5*this.samplesPerSecond/Ee.frequencyFromPitch(24)),t=new Float32Array(Ge.fittingPowerOfTwo(Math.max(e,B)));if(!v&&null!=i.supersawDelayLine){const e=i.supersawDelayLine.length-1>>0,n=i.supersawDelayIndex;for(let s=0;s<i.supersawDelayLine.length;s++)t[s]=i.supersawDelayLine[n+s&e]}i.supersawDelayLine=t,i.supersawDelayIndex=i.supersawDelayLine.length}else v&&(i.supersawDelayLine.fill(0),i.supersawDelayIndex=i.supersawDelayLine.length);const V=u.pwmBaseExpression/u.supersawBaseExpression;x*=(1+(V-1)*P)/Math.sqrt(1+(u.supersawVoiceCount-1)*f*f),M*=(1+(V-1)*T)/Math.sqrt(1+(u.supersawVoiceCount-1)*d*d)}let F=g*H*L*d*_[0]*x,k=g*O*G*v*K[0]*M;if(this.isModActive(u.modulators.dictionary["note volume"].index,t,i.instrumentIndex)){const e=this.getModValue(u.modulators.dictionary["note volume"].index,t,i.instrumentIndex,!1),n=this.getModValue(u.modulators.dictionary["note volume"].index,t,i.instrumentIndex,!0);F*=e<=0?(e+u.volumeRange/2)/(u.volumeRange/2):Ge.instrumentVolumeToVolumeMult(e),k*=n<=0?(n+u.volumeRange/2)/(u.volumeRange/2):Ge.instrumentVolumeToVolumeMult(n)}if(s&&i.pitchCount<=p.monoChordTone&&(F=0,k=0,h.awake=!1),i.expression=F,i.expressionDelta=(k-F)/o,7==p.type){let e;if(null!=i.prevStringDecay)e=i.prevStringDecay;else{const t=i.envelopeComputer.envelopeStarts[3];e=1-Math.min(1,t*i.stringSustainStart/(u.stringSustainRange-1))}const t=i.envelopeComputer.envelopeEnds[3];let n=1-Math.min(1,t*i.stringSustainEnd/(u.stringSustainRange-1));i.prevStringDecay=n;const s=p.unisonVoices;for(let e=i.pickedStrings.length;e<s;e++)i.pickedStrings[e]=new De;if(i.atNoteStart&&!c.continues&&!i.forceContinueAtStart)for(const e of i.pickedStrings)e.delayIndex=-1;for(let t=0;t<s;t++)i.pickedStrings[t].update(this,h,i,t,o,e,n,p.stringSustainType)}}}static getLFOAmplitude(e,t){let n=0;for(const i of u.vibratoTypes[e.vibratoType].periodsSeconds)n+=Math.sin(2*Math.PI*t/i);return n}static getInstrumentSynthFunction(e){if(1==e.type){const t=e.algorithm+"_"+e.feedbackType;if(null==Ge.fmSynthFunctionCache[t]){const n=[];for(const t of Ge.fmSourceTemplate)if(-1!=t.indexOf("// CARRIER OUTPUTS")){const i=[];for(let t=0;t<u.algorithms[e.algorithm].carrierCount;t++)i.push("operator"+t+"Scaled");n.push(t.replace("/*operator#Scaled*/",i.join(" + ")))}else if(-1!=t.indexOf("// INSERT OPERATOR COMPUTATION HERE"))for(let t=u.operatorCount-1;t>=0;t--)for(const i of Ge.operatorSourceTemplate)if(-1!=i.indexOf("/* + operator@Scaled*/")){let s="";for(const n of u.algorithms[e.algorithm].modulatedBy[t])s+=" + operator"+(n-1)+"Scaled";const a=u.feedbacks[e.feedbackType].indices[t];if(a.length>0){s+=" + feedbackMult * (";const e=[];for(const t of a)e.push("operator"+(t-1)+"Output");s+=e.join(" + ")+")"}n.push(i.replace(/\#/g,t+"").replace("/* + operator@Scaled*/",s))}else n.push(i.replace(/\#/g,t+""));else if(-1!=t.indexOf("#"))for(let e=0;e<u.operatorCount;e++)n.push(t.replace(/\#/g,e+""));else n.push(t);const i="return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {"+n.join("\n")+"}";Ge.fmSynthFunctionCache[t]=new Function("Config","Synth",i)(u,Ge)}return Ge.fmSynthFunctionCache[t]}if(0==e.type)return e.isUsingAdvancedLoopControls?Ge.loopableChipSynth:Ge.chipSynth;if(9==e.type)return Ge.chipSynth;if(5==e.type)return Ge.harmonicsSynth;if(6==e.type)return Ge.pulseWidthSynth;if(8==e.type)return Ge.supersawSynth;if(7==e.type)return Ge.pickedStringSynth;if(2==e.type)return Ge.noiseSynth;if(3==e.type)return Ge.spectrumSynth;if(4==e.type)return Ge.drumsetSynth;if(10==e.type)return Ge.modSynth;if(11==e.type){const t=e.customAlgorithm.name+"_"+e.customFeedbackType.name;if(null==Ge.fm6SynthFunctionCache[t]){const n=[];for(const t of Ge.fmSourceTemplate)if(-1!=t.indexOf("// CARRIER OUTPUTS")){const i=[];for(let t=0;t<e.customAlgorithm.carrierCount;t++)i.push("operator"+t+"Scaled");n.push(t.replace("/*operator#Scaled*/",i.join(" + ")))}else if(-1!=t.indexOf("// INSERT OPERATOR COMPUTATION HERE"))for(let t=u.operatorCount+2-1;t>=0;t--)for(const i of Ge.operatorSourceTemplate)if(-1!=i.indexOf("/* + operator@Scaled*/")){let s="";for(const n of e.customAlgorithm.modulatedBy[t])s+=" + operator"+(n-1)+"Scaled";const a=e.customFeedbackType.indices[t];if(a.length>0){s+=" + feedbackMult * (";const e=[];for(const t of a)e.push("operator"+(t-1)+"Output");s+=e.join(" + ")+")"}n.push(i.replace(/\#/g,t+"").replace("/* + operator@Scaled*/",s))}else n.push(i.replace(/\#/g,t+""));else if(-1!=t.indexOf("#"))for(let e=0;e<u.operatorCount+2;e++)n.push(t.replace(/\#/g,e+""));else n.push(t);const i="return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {"+n.join("\n")+"}";Ge.fm6SynthFunctionCache[t]=new Function("Config","Synth",i)(u,Ge)}return Ge.fm6SynthFunctionCache[t]}throw new Error("Unrecognized instrument type: "+e.type)}static wrap(e,t){return(e%t+t)%t}static loopableChipSynth(e,t,n,i,s){const a=Math.max(2,s.unisonVoices),o=s.chipWaveLoopMode;let r=Ge.loopableChipFunctionCache[s.unisonVoices][o];if(null==r){let e="return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {";e+="\n        const aliases = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\n        const chipWaveLoopMode = instrumentState.chipWaveLoopMode;\n        // const aliases = false;\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        const wave = instrumentState.wave;\n        const volumeScale = instrumentState.volumeScale;\n        const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\n        let chipWaveLoopEnd = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));\n        let chipWaveLoopStart = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));\n        // @TODO: This is where to set things up for the release loop mode.\n        // const ticksSinceReleased = tone.ticksSinceReleased;\n        // if (ticksSinceReleased > 0) {\n        //     chipWaveLoopStart = 0;\n        //     chipWaveLoopEnd = waveLength - 1;\n        // }\n        let chipWaveLoopLength = chipWaveLoopEnd - chipWaveLoopStart;\n        if (chipWaveLoopLength < 2) {\n            chipWaveLoopStart = 0;\n            chipWaveLoopEnd = waveLength;\n            chipWaveLoopLength = waveLength;\n        }\n        const chipWavePlayBackwards = instrumentState.chipWavePlayBackwards;\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        ";for(let t=0;t<a;t++)e+="\n            let phaseDelta# = tone.phaseDeltas[#] * waveLength;\n            let direction# = tone.directions[#];\n            let chipWaveCompletion# = tone.chipWaveCompletions[#];\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n            let lastWave# = tone.chipWaveCompletionsLastWave[#];\n            let prevWave# = tone.chipWavePrevWaves[#];\n\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\n            ".replaceAll("#",t+"");for(let t=0;t<a;t++)e+="\n            let phase# = Synth.wrap(tone.phases[#], 1) * waveLength;\n            let prevWaveIntegral# = 0.0;\n            ".replaceAll("#",t+"");if(3===o||2===o||0===o)for(let t=0;t<a;t++)e+="\n            if (!chipWavePlayBackwards) {\n                direction# = 1;\n            } else {\n                direction# = -1;\n            }\n                ".replaceAll("#",t+"");if(0===o||1===o)for(let t=0;t<a;t++)e+="\n        chipWaveCompletion# = 0;\n        ".replaceAll("#",t+"");e+="let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        const chipWaveCompletionFadeLength = 1000;\n        if (!aliases) {";for(let t=0;t<a;t++)e+="\n                const phase#Int = Math.floor(phase#);\n                const index# = Synth.wrap(phase#Int, waveLength);\n                prevWaveIntegral# = +wave[index#]\n                const phaseRatio# = phase# - phase#Int;\n                prevWaveIntegral# += (wave[Synth.wrap(index# + 1, waveLength)] - prevWaveIntegral#) * phaseRatio#;\n                ".replaceAll("#",t+"");e+="\n        } \n            \n        const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        \n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            \n            let wrapped = 0;";for(let t=0;t<a;t++)e+="\n                if (chipWaveCompletion# > 0 && chipWaveCompletion# < chipWaveCompletionFadeLength) {\n                    chipWaveCompletion#++;\n                }\n                phase# += phaseDelta# * direction#;\n                ".replaceAll("#",t+"");if(2===o)for(let t=0;t<a;t++)e+="\n                if (direction# === 1) {\n                    if (phase# > waveLength) {\n                        if (chipWaveCompletion# <= 0) {\n                            lastWave# = prevWave#;\n                            chipWaveCompletion#++;\n                        }\n                        wrapped = 1;\n                    }\n                } else if (direction# === -1) {\n                    if (phase# < 0) {\n                        if (chipWaveCompletion# <= 0) {\n                            lastWave# = prevWave#;\n                            chipWaveCompletion#++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n                ".replaceAll("#",t+"");else if(3===o)for(let t=0;t<a;t++)e+="\n                if (direction# === 1) {\n                    if (phase# > chipWaveLoopEnd) {\n                        if (chipWaveCompletion# <= 0) {\n                            lastWave# = prevWave#;\n                            chipWaveCompletion#++;\n                        }\n                        wrapped = 1;\n                    }\n                } else if (direction# === -1) {\n                    if (phase# < chipWaveLoopStart) {\n                        if (chipWaveCompletion# <= 0) {\n                            lastWave# = prevWave#;\n                            chipWaveCompletion#++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n                ".replaceAll("#",t+"");else if(0===o)for(let t=0;t<a;t++)e+="\n                if (direction# === 1) {\n                    if (phase# > chipWaveLoopEnd) {\n                        phase# = chipWaveLoopStart + Synth.wrap(phase# - chipWaveLoopEnd, chipWaveLoopLength);\n                        // phase# = chipWaveLoopStart;\n                        wrapped = 1;\n                    }\n                } else if (direction# === -1) {\n                    if (phase# < chipWaveLoopStart) {\n                        phase# = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phase#, chipWaveLoopLength);\n                        // phase# = chipWaveLoopEnd;\n                        wrapped = 1;\n                    }\n                }\n                ".replaceAll("#",t+"");else if(1===o)for(let t=0;t<a;t++)e+="\n                if (direction# === 1) {\n                    if (phase# > chipWaveLoopEnd) {\n                        phase# = chipWaveLoopEnd - Synth.wrap(phase# - chipWaveLoopEnd, chipWaveLoopLength);\n                        // phase# = chipWaveLoopEnd;\n                        direction# = -1;\n                        wrapped = 1;\n                    }\n                } else if (direction# === -1) {\n                    if (phase# < chipWaveLoopStart) {\n                        phase# = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phase#, chipWaveLoopLength);\n                        // phase# = chipWaveLoopStart;\n                        direction# = 1;\n                        wrapped = 1;\n                    }\n                }\n                ".replaceAll("#",t+"");for(let t=0;t<a;t++)e+="\n                let wave# = 0;\n                ".replaceAll("#",t+"");e+="\n            let inputSample = 0;\n            if (aliases) {\n            ";for(let t=0;t<a;t++)e+="\n                wave# = wave[Synth.wrap(Math.floor(phase#), waveLength)];\n                prevWave# = wave#;\n                const completionFade# = chipWaveCompletion# > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletion#, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                inputSample = 0;\n                if (chipWaveCompletion# > 0) {\n                    inputSample += lastWave# * completionFade#;\n                } else {\n                    inputSample += wave#;\n                }\n                ".replaceAll("#",t+"");e+="} else {\n            ";for(let t=0;t<a;t++)e+="\n                const phase#Int = Math.floor(phase#);\n                const index# = Synth.wrap(phase#Int, waveLength);\n                let nextWaveIntegral# = wave[index#];\n                const phaseRatio# = phase# - phase#Int;\n                nextWaveIntegral# += (wave[Synth.wrap(index# + 1, waveLength)] - nextWaveIntegral#) * phaseRatio#;\n\n                ".replaceAll("#",t+"");e+="if (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {\n                    ";for(let t=0;t<a;t++)e+="\n                    let pwi# = 0;\n                    const phase#_ = Math.max(0, phase# - phaseDelta# * direction#);\n                    const phase#Int_ = Math.floor(phase#_);\n                    const index#_ = Synth.wrap(phase#Int_, waveLength);\n                    pwi# = wave[index#];\n                    pwi# += (wave[Synth.wrap(index#_ + 1, waveLength)] - pwi#) * (phase#_ - phase#Int_) * direction#;\n                    prevWaveIntegral# = pwi#;\n                ".replaceAll("#",t+"");if(e+="}",1===o){e+="if (wrapped !== 0) {";for(let t=0;t<a;t++)e+="wave# = prevWave#;\n                    ".replaceAll("#",t+"");e+="} else {";for(let t=0;t<a;t++)e+="wave# = (nextWaveIntegral# - prevWaveIntegral#) / (phaseDelta# * direction#);\n                    ".replaceAll("#",t+"");e+="}"}else for(let t=0;t<a;t++)e+="wave# = (nextWaveIntegral# - prevWaveIntegral#) / (phaseDelta# * direction#);\n                    ".replaceAll("#",t+"");for(let t=0;t<a;t++)e+="\n                prevWave# = wave#;\n                prevWaveIntegral# = nextWaveIntegral#;\n                const completionFade# = chipWaveCompletion# > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletion#, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                if (chipWaveCompletion# > 0) {\n                    inputSample += lastWave# * completionFade#;\n                } else {\n                    inputSample += wave#;\n                }\n                ".replaceAll("#",t+"");e+="}\n            const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample * volumeScale;\n            const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;";for(let t=0;t<a;t++)e+=" phaseDelta# *= phaseDeltaScale#;\n                    ".replaceAll("#",t+"");e+="}";for(let t=0;t<a;t++)e+="\n                tone.phases[#] = phase# / waveLength;\n                tone.phaseDeltas[#] = phaseDelta# / waveLength;\n                tone.directions[#] = direction#;\n                tone.chipWaveCompletions[#] = chipWaveCompletion#;\n                tone.chipWavePrevWaves[#] = prevWave#;\n                tone.chipWaveCompletionsLastWave[#] = lastWave#;\n\n                    ".replaceAll("#",t+"");e+="\n            tone.expression = expression;\n            synth.sanitizeFilters(filters);\n            tone.initialNoteFilterInput1 = initialFilterInput1;\n            tone.initialNoteFilterInput2 = initialFilterInput2;\n        }",r=new Function("Config","Synth","effectsIncludeDistortion",e)(u,Ge,E),Ge.loopableChipFunctionCache[s.unisonVoices][o]=r}r(e,t,n,i,s)}static chipSynth(e,t,n,i,s){const a=Math.max(2,s.unisonVoices);let o=Ge.chipFunctionCache[s.unisonVoices];if(null==o){let e="return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {";e+="\n        const aliases = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        const wave = instrumentState.wave;\n        const volumeScale = instrumentState.volumeScale;\n\n        const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        ";for(let t=0;t<a;t++)e+="let phaseDelta# = tone.phaseDeltas[#] * waveLength;\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\n            ".replaceAll("#",t+"");for(let t=0;t<a;t++)e+="let phase# = (tone.phases[#] % 1) * waveLength;\n            let prevWaveIntegral# = 0.0;\n            ".replaceAll("#",t+"");e+="const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n\n        if (!aliases) {\n        ";for(let t=0;t<a;t++)e+="const phase#Int = phase# | 0;\n                const index# = phase#Int % waveLength;\n                prevWaveIntegral# = +wave[index#]\n                const phase#Ratio = phase# - phase#Int;\n                prevWaveIntegral# += (wave[index# + 1] - prevWaveIntegral#) * phase#Ratio;\n                ".replaceAll("#",t+"");e+="\n        } \n\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n        let inputSample = 0;\n            if (aliases) {\n                ";for(let t=0;t<a;t++)e+="phase# += phaseDelta#;\n\n                    const inputSample# = wave[(0 | phase#) % waveLength];\n                    ".replaceAll("#",t+"");const t=[];for(let e=0;e<a;e++)t.push("inputSample"+e+(0!=e?" * unisonSign":""));e+="inputSample = "+t.join(" + ")+";",e+="} else {\n                    ";for(let t=0;t<s.unisonVoices;t++)e+="phase# += phaseDelta#;\n\n                     \n                        const phase#Int = phase# | 0;\n                        const index# = phase#Int % waveLength;\n                        let nextWaveIntegral# = wave[index#]\n                        const phase#Ratio = phase# - phase#Int;\n                        nextWaveIntegral# += (wave[index# + 1] - nextWaveIntegral#) * phase#Ratio;\n                        const wave# = (nextWaveIntegral# - prevWaveIntegral#) / phaseDelta#;\n                        prevWaveIntegral# = nextWaveIntegral#;\n                        let inputSample# = wave#;\n                        ".replaceAll("#",t+"");1==s.unisonVoices&&(e+="const inputSample1 = inputSample0;\n                ");const n=[];for(let e=0;e<a;e++)n.push("inputSample"+e+(0!=e?" * unisonSign":""));e+="inputSample = "+n.join(" + ")+";",e+="}\n        ",e+="const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample * volumeScale;";for(let t=0;t<a;t++)e+="\n                phaseDelta# *= phaseDeltaScale#;\n                ".replaceAll("#",t+"");e+="const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n            ";for(let t=0;t<a;t++)e+="tone.phases[#] = phase# / waveLength;\n            tone.phaseDeltas[#] = phaseDelta# / waveLength;\n            ".replaceAll("#",t+"");e+="tone.expression = expression;",e+="\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }",o=new Function("Config","Synth","effectsIncludeDistortion",e)(u,Ge,E),Ge.chipFunctionCache[s.unisonVoices]=o}o(e,t,n,i,s)}static harmonicsSynth(e,t,n,i,s){const a=Math.max(2,s.unisonVoices);let o=Ge.harmonicsFunctionCache[s.unisonVoices];if(null==o){let e="return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {";e+="\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        const wave = instrumentState.wave;\n        const waveLength = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n         ";for(let t=0;t<a;t++)e+="let phaseDelta# = tone.phaseDeltas[#] * waveLength;\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\n            ".replaceAll("#",t+"");for(let t=0;t<a;t++)e+="let phase# = (tone.phases[#] % 1) * waveLength;\n            ".replaceAll("#",t+"");e+="const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n        ";for(let t=0;t<a;t++)e+="const phase#Int = phase# | 0;\n            const index# = phase#Int % waveLength;\n            prevWaveIntegral# = +wave[index#]\n            const phase#Ratio = phase# - phase#Int;\n            prevWaveIntegral# += (wave[index# + 1] - prevWaveIntegral#) * phase#Ratio;\n            ".replaceAll("#",t+"");e+="const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n        ";for(let t=0;t<s.unisonVoices;t++)e+="\n                        phase# += phaseDelta#;\n                        const phase#Int = phase# | 0;\n                        const index# = phase#Int % waveLength;\n                        let nextWaveIntegral# = wave[index#]\n                        const phase#Ratio = phase# - phase#Int;\n                        nextWaveIntegral# += (wave[index# + 1] - nextWaveIntegral#) * phase#Ratio;\n                        const wave# = (nextWaveIntegral# - prevWaveIntegral#) / phaseDelta#;\n                        prevWaveIntegral# = nextWaveIntegral#;\n                        let inputSample# = wave#;\n                        ".replaceAll("#",t+"");1==s.unisonVoices&&(e+="const inputSample1 = inputSample0;\n                ");const t=[];for(let e=0;e<a;e++)t.push("inputSample"+e+(0!=e?" * unisonSign":""));e+="inputSample = "+t.join(" + ")+";",e+="const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;";for(let t=0;t<a;t++)e+="\n                phaseDelta# *= phaseDeltaScale#;\n                ".replaceAll("#",t+"");e+="const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n            ";for(let t=0;t<a;t++)e+="tone.phases[#] = phase# / waveLength;\n            tone.phaseDeltas[#] = phaseDelta# / waveLength;\n            ".replaceAll("#",t+"");e+="tone.expression = expression;",e+="\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }",o=new Function("Config","Synth",e)(u,Ge),Ge.harmonicsFunctionCache[s.unisonVoices]=o}o(e,t,n,i,s)}static pickedStringSynth(e,t,n,i,s){const a=s.unisonVoices;let o=Ge.pickedStringFunctionCache[a];if(null==o){let e="return (synth, bufferIndex, runLength, tone, instrumentState) => {";e+="\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (";const t=[];for(let e=0;e<a;e++)t.push("fractionalDelaySample"+e+(0!=e?" * unisonSign":""));e+=t.join(" + "),e+=") * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t\t}",e=e.replace(/^.*\#.*$/gm,(e=>{const t=[];for(let n=0;n<a;n++)t.push(e.replace(/\#/g,String(n)));return t.join("\n")})),o=new Function("Config","Synth",e)(u,Ge),Ge.pickedStringFunctionCache[a]=o}o(e,t,n,i,s)}static effectsSynth(e,t,n,i,s,a){const o=E(a.effects),r=P(a.effects),l=a.eqFilterCount>0,p=T(a.effects),h=D(a.effects),c=z(a.effects),f=C(a.effects),d=O(a.effects),m=H(a.effects);let v=0;o&&(v|=1),v<<=1,r&&(v|=1),v<<=1,l&&(v|=1),v<<=1,p&&(v|=1),v<<=1,h&&(v|=1),v<<=1,c&&(v|=1),v<<=1,f&&(v|=1),v<<=1,d&&(v|=1),v<<=1,m&&(v|=1);let y=Ge.effectsFunctionCache[v];if(null==y){let e="return (synth, outputDataL, outputDataR, bufferIndex, runLength, effectsComputer) => {";const t=h||f||c||d;e+="\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +effectsComputer.mixVolume;\n\t\t\t\tconst mixVolumeDelta = +effectsComputer.mixVolumeDelta;\n                ",t&&(e+="\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +effectsComputer.delayInputMult;\n\t\t\t\tconst delayInputMultDelta = +effectsComputer.delayInputMultDelta;"),d&&(e+="\n                let granularWet = effectsComputer.granularMix;\n                const granularMixDelta = effectsComputer.granularMixDelta;\n                let granularDry = 1.0 - granularWet; \n                const granularDelayLine = effectsComputer.granularDelayLine;\n                const granularGrains = effectsComputer.granularGrains;\n                let granularGrainCount = effectsComputer.granularGrainsLength;\n                const granularDelayLineLength = granularDelayLine.length;\n                const granularDelayLineMask = granularDelayLineLength - 1;\n                let granularDelayLineIndex = effectsComputer.granularDelayLineIndex;\n                const usesRandomGrainLocation = effectsComputer.usesRandomGrainLocation;\n                const computeGrains = effectsComputer.computeGrains;\n                effectsComputer.granularDelayLineDirty = true;\n                "),o&&(e+="\n\t\t\t\t\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\n\t\t\t\tlet distortion = effectsComputer.distortion;\n\t\t\t\tconst distortionDelta = effectsComputer.distortionDelta;\n\t\t\t\tlet distortionDrive = effectsComputer.distortionDrive;\n\t\t\t\tconst distortionDriveDelta = effectsComputer.distortionDriveDelta;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\t\t\t\t\n\t\t\t\tlet distortionFractionalInput1 = +effectsComputer.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +effectsComputer.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +effectsComputer.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +effectsComputer.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +effectsComputer.distortionNextOutput;"),r&&(e+="\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInput = +effectsComputer.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +effectsComputer.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +effectsComputer.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +effectsComputer.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +effectsComputer.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +effectsComputer.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +effectsComputer.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +effectsComputer.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +effectsComputer.bitcrusherFoldLevelScale;"),m&&(e+="\n\t\t\t\t\n                let ringModMix = +effectsComputer.ringModMix;\n                let ringModMixDelta = +effectsComputer.ringModMixDelta;\n                let ringModPhase = +effectsComputer.ringModPhase;\n                let ringModPhaseDelta = +effectsComputer.ringModPhaseDelta;\n                let ringModPhaseDeltaScale = +effectsComputer.ringModPhaseDeltaScale;\n                let ringModWaveformIndex = +effectsComputer.ringModWaveformIndex;\n                let ringModMixFade = +effectsComputer.ringModMixFade;\n                let ringModMixFadeDelta = +effectsComputer.ringModMixFadeDelta;\n                \n                let ringModPulseWidth = +effectsComputer.ringModPulseWidth;\n\n                let waveform = Config.operatorWaves[ringModWaveformIndex].samples; \n                if (ringModWaveformIndex == 2) {\n                    waveform = Synth.getOperatorWave(ringModWaveformIndex, ringModPulseWidth).samples;\n                }\n                const waveformLength = waveform.length - 1;\n                "),l&&(e+="\n\t\t\t\t\n\t\t\t\tlet filters = effectsComputer.eqFilters;\n\t\t\t\tconst filterCount = effectsComputer.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +effectsComputer.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +effectsComputer.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;"),e+="\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +effectsComputer.eqFilterVolume;\n\t\t\t\tconst eqFilterVolumeDelta = +effectsComputer.eqFilterVolumeDelta;",p&&(e+="\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = effectsComputer.panningDelayLine;\n\t\t\t\tlet panningDelayPos = effectsComputer.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +effectsComputer.panningVolumeL;\n\t\t\t\tlet   panningVolumeR      = +effectsComputer.panningVolumeR;\n\t\t\t\tconst panningVolumeDeltaL = +effectsComputer.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +effectsComputer.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = +effectsComputer.panningOffsetL;\n\t\t\t\tlet   panningOffsetR      = +effectsComputer.panningOffsetR;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - effectsComputer.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - effectsComputer.panningOffsetDeltaR;"),h&&(e+="\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = effectsComputer.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = effectsComputer.chorusDelayLineR;\n\t\t\t\teffectsComputer.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = effectsComputer.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tlet chorusVoiceMult = +effectsComputer.chorusVoiceMult;\n\t\t\t\tconst chorusVoiceMultDelta = +effectsComputer.chorusVoiceMultDelta;\n\t\t\t\tlet chorusCombinedMult = +effectsComputer.chorusCombinedMult;\n\t\t\t\tconst chorusCombinedMultDelta = +effectsComputer.chorusCombinedMultDelta;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = effectsComputer.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;"),c&&(e+="\n\t\t\t\tlet echoMult = +effectsComputer.echoMult;\n\t\t\t\tconst echoMultDelta = +effectsComputer.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = effectsComputer.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = effectsComputer.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\teffectsComputer.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = effectsComputer.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - effectsComputer.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - effectsComputer.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +effectsComputer.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +effectsComputer.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +effectsComputer.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +effectsComputer.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +effectsComputer.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +effectsComputer.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +effectsComputer.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +effectsComputer.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +effectsComputer.echoShelfPrevInputR;"),f&&(e+="\n\t\t\t\t\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = effectsComputer.reverbDelayLine;\n\t\t\t\teffectsComputer.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = effectsComputer.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +effectsComputer.reverbMult;\n\t\t\t\tconst reverbDelta = +effectsComputer.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +effectsComputer.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +effectsComputer.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +effectsComputer.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +effectsComputer.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +effectsComputer.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +effectsComputer.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +effectsComputer.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +effectsComputer.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +effectsComputer.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +effectsComputer.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +effectsComputer.reverbShelfPrevInput3;"),e+="\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                    ",d?(e+="\n                let sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n                let granularOutput = 0;\n                for (let grainIndex = 0; grainIndex < granularGrainCount; grainIndex++) {\n                    const grain = granularGrains[grainIndex];\n                    if(computeGrains) {\n                        if(grain.delay > 0) {\n                            grain.delay--;\n                        } else {\n                            const grainDelayLinePosition = grain.delayLinePosition;\n                            const grainDelayLinePositionInt = grainDelayLinePosition | 0;\n                            // const grainDelayLinePositionT = grainDelayLinePosition - grainDelayLinePositionInt;\n                            let grainAgeInSamples = grain.ageInSamples;\n                            const grainMaxAgeInSamples = grain.maxAgeInSamples;\n                            // const grainSample0 = granularDelayLine[((granularDelayLineIndex + (granularDelayLineLength - grainDelayLinePositionInt))    ) & granularDelayLineMask];\n                            // const grainSample1 = granularDelayLine[((granularDelayLineIndex + (granularDelayLineLength - grainDelayLinePositionInt)) + 1) & granularDelayLineMask];\n                            // let grainSample = grainSample0 + (grainSample1 - grainSample0) * grainDelayLinePositionT; // Linear interpolation (@TODO: sounds quite bad?)\n                            let grainSample = granularDelayLine[((granularDelayLineIndex + (granularDelayLineLength - grainDelayLinePositionInt))    ) & granularDelayLineMask]; // No interpolation\n                            ",0==u.granularEnvelopeType?e+="\n                                const grainEnvelope = grain.parabolicEnvelopeAmplitude;\n                                ":1==u.granularEnvelopeType&&(e+="\n                                const grainEnvelope = grain.rcbEnvelopeAmplitude;\n                                "),e+="\n                            grainSample *= grainEnvelope;\n                            granularOutput += grainSample;\n                            if (grainAgeInSamples > grainMaxAgeInSamples) {\n                                if (granularGrainCount > 0) {\n                                    // Faster equivalent of .pop, ignoring the order in the array.\n                                    const lastGrainIndex = granularGrainCount - 1;\n                                    const lastGrain = granularGrains[lastGrainIndex];\n                                    granularGrains[grainIndex] = lastGrain;\n                                    granularGrains[lastGrainIndex] = grain;\n                                    granularGrainCount--;\n                                    grainIndex--;\n                                    // ^ Dangerous, since this could end up causing an infinite loop,\n                                    // but should be okay in this case.\n                                }\n                            } else {\n                                grainAgeInSamples++;\n                            ",0==u.granularEnvelopeType?e+="\n                                    grain.parabolicEnvelopeAmplitude += grain.parabolicEnvelopeSlope;\n                                    grain.parabolicEnvelopeSlope += grain.parabolicEnvelopeCurve;\n                                    ":1==u.granularEnvelopeType&&(e+="\n                                    grain.updateRCBEnvelope();\n                                    "),e+="\n                                grain.ageInSamples = grainAgeInSamples;\n                                // if(usesRandomGrainLocation) {\n                                //     grain.delayLine -= grainPitchShift;\n                                // }\n                            }\n                        }\n                    }\n                }\n                granularWet += granularMixDelta;\n                granularDry -= granularMixDelta;\n                granularOutput *= Config.granularOutputLoudnessCompensation;\n                granularDelayLine[granularDelayLineIndex] = sample;\n                granularDelayLineIndex = (granularDelayLineIndex + 1) & granularDelayLineMask;\n                sample = sample * granularDry + granularOutput * granularWet;\n                tempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;\n                "):e+="let sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n                tempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;",o&&(e+="\n\t\t\t\t\t\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;"),r&&(e+="\n\t\t\t\t\t\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;"),m&&(e+=" \n                \n                const ringModOutput = sample * waveform[(ringModPhase*waveformLength)|0];\n                const ringModMixF = Math.max(0, ringModMix * ringModMixFade);\n                sample = sample * (1 - ringModMixF) + ringModOutput * ringModMixF;\n\n                ringModMix += ringModMixDelta;\n                ringModPhase += ringModPhaseDelta;\n                ringModPhase = ringModPhase % 1.0;\n                ringModPhaseDelta *= ringModPhaseDeltaScale;\n                ringModMixFade += ringModMixFadeDelta;\n                "),l&&(e+="\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;"),e+="\n\t\t\t\t\t\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;",e+=p?"\n\t\t\t\t\t\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;":"\n\t\t\t\t\t\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;",h&&(e+="\n\t\t\t\t\t\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;"),c&&(e+="\n\t\t\t\t\t\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\t\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\t\t\t\t\t\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;\n                    "),f&&(e+="\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;"),e+="\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;",t&&(e+="\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;"),e+="\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\teffectsComputer.mixVolume = mixVolume;\n\t\t\t\teffectsComputer.eqFilterVolume = eqFilterVolume;\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);",t&&(e+="\n\t\t\t\t\n\t\t\t\teffectsComputer.delayInputMult = delayInputMult;"),d&&(e+="\n                    effectsComputer.granularMix = granularWet;\n                    effectsComputer.granularGrainsLength = granularGrainCount;\n                    effectsComputer.granularDelayLineIndex = granularDelayLineIndex;\n                "),o&&(e+="\n\t\t\t\t\n\t\t\t\teffectsComputer.distortion = distortion;\n\t\t\t\teffectsComputer.distortionDrive = distortionDrive;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\t\t\t\t\n\t\t\t\teffectsComputer.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\teffectsComputer.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\teffectsComputer.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\teffectsComputer.distortionPrevInput = distortionPrevInput;\n\t\t\t\teffectsComputer.distortionNextOutput = distortionNextOutput;"),r&&(e+="\n\t\t\t\t\t\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\teffectsComputer.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\teffectsComputer.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\teffectsComputer.bitcrusherPhase = bitcrusherPhase;\n\t\t\t\teffectsComputer.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\n\t\t\t\teffectsComputer.bitcrusherScale = bitcrusherScale;\n\t\t\t\teffectsComputer.bitcrusherFoldLevel = bitcrusherFoldLevel;"),m&&(e+=" \n                effectsComputer.ringModMix = ringModMix;\n                effectsComputer.ringModMixDelta = ringModMixDelta;\n                effectsComputer.ringModPhase = ringModPhase;\n                effectsComputer.ringModPhaseDelta = ringModPhaseDelta;\n                effectsComputer.ringModPhaseDeltaScale = ringModPhaseDeltaScale;\n                effectsComputer.ringModWaveformIndex = ringModWaveformIndex;\n                effectsComputer.ringModPulseWidth = ringModPulseWidth;\n                effectsComputer.ringModMixFade = ringModMixFade;\n                 "),l&&(e+="\n\t\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\teffectsComputer.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\teffectsComputer.initialEqFilterInput2 = initialFilterInput2;"),p&&(e+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\teffectsComputer.panningDelayPos = panningDelayPos;\n\t\t\t\teffectsComputer.panningVolumeL = panningVolumeL;\n\t\t\t\teffectsComputer.panningVolumeR = panningVolumeR;\n\t\t\t\teffectsComputer.panningOffsetL = panningOffsetL;\n\t\t\t\teffectsComputer.panningOffsetR = panningOffsetR;"),h&&(e+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\teffectsComputer.chorusPhase = chorusPhase;\n\t\t\t\teffectsComputer.chorusDelayPos = chorusDelayPos;\n\t\t\t\teffectsComputer.chorusVoiceMult = chorusVoiceMult;\n\t\t\t\teffectsComputer.chorusCombinedMult = chorusCombinedMult;"),c&&(e+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\teffectsComputer.echoDelayPos = echoDelayPos;\n\t\t\t\teffectsComputer.echoMult = echoMult;\n\t\t\t\teffectsComputer.echoDelayOffsetRatio = echoDelayOffsetRatio;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\teffectsComputer.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\teffectsComputer.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\teffectsComputer.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\teffectsComputer.echoShelfPrevInputR = echoShelfPrevInputR;"),f&&(e+="\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\teffectsComputer.reverbDelayPos = reverbDelayPos;\n\t\t\t\teffectsComputer.reverbMult = reverb;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\teffectsComputer.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\teffectsComputer.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\teffectsComputer.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\teffectsComputer.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\teffectsComputer.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\teffectsComputer.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\teffectsComputer.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\teffectsComputer.reverbShelfPrevInput3 = reverbShelfPrevInput3;"),e+="}",y=new Function("Config","Synth",e)(u,Ge),Ge.effectsFunctionCache[v]=y}y(e,t,n,i,s,a)}static pulseWidthSynth(e,t,n,i,s){const a=Math.max(2,s.unisonVoices);let o=Ge.pulseFunctionCache[s.unisonVoices];if(null==o){let e="return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {";e+="\n        const data = synth.tempMonoInstrumentSampleBuffer;\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        ";for(let t=0;t<a;t++)e+="let phaseDelta# = tone.phaseDeltas[#];\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\n            ".replaceAll("#",t+"");for(let t=0;t<a;t++)e+="phase# = (tone.phases[#] % 1);\n            ".replaceAll("#",t+"");e+="let pulseWidth = tone.pulseWidth;\n        const pulseWidthDelta = tone.pulseWidthDelta;\n\n        const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n        ";for(let t=0;t<a;t++)e+="const sawPhaseA# = phase# % 1;\n                const sawPhaseB# = (phase# + pulseWidth) % 1;\n                let pulseWave# = sawPhaseB# - sawPhaseA#;\n                if (!instrumentState.aliases) {\n                    if (sawPhaseA# < phaseDelta#) {\n                        var t = sawPhaseA# / phaseDelta#;\n                        pulseWave# += (t + t - t * t - 1) * 0.5;\n                    } else if (sawPhaseA# > 1.0 - phaseDelta#) {\n                        var t = (sawPhaseA# - 1.0) / phaseDelta#;\n                        pulseWave# += (t + t + t * t + 1) * 0.5;\n                    }\n                    if (sawPhaseB# < phaseDelta#) {\n                        var t = sawPhaseB# / phaseDelta#;\n                        pulseWave# -= (t + t - t * t - 1) * 0.5;\n                    } else if (sawPhaseB# > 1.0 - phaseDelta#) {\n                        var t = (sawPhaseB# - 1.0) / phaseDelta#;\n                        pulseWave# -= (t + t + t * t + 1) * 0.5;\n                    }\n                }\n\n                ".replaceAll("#",t+"");const t=[];for(let e=0;e<a;e++)t.push("pulseWave"+e+(0!=e?" * unisonSign":""));e+="let inputSample = "+t.join(" + ")+";",e+="const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;";for(let t=0;t<a;t++)e+="phase# += phaseDelta#;\n                phaseDelta# *= phaseDeltaScale#;\n                ".replaceAll("#",t+"");e+="pulseWidth += pulseWidthDelta;\n\n            const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }";for(let t=0;t<a;t++)e+="tone.phases[#] = phase#;\n            tone.phaseDeltas[#] = phaseDelta#;\n                ".replaceAll("#",t+"");e+="tone.expression = expression;\n        tone.pulseWidth = pulseWidth;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }",o=new Function("Config","Synth",e)(u,Ge),Ge.pulseFunctionCache[s.unisonVoices]=o}o(e,t,n,i,s)}static supersawSynth(e,t,n,i,s){const a=e.tempMonoInstrumentSampleBuffer,o=0|u.supersawVoiceCount;let r=i.phaseDeltas[0];const l=+i.phaseDeltaScales[0];let p=+i.expression;const h=+i.expressionDelta;let c=i.phases,f=+i.supersawDynamism;const d=+i.supersawDynamismDelta,m=i.supersawUnisonDetunes;let v=+i.supersawShape;const y=+i.supersawShapeDelta;let g=+i.supersawDelayLength;const b=+i.supersawDelayLengthDelta,S=i.supersawDelayLine,w=S.length-1>>0;let x=0|i.supersawDelayIndex;x=(x&w)+S.length;const M=i.noteFilters,F=0|i.noteFilterCount;let k=+i.initialNoteFilterInput1,I=+i.initialNoteFilterInput2;const q=Ge.applyFilters,E=t+n;for(let e=t;e<E;e++){let t=(c[0]+r)%1,n=t-.5*(1+(o-1)*f);if(!s.aliases)if(t<r)n-=.5*((P=t/r)+P-P*P-1);else if(t>1-r){var P;n-=.5*((P=(t-1)/r)+P+P*P+1)}c[0]=t;for(let e=1;e<o;e++){const t=r*m[e];let i=(c[e]+t)%1;if(n+=i*f,!s.aliases)if(i<t){const e=i/t;n-=.5*(e+e-e*e-1)*f}else if(i>1-t){const e=(i-1)/t;n-=.5*(e+e+e*e+1)*f}c[e]=i}S[x&w]=n;const i=x-g,u=0|i,E=u+1,T=i-u,D=S[u&w];x++;const z=n-(D+(S[E&w]-D)*T)*v,C=q(z,k,I,F,M);I=k,k=z,r*=l,f+=d,v+=y,g+=b;const H=C*p;p+=h,a[e]+=H}i.phaseDeltas[0]=r,i.expression=p,i.supersawDynamism=f,i.supersawShape=v,i.supersawDelayLength=g,i.supersawDelayIndex=x,e.sanitizeFilters(M),i.initialNoteFilterInput1=k,i.initialNoteFilterInput2=I}static noiseSynth(e,t,n,i,s){const a=Math.max(2,s.unisonVoices);let o=Ge.noiseFunctionCache[s.unisonVoices];if(null==o){let e="return (synth, bufferIndex, runLength, tone, instrumentState) => {";e+="\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        const wave = instrumentState.wave;\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        ";for(let t=0;t<a;t++)e+='\n            let phaseDelta# = tone.phaseDeltas[#];\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n            let noiseSample# = +tone.noiseSamples[#];\n            // This is for a "legacy" style simplified 1st order lowpass filter with\n            // a cutoff frequency that is relative to the tone\'s fundamental frequency.\n            const pitchRelativefilter# = Math.min(1.0, phaseDelta# * instrumentState.noisePitchFilterMult);\n            \n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[#-1];\n            '.replaceAll("#",t+"");e+="\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n\n        const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n\n        const phaseMask = Config.spectrumNoiseLength - 1;\n\n        ";for(let t=0;t<a;t++)e+="let phase# = (tone.phases[#] % 1) * Config.chipNoiseLength;\n                ".replaceAll("#",t+"");e+="let test = true;";for(let t=0;t<a;t++){e+="\n            if (tone.phases[#] == 0.0) {\n                // Zero phase means the tone was reset, just give noise a random start phase instead.\n                phase# = Math.random() * Config.chipNoiseLength;\n                if (@ <= # && test && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) {".replaceAll("#",t+"").replaceAll("@",a+"").replaceAll("~",i.phases.length+"");for(let n=t+1;n<i.phases.length;n++)e+="phase~ = phase#;".replaceAll("#",t+"").replaceAll("~",n+"");e+="\n                    test = false;\n                }\n            }"}e+="\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            ";for(let t=0;t<a;t++)e+="\n                let waveSample# = wave[phase# & phaseMask];\n\n                noiseSample# += (waveSample# - noiseSample#) * pitchRelativefilter#;\n                ".replaceAll("#",t+"");const t=[];for(let e=0;e<a;e++)t.push("noiseSample"+e+(0!=e?" * unisonSign":""));e+="let inputSample = "+t.join(" + ")+";",e+="const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;";for(let t=0;t<a;t++)e+="phase# += phaseDelta#;\n                phaseDelta# *= phaseDeltaScale#;\n                ".replaceAll("#",t+"");e+="const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }";for(let t=0;t<a;t++)e+="tone.phases[#] = phase# / ".replaceAll("#",t+"")+u.chipNoiseLength+";\n            tone.phaseDeltas[#] = phaseDelta#;\n            ".replaceAll("#",t+"");e+="tone.expression = expression;";for(let t=0;t<a;t++)e+="tone.noiseSamples[#] = noiseSample#;\n             ".replaceAll("#",t+"");e+="\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }",o=new Function("Config","Synth",e)(u,Ge),Ge.noiseFunctionCache[s.unisonVoices]=o}o(e,t,n,i,s)}static spectrumSynth(e,t,n,i,s){const a=Math.max(2,s.unisonVoices);let o=Ge.spectrumFunctionCache[s.unisonVoices];if(null==o){let e="return (synth, bufferIndex, runLength, tone, instrumentState) => {";e+="\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        const wave = instrumentState.wave;\n        const samplesInPeriod = (1 << 7);\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        ";for(let t=0;t<a;t++)e+='\n            let phaseDelta# = tone.phaseDeltas[#] * samplesInPeriod;\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n            let noiseSample# = +tone.noiseSamples[#];\n            // This is for a "legacy" style simplified 1st order lowpass filter with\n            // a cutoff frequency that is relative to the tone\'s fundamental frequency.\n            const pitchRelativefilter# = Math.min(1.0, phaseDelta#);\n            \n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[#-1];\n            '.replaceAll("#",t+"");e+="\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n\n        const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n\n        const phaseMask = Config.spectrumNoiseLength - 1;\n\n        ";for(let t=0;t<a;t++)e+="let phase# = (tone.phases[#] % 1) * Config.spectrumNoiseLength;\n                ".replaceAll("#",t+"");e+="let test = true;";for(let t=0;t<a;t++){e+="\n            if (tone.phases[#] == 0.0) {\n                // Zero phase means the tone was reset, just give noise a random start phase instead.\n                phase# = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta#;\n                if (@ <= # && test && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) {".replaceAll("#",t+"").replaceAll("@",a+"").replaceAll("~",i.phases.length+"");for(let n=t+1;n<i.phases.length;n++)e+="phase~ = phase#;".replaceAll("#",t+"").replaceAll("~",n+"");e+="\n                    test = false;\n                }\n            }"}e+="\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {";for(let t=0;t<a;t++)e+="\n                const phase#Int = phase# | 0;\n                const index# = phase#Int & phaseMask;\n                let waveSample# = wave[index#]\n                const phase#Ratio = phase# - phase#Int;\n                waveSample# += (wave[index# + 1] - waveSample#) * phase#Ratio;\n\n                noiseSample# += (waveSample# - noiseSample#) * pitchRelativefilter#;\n                ".replaceAll("#",t+"");const t=[];for(let e=0;e<a;e++)t.push("noiseSample"+e+(0!=e?" * unisonSign":""));e+="let inputSample = "+t.join(" + ")+";",e+="const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;";for(let t=0;t<a;t++)e+="phase# += phaseDelta#;\n                phaseDelta# *= phaseDeltaScale#;\n                ".replaceAll("#",t+"");e+="const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }";for(let t=0;t<a;t++)e+="tone.phases[#] = phase# / ".replaceAll("#",t+"")+u.spectrumNoiseLength+";\n            tone.phaseDeltas[#] = phaseDelta# / samplesInPeriod;\n            ".replaceAll("#",t+"");e+="tone.expression = expression;";for(let t=0;t<a;t++)e+="tone.noiseSamples[#] = noiseSample#;\n             ".replaceAll("#",t+"");e+="\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }",o=new Function("Config","Synth",e)(u,Ge),Ge.spectrumFunctionCache[s.unisonVoices]=o}o(e,t,n,i,s)}static drumsetSynth(e,t,n,i,s){const a=Math.max(2,s.unisonVoices);let o=Ge.drumFunctionCache[s.unisonVoices];if(null==o){let e="return (synth, bufferIndex, runLength, tone, instrumentState) => {";e+="\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        let wave = instrumentState.getDrumsetWave(tone.drumsetPitch);\n        const referenceDelta = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch);\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        ";for(let t=0;t<a;t++)e+="let phaseDelta# = tone.phaseDeltas[#] / referenceDelta;\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\n            ".replaceAll("#",t+"");e+="let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n\n        const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;";for(let t=0;t<a;t++)e+="let phase# = (tone.phases[#] % 1) * Config.spectrumNoiseLength;\n            ".replaceAll("#",t+"");e+="let test = true;";for(let t=0;t<a;t++){e+="\n        if (tone.phases[#] == 0.0) {\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\n            phase# = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta#;\n            if (@ <= # && test && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) {".replaceAll("#",t+"").replaceAll("@",a+"").replaceAll("~",i.phases.length+"");for(let n=t+1;n<i.phases.length;n++)e+="phase~ = phase#;".replaceAll("#",t+"").replaceAll("~",n+"");e+="\n                test = false;\n            }\n        }"}e+="const phaseMask = Config.spectrumNoiseLength - 1;\n\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n        ";for(let t=0;t<a;t++)e+="\n                const phase#Int = phase# | 0;\n                const index# = phase#Int & phaseMask;\n                let noiseSample# = wave[index#]\n                const phase#Ratio = phase# - phase#Int;\n                noiseSample# += (wave[index# + 1] - noiseSample#) * phase#Ratio;\n                ".replaceAll("#",t+"");const t=[];for(let e=0;e<a;e++)t.push("noiseSample"+e+(0!=e?" * unisonSign":""));e+="let inputSample = "+t.join(" + ")+";",e+="const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;";for(let t=0;t<a;t++)e+="phase# += phaseDelta#;\n                phaseDelta# *= phaseDeltaScale#;\n                ".replaceAll("#",t+"");e+="const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }";for(let t=0;t<a;t++)e+="tone.phases[#] = phase# / ".replaceAll("#",t+"")+u.spectrumNoiseLength+";\n            tone.phaseDeltas[#] = phaseDelta# * referenceDelta;\n            ".replaceAll("#",t+"");e+="tone.expression = expression;\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }",o=new Function("Config","Synth","InstrumentState",e)(u,Ge,Oe),Ge.drumFunctionCache[s.unisonVoices]=o}o(e,t,n,i,s)}static modSynth(e,t,n,i,s){if(!e.song)return;let a=u.modCount-1-i.pitches[0];if(s.invalidModulators[a])return;let o=s.modulators[a],r=[];if(u.modulators[s.modulators[a]].forSong)r.push(0);else if(s.modInstruments[a]==e.song.channels[s.modChannels[a]].instruments.length)for(let t=0;t<e.song.channels[s.modChannels[a]].instruments.length;t++)r.push(t);else s.modInstruments[a]>e.song.channels[s.modChannels[a]].instruments.length?null!=e.song.getPattern(s.modChannels[a],e.bar)&&(r=e.song.getPattern(s.modChannels[a],e.bar).instruments):r.push(s.modInstruments[a]);for(let t=0;t<r.length;t++){e.setModValue(i.expression,i.expression+i.expressionDelta,s.modChannels[a],r[t],o);for(let n=0;n<e.heldMods.length;n++)u.modulators[s.modulators[a]].forSong?e.heldMods[n].setting==o&&e.setModValue(e.heldMods[n].volume,e.heldMods[n].volume,s.modChannels[a],r[t],o):e.heldMods[n].channelIndex==s.modChannels[a]&&e.heldMods[n].instrumentIndex==r[t]&&e.heldMods[n].setting==o&&e.setModValue(e.heldMods[n].volume,e.heldMods[n].volume,s.modChannels[a],r[t],o);if(o==u.modulators.dictionary["reset arp"].index&&0==e.tick&&i.noteStartPart==e.beat*u.partsPerBeat+e.part)e.channels[s.modChannels[a]].instruments[r[t]].arpTime=0;else if(o==u.modulators.dictionary["reset envelope"].index&&0==e.tick&&i.noteStartPart==e.beat*u.partsPerBeat+e.part){let n=s.modEnvelopeNumbers[a];const i=e.channels[s.modChannels[a]].instruments[r[t]];e.song.channels[s.modChannels[a]].instruments[r[t]].envelopeCount>n&&(i.envelopeTime[n]=0)}else if(o==u.modulators.dictionary["next bar"].index)e.wantToSkip=!0;else if(o==u.modulators.dictionary["song eq"].index){const t=e.song;let o=0|s.modFilterTypes[a];if(0==o){let s=0;const a=e.getTicksIntoBar()/u.ticksPerPart;for(;i.note.start+i.note.pins[s].time<=a;)s++;let o=(a-i.note.start+n/(e.getSamplesPerTick()*u.ticksPerPart)*u.ticksPerPart-i.note.pins[s-1].time)/(i.note.pins[s].time-i.note.pins[s-1].time);null!=t.eqSubFilters[i.note.pins[s-1].size]||null!=t.eqSubFilters[i.note.pins[s].size]?t.tmpEqFilterEnd=ke.lerpFilters(t.eqSubFilters[i.note.pins[s-1].size],t.eqSubFilters[i.note.pins[s].size],o):t.tmpEqFilterEnd=t.eqFilter}else{for(let e=0;e<u.filterMorphCount;e++)t.tmpEqFilterEnd==t.eqSubFilters[e]&&null!=t.tmpEqFilterEnd&&(t.tmpEqFilterEnd=new ke,t.tmpEqFilterEnd.fromJsonObject(t.eqSubFilters[e].toJsonObject()));null==t.tmpEqFilterEnd&&(t.tmpEqFilterEnd=new ke,t.tmpEqFilterEnd.fromJsonObject(t.eqFilter.toJsonObject())),t.tmpEqFilterEnd.controlPointCount>Math.floor((o-1)/2)&&(o%2?t.tmpEqFilterEnd.controlPoints[Math.floor((o-1)/2)].freq=i.expression+i.expressionDelta:t.tmpEqFilterEnd.controlPoints[Math.floor((o-1)/2)].gain=i.expression+i.expressionDelta)}}else if(o==u.modulators.dictionary["eq filter"].index){const o=e.song.channels[s.modChannels[a]].instruments[r[t]];if(!o.eqFilterType){let t=0|s.modFilterTypes[a];if(0==t){let t=0;const s=e.getTicksIntoBar()/u.ticksPerPart;for(;i.note.start+i.note.pins[t].time<=s;)t++;let a=(s-i.note.start+n/(e.getSamplesPerTick()*u.ticksPerPart)*u.ticksPerPart-i.note.pins[t-1].time)/(i.note.pins[t].time-i.note.pins[t-1].time);null!=o.eqSubFilters[i.note.pins[t-1].size]||null!=o.eqSubFilters[i.note.pins[t].size]?o.tmpEqFilterEnd=ke.lerpFilters(o.eqSubFilters[i.note.pins[t-1].size],o.eqSubFilters[i.note.pins[t].size],a):o.tmpEqFilterEnd=o.eqFilter}else{for(let e=0;e<u.filterMorphCount;e++)o.tmpEqFilterEnd==o.eqSubFilters[e]&&null!=o.tmpEqFilterEnd&&(o.tmpEqFilterEnd=new ke,o.tmpEqFilterEnd.fromJsonObject(o.eqSubFilters[e].toJsonObject()));null==o.tmpEqFilterEnd&&(o.tmpEqFilterEnd=new ke,o.tmpEqFilterEnd.fromJsonObject(o.eqFilter.toJsonObject())),o.tmpEqFilterEnd.controlPointCount>Math.floor((t-1)/2)&&(t%2?o.tmpEqFilterEnd.controlPoints[Math.floor((t-1)/2)].freq=i.expression+i.expressionDelta:o.tmpEqFilterEnd.controlPoints[Math.floor((t-1)/2)].gain=i.expression+i.expressionDelta)}}}else if(o==u.modulators.dictionary["note filter"].index){const o=e.song.channels[s.modChannels[a]].instruments[r[t]];if(!o.noteFilterType){let t=0|s.modFilterTypes[a];if(0==t){let t=0;const s=e.getTicksIntoBar()/u.ticksPerPart;for(;i.note.start+i.note.pins[t].time<=s;)t++;let a=(s-i.note.start+n/(e.getSamplesPerTick()*u.ticksPerPart)*u.ticksPerPart-i.note.pins[t-1].time)/(i.note.pins[t].time-i.note.pins[t-1].time);null!=o.noteSubFilters[i.note.pins[t-1].size]||null!=o.noteSubFilters[i.note.pins[t].size]?o.tmpNoteFilterEnd=ke.lerpFilters(o.noteSubFilters[i.note.pins[t-1].size],o.noteSubFilters[i.note.pins[t].size],a):o.tmpNoteFilterEnd=o.noteFilter}else{for(let e=0;e<u.filterMorphCount;e++)o.tmpNoteFilterEnd==o.noteSubFilters[e]&&null!=o.tmpNoteFilterEnd&&(o.tmpNoteFilterEnd=new ke,o.tmpNoteFilterEnd.fromJsonObject(o.noteSubFilters[e].toJsonObject()));null==o.tmpNoteFilterEnd&&(o.tmpNoteFilterEnd=new ke,o.tmpNoteFilterEnd.fromJsonObject(o.noteFilter.toJsonObject())),o.tmpNoteFilterEnd.controlPointCount>Math.floor((t-1)/2)&&(t%2?o.tmpNoteFilterEnd.controlPoints[Math.floor((t-1)/2)].freq=i.expression+i.expressionDelta:o.tmpNoteFilterEnd.controlPoints[Math.floor((t-1)/2)].gain=i.expression+i.expressionDelta)}}}else if(o==u.modulators.dictionary["individual envelope speed"].index){const n=e.song.channels[s.modChannels[a]].instruments[r[t]];let o=s.modEnvelopeNumbers[a],l=i.expression+i.expressionDelta;n.envelopeCount>o&&(Number.isInteger(l)?n.envelopes[o].tempEnvelopeSpeed=u.perEnvelopeSpeedIndices[l]:(l=(1-l%1)*u.perEnvelopeSpeedIndices[Math.floor(l)]+l%1*u.perEnvelopeSpeedIndices[Math.ceil(l)],n.envelopes[o].tempEnvelopeSpeed=l))}else if(o==u.modulators.dictionary["individual envelope lower bound"].index){const n=e.song.channels[s.modChannels[a]].instruments[r[t]];let o=s.modEnvelopeNumbers[a],l=i.expression+i.expressionDelta;n.envelopeCount>o&&(n.envelopes[o].tempEnvelopeLowerBound=l/10)}else if(o==u.modulators.dictionary["individual envelope upper bound"].index){const n=e.song.channels[s.modChannels[a]].instruments[r[t]];let o=s.modEnvelopeNumbers[a],l=i.expression+i.expressionDelta;n.envelopeCount>o&&(n.envelopes[o].tempEnvelopeUpperBound=l/10)}}}static findRandomZeroCrossing(e,t){let n=Math.random()*t;const i=t-1;let s=n&i,a=e[s];for(let o=128;o>0;o--){const o=s+16&i,r=e[o];if(a*r<=0){for(let o=0;o<16;o++){const o=s+1&i,r=e[o];if(a*r<=0){const e=r-a;n=s,Math.abs(e)>1e-8&&(n+=-a/e),n=Math.max(0,n)%t;break}s=o,a=r}break}s=o,a=r}return n}static instrumentVolumeToVolumeMult(e){return e==-u.volumeRange/2?0:Math.pow(2,u.volumeLogScale*e)}static volumeMultToInstrumentVolume(e){return e<=0?-u.volumeRange/2:Math.min(u.volumeRange,Math.log(e)/Math.LN2/u.volumeLogScale)}static noteSizeToVolumeMult(e){return Math.pow(Math.max(0,e)/u.noteSizeMax,1.5)}static volumeMultToNoteSize(e){return Math.pow(Math.max(0,e),1/1.5)*u.noteSizeMax}static fadeInSettingToSeconds(e){return.0125*(.95*e+.05*e*e)}static secondsToFadeInSetting(e){return te(0,u.fadeInRange,Math.round((-.95+Math.sqrt(.9025+.2*e/.0125))/.1))}static fadeOutSettingToTicks(e){return u.fadeOutTicks[e]}static ticksToFadeOutSetting(e){let t=u.fadeOutTicks[0];if(e<=t)return 0;for(let n=1;n<u.fadeOutTicks.length;n++){let i=u.fadeOutTicks[n];if(e<=i)return e<(t+i)/2?n-1:n;t=i}return u.fadeOutTicks.length-1}static detuneToCents(e){return e-u.detuneCenter}static centsToDetune(e){return e+u.detuneCenter}static getOperatorWave(e,t){return 2!=e?u.operatorWaves[e]:u.pwmOperatorWaves[t]}getSamplesPerTick(){if(null==this.song)return 0;let e=this.song.getBeatsPerMinute();return this.isModActive(u.modulators.dictionary.tempo.index)&&(e=this.getModValue(u.modulators.dictionary.tempo.index)),this.getSamplesPerTickSpecificBPM(e)}getSamplesPerTickSpecificBPM(e){const t=e/60,n=u.partsPerBeat*t,i=u.ticksPerPart*n;return this.samplesPerSecond/i}static fittingPowerOfTwo(e){return 1<<32-Math.clz32(Math.ceil(e)-1)}sanitizeFilters(e){let t=!1;for(const n of e){const e=Math.abs(n.output1),i=Math.abs(n.output2);if(!(e<100&&i<100)){t=!0;break}e<ee&&(n.output1=0),i<ee&&(n.output2=0)}if(t)for(const t of e)t.output1=0,t.output2=0}static sanitizeDelayLine(e,t,n){for(;;){const i=--t&n,s=Math.abs(e[i]);if(Number.isFinite(s)&&(0==s||s>=ee))break;e[i]=0}}static applyFilters(e,t,n,i,s){for(let a=0;a<i;a++){const i=s[a],o=i.output1,r=i.output2,l=i.a1,p=i.a2,h=i.b0,u=i.b1,c=i.b2;e=h*e+u*t+c*n-l*o-p*r,i.a1=l+i.a1Delta,i.a2=p+i.a2Delta,i.useMultiplicativeInputCoefficients?(i.b0=h*i.b0Delta,i.b1=u*i.b1Delta,i.b2=c*i.b2Delta):(i.b0=h+i.b0Delta,i.b1=u+i.b1Delta,i.b2=c+i.b2Delta),i.output2=o,i.output1=e,n=r,t=o}return e}computeTicksSinceStart(e=!1){var t,n;const i=(null===(t=this.song)||void 0===t?void 0:t.beatsPerBar)?null===(n=this.song)||void 0===n?void 0:n.beatsPerBar:8;return e?u.ticksPerPart*u.partsPerBeat*i*this.bar:this.tick+u.ticksPerPart*(this.part+u.partsPerBeat*(this.beat+i*this.bar))}}return Ge.tempFilterStartCoefficients=new V,Ge.tempFilterEndCoefficients=new V,Ge.fmSynthFunctionCache={},Ge.fm6SynthFunctionCache={},Ge.effectsFunctionCache=Array(128).fill(void 0),Ge.pickedStringFunctionCache=Array(3).fill(void 0),Ge.spectrumFunctionCache=[],Ge.noiseFunctionCache=[],Ge.drumFunctionCache=[],Ge.chipFunctionCache=[],Ge.pulseFunctionCache=[],Ge.harmonicsFunctionCache=[],Ge.loopableChipFunctionCache=Array(u.unisonVoicesMax+1).fill([]),Ge.fmSourceTemplate=("\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\tconst sineWave = Config.sineWave;\n\t\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * "+u.sineWaveLength+";\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * "+u.sineWaveLength+";\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / "+u.sineWaveLength+";\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / "+u.sineWaveLength+";\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t").split("\n"),Ge.operatorSourceTemplate=("\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\t\tconst operator#Index    = operator#PhaseInt & "+u.sineWaveMask+";\n                const operator#Sample   = operator#Wave[operator#Index];\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t").split("\n"),e.AdvancedInstrumentSettings=qe,e.Channel=Pe,e.Config=u,e.CustomAlgorithm=ye,e.CustomFeedBack=ge,e.EnvelopeSettings=Ie,e.FilterControlPoint=Fe,e.FilterSettings=ke,e.HarmonicsWave=we,e.Instrument=Ee,e.Note=de,e.Operator=ve,e.Pattern=me,e.Song=Te,e.SpectrumWave=be,e.Synth=Ge,e.clamp=te,e.makeNotePin=fe,e.parseFloatWithDefault=ie,e.parseIntWithDefault=se,Object.defineProperty(e,"te",{value:!0}),e}({});
//# sourceMappingURL=beepbox_synth.min.js.map